#!/usr/bin/env node

/**
 * Script to generate frontend-specific configuration from 1edge.config.json
 * This extracts only the parts needed by the frontend (networks, tokenMapping)
 * and generates TypeScript constants for build-time inclusion
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Read the default config
const configPath = path.join(__dirname, "..", "1edge.config.json");
const config = JSON.parse(fs.readFileSync(configPath, "utf8"));

// Extract frontend-relevant parts
const frontendConfig = {
  networks: config.networks,
  tokenMapping: config.tokenMapping,
};

// Generate TypeScript file content
const tsContent = `// This file is auto-generated by scripts/build-frontend-config.js
// DO NOT EDIT MANUALLY

export interface Network {
  chainId: number;
  name: string;
  rpcUrl: string;
  aggregatorV6: string;
  nativeSymbol: string;
  blockExplorer: string;
}

export interface TokenMapping {
  [symbol: string]: {
    [chainId: string]: string;
  };
}

export interface FrontendConfig {
  networks: { [chainId: string]: Network };
  tokenMapping: TokenMapping;
}

export const CONFIG: FrontendConfig = ${JSON.stringify(frontendConfig, null, 2)};

// Helper functions
export const getNetworkById = (chainId: number): Network | undefined => {
  return CONFIG.networks[chainId.toString()];
};

export const getTokenAddress = (symbol: string, chainId: number): string | undefined => {
  return CONFIG.tokenMapping[symbol]?.[chainId.toString()];
};

export const getTokenSymbol = (address: string, chainId: number): string | undefined => {
  const chainIdStr = chainId.toString();
  for (const [symbol, mapping] of Object.entries(CONFIG.tokenMapping)) {
    if (mapping[chainIdStr]?.toLowerCase() === address.toLowerCase()) {
      return symbol;
    }
  }
  return undefined;
};

export const getSupportedTokens = (chainId: number): string[] => {
  const chainIdStr = chainId.toString();
  return Object.entries(CONFIG.tokenMapping)
    .filter(([_, mapping]) => mapping[chainIdStr])
    .map(([symbol]) => symbol);
};

export const getAllNetworks = (): Network[] => {
  return Object.values(CONFIG.networks);
};

export const getAllChainIds = (): number[] => {
  return Object.keys(CONFIG.networks).map(id => parseInt(id));
};
`;

// Write to frontend config file
const outputPath = path.join(
  __dirname,
  "..",
  "front",
  "config",
  "generated.ts",
);
const outputDir = path.dirname(outputPath);

// Create directory if it doesn't exist
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

fs.writeFileSync(outputPath, tsContent);

console.log(`âœ… Frontend config generated at: ${outputPath}`);
console.log(`   - ${Object.keys(frontendConfig.networks).length} networks`);
console.log(`   - ${Object.keys(frontendConfig.tokenMapping).length} tokens`);
