// This file is auto-generated by scripts/build-frontend-config.js
// DO NOT EDIT MANUALLY

export interface Network {
  chainId: number;
  name: string;
  rpcUrl: string;
  aggregatorV6: string;
  nativeSymbol: string;
  blockExplorer: string;
  createXFactory?: string;
}

export interface TokenMapping {
  [symbol: string]: {
    [chainId: string]: string;
  };
}

export interface FrontendConfig {
  networks: { [chainId: string]: Network };
  tokenMapping: TokenMapping;
}

export const CONFIG: FrontendConfig = {
  "networks": {
    "1": {
      "chainId": 1,
      "name": "Ethereum",
      "rpcUrl": "https://1rpc.io/eth",
      "aggregatorV6": "0x111111125421cA6dc452d289314280a0f8842A65",
      "createXFactory": "0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed",
      "nativeSymbol": "ETH",
      "blockExplorer": "https://etherscan.io"
    },
    "10": {
      "chainId": 10,
      "name": "Optimism",
      "rpcUrl": "https://mainnet.optimism.io",
      "aggregatorV6": "0x111111125421cA6dc452d289314280a0f8842A65",
      "createXFactory": "0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed",
      "nativeSymbol": "ETH",
      "blockExplorer": "https://optimistic.etherscan.io"
    },
    "56": {
      "chainId": 56,
      "name": "BSC",
      "rpcUrl": "https://bsc-dataseed.binance.org",
      "aggregatorV6": "0x111111125421cA6dc452d289314280a0f8842A65",
      "createXFactory": "0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed",
      "nativeSymbol": "BNB",
      "blockExplorer": "https://bscscan.com"
    },
    "137": {
      "chainId": 137,
      "name": "Polygon",
      "rpcUrl": "https://polygon-rpc.com",
      "aggregatorV6": "0x111111125421cA6dc452d289314280a0f8842A65",
      "createXFactory": "0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed",
      "nativeSymbol": "MATIC",
      "blockExplorer": "https://polygonscan.com"
    },
    "8453": {
      "chainId": 8453,
      "name": "Base",
      "rpcUrl": "https://mainnet.base.org",
      "aggregatorV6": "0x111111125421cA6dc452d289314280a0f8842A65",
      "createXFactory": "0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed",
      "nativeSymbol": "ETH",
      "blockExplorer": "https://basescan.org"
    },
    "42161": {
      "chainId": 42161,
      "name": "Arbitrum",
      "rpcUrl": "https://arb1.arbitrum.io/rpc",
      "aggregatorV6": "0x111111125421cA6dc452d289314280a0f8842A65",
      "createXFactory": "0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed",
      "nativeSymbol": "ETH",
      "blockExplorer": "https://arbiscan.io"
    },
    "43114": {
      "chainId": 43114,
      "name": "Avalanche",
      "rpcUrl": "https://api.avax.network/ext/bc/C/rpc",
      "aggregatorV6": "0x111111125421cA6dc452d289314280a0f8842A65",
      "createXFactory": "0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed",
      "nativeSymbol": "AVAX",
      "blockExplorer": "https://snowtrace.io"
    }
  },
  "tokenMapping": {
    "WBTC": {
      "1": "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
      "56": "0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
      "8453": "0x0555E30da8f98308EdB960aa94C0Db47230d2B9c",
      "42161": "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
      "43114": "0x152b9d0FdC40C096757F570A51E494bd4b943E50"
    },
    "WETH": {
      "1": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      "56": "0x2170Ed0880ac9A755fd29B2688956BD959F933F8",
      "8453": "0x4200000000000000000000000000000000000006",
      "42161": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      "43114": "0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB"
    },
    "USDT": {
      "1": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
      "56": "0x55d398326f99059fF775485246999027B3197955",
      "8453": "0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2",
      "42161": "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
      "43114": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7"
    },
    "USDC": {
      "1": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      "56": "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
      "8453": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
      "42161": "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
      "43114": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
    },
    "1INCH": {
      "1": "0x111111111117dC0aa78b770fA6A738034120C302",
      "56": "0x111111111117dC0aa78b770fA6A738034120C302",
      "8453": "0xc5fecC3a29Fb57B5024eEc8a2239d4621e111CBE",
      "42161": "0x6314C31A7a1652cE482cffe247E9CB7c3f4BB9aF"
    },
    "AAVE": {
      "1": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
      "56": "0xfb6115445Bff7b52FeB98650C87f44907E58f802",
      "8453": "0x63706e401c06ac8513145b7687A14804d17f814b",
      "42161": "0xba5DdD1f9d7F570dc94a51479a000E3BCE967196",
      "43114": "0x63a72806098Bd3D9520cC43356dD78afe5D386D9"
    }
  }
};

// Helper functions
export const getNetworkById = (chainId: number): Network | undefined => {
  return CONFIG.networks[chainId.toString()];
};

export const getTokenAddress = (symbol: string, chainId: number): string | undefined => {
  return CONFIG.tokenMapping[symbol]?.[chainId.toString()];
};

export const getTokenSymbol = (address: string, chainId: number): string | undefined => {
  const chainIdStr = chainId.toString();
  for (const [symbol, mapping] of Object.entries(CONFIG.tokenMapping)) {
    if (mapping[chainIdStr]?.toLowerCase() === address.toLowerCase()) {
      return symbol;
    }
  }
  return undefined;
};

export const getSupportedTokens = (chainId: number): string[] => {
  const chainIdStr = chainId.toString();
  return Object.entries(CONFIG.tokenMapping)
    .filter(([_, mapping]) => mapping[chainIdStr])
    .map(([symbol]) => symbol);
};

export const getAllNetworks = (): Network[] => {
  return Object.values(CONFIG.networks);
};

export const getAllChainIds = (): number[] => {
  return Object.keys(CONFIG.networks).map(id => parseInt(id));
};
