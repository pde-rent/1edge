[
  {
    "id": "1inch/Orderbook API/overview",
    "title": "overview",
    "content": "1inch Orderbook API Overview ** Your gateway to decentralized limit order trading** The 1inch Orderbook API provides RESTful access to limit orders, enabling efficient discovery and execution while maintaining the decentralized nature of the protocol. %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','primaryBorderColor':'#6c757d','lineColor':'#6c757d','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','gridColor':'#dee2e6','secondaryColor':'#e9ecef','tertiaryColor':'#f8f9fa'}}}%% graph TD subgraph \"Orderbook API Architecture\" CLIENT[Client Application] --> API[Orderbook API] API --> DB[(Order Database)] API --> EVENTS[Event Processor] API --> VALIDATOR[Order Validator] end subgraph \"Order Flow\" MAKER[Maker] -->|Submit Signed Order| API API -->|Store| DB TAKER[Taker] -->|Query Orders| API API -->|Return Matches| TAKER TAKER -->|Execute on-chain| BLOCKCHAIN[Blockchain] BLOCKCHAIN -->|Emit Events| EVENTS EVENTS -->|Update Status| DB end subgraph \"Data Access\" DB --> SEARCH[Order Search] DB --> STATS[Market Statistics] DB --> HISTORY[Event History] end Purpose & Mission The Orderbook API bridges the gap between off-chain order creation and on-chain execution by providing: Function Description Benefit Order Storage Store signed limit orders from makers Centralized discovery Order Discovery Enable takers and resolvers to find orders Efficient matching Status Tracking Monitor order lifecycle and events Real-time insights Price Discovery Facilitate market depth analysis Better pricing Key Features Order Management Complete order lifecycle management Submit Orders : Store cryptographically signed orders for public discovery Query Orders : Advanced search with filters for maker, assets, status, and more Order Status : Real-time tracking from creation to completion or cancellation Batch Operations : Efficient handling of multiple orders Event Tracking Stay updated with real-time order events Fill Events : Monitor partial and complete order executions Cancel Events : Track order cancellations and invalidations Real-time Updates : WebSocket support for live order state changes Historical Data : Access complete event history for analysis Market Data & Analytics Deep market insights at your fingertips Active Pairs : Discover all trading pairs with active liquidity Order Statistics : Comprehensive metrics on order distribution Market Depth : Analyze liquidity across different price levels Volume Metrics : Track trading volume and activity trends API Endpoints Core Order Operations Endpoint Method Description Use Case /{chain} POST Submit new order Order creation /{chain}/all GET List all orders with filters Market scanning /{chain}/order/{hash} GET Get specific order details Order verification /{chain}/address/{addr} GET Get orders by maker Portfolio tracking Event & Analytics Endpoint Method Description Use Case /{chain}/events GET Get all order events Market analysis /{chain}/events/{hash} GET Get events for specific order Order tracking /{chain}/count GET Get order counts with filters Statistics /{chain}/unique-active-pairs GET Get active trading pairs Market discovery Authentication & Security API Key Setup ** Get started in minutes** Obtain your API key from the 1inch Developer Portal # Include in all requests Authorization: Bearer YOUR_API_KEY Security Best Practices ** Security Guidelines** Never expose API keys in client-side code Use environment variables for key storage Rotate keys regularly for enhanced security Monitor usage patterns for unusual activity Rate Limits & Performance Current Limits Limit Type Quota Scope Per Second 10 requests Per API key Per Minute 1,000 requests Per API key Per Hour 50,000 requests Per API key Daily 1M requests Per API key Optimization Tips ** Pro Tips for Better Performance** Use appropriate filters to reduce response size Implement client-side caching for static data Batch requests when possible Use pagination for large datasets Response Format & Standards Success Response Structure { \"data\": {...}, // Requested data \"meta\": { // Metadata (pagination, etc.) \"totalItems\": 1000, \"currentPage\": 1, \"totalPages\": 10 }, \"timestamp\": \"2024-01-01T00:00:00Z\" } Error Response Structure { \"error\": { \"code\": 400, \"message\": \"Invalid request parameters\", \"details\": \"Chain ID must be a valid number\" }, \"timestamp\": \"2024-01-01T00:00:00Z\" } HTTP Status Codes Code Status Meaning 200 OK Request successful 400 Bad Request Invalid parameters 401 üîí Unauthorized Invalid API key 404 Not Found Resource not found 429 ‚è∏ Rate Limited Too many requests 500 üî• Server Error Internal server issue Network Support Supported Blockchains Network Chain ID Status Features Ethereum 1 Active Full support Polygon 137 Active Full support BSC 56 Active Full support Arbitrum 42161 Active Full support Optimism 10 Active Full support Avalanche 43114 Active Full support Base 8453 Beta Limited support Network Configuration // Example: Switch between networks const networks = { ethereum: { chainId: 1, name: \"Ethereum Mainnet\" }, polygon: { chainId: 137, name: \"Polygon\" }, bsc: { chainId: 56, name: \"BSC\" }, arbitrum: { chainId: 42161, name: \"Arbitrum One\" }, optimism: { chainId: 10, name: \"Optimism\" }, }; Getting Started Quick Setup # Install the SDK bun add @1inch/limit-order-sdk # Set up environment echo \"API_KEY=your_api_key_here\" > .env First API Call import { Api, AxiosProviderConnector } from \"@1inch/limit-order-sdk\"; const api = new Api({ networkId: 1, // Ethereum authKey: process.env.API_KEY, httpConnector: new AxiosProviderConnector(), }); // Get all active orders const orders = await api.getAllOrders({ limit: 10 }); console.log(`Found ${orders.length} active orders`); Additional Resources Quick Links Quickstart Guide - Get up and running in 5 minutes API Reference - Comprehensive endpoint documentation üõ† SDK Integration - JavaScript/TypeScript SDK Contract Integration - Direct contract interaction Support & Community Documentation Portal - Complete documentation Developer Discord - Community support üêõ GitHub Issues - Bug reports üìß Developer Support - Direct assistance ** Ready to build?** Start with our Quickstart Guide and have your first order running in minutes!",
    "url": "/docs/1inch/Orderbook API/overview",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "1inch Orderbook API Overview",
        "anchor": "1inch-orderbook-api-overview"
      },
      {
        "level": 2,
        "text": "Purpose & Mission",
        "anchor": "purpose-mission"
      },
      {
        "level": 2,
        "text": "Key Features",
        "anchor": "key-features"
      },
      {
        "level": 3,
        "text": "Order Management",
        "anchor": "order-management"
      },
      {
        "level": 3,
        "text": "Event Tracking",
        "anchor": "event-tracking"
      },
      {
        "level": 3,
        "text": "Market Data & Analytics",
        "anchor": "market-data-analytics"
      },
      {
        "level": 2,
        "text": "API Endpoints",
        "anchor": "api-endpoints"
      },
      {
        "level": 3,
        "text": "Core Order Operations",
        "anchor": "core-order-operations"
      },
      {
        "level": 3,
        "text": "Event & Analytics",
        "anchor": "event-analytics"
      },
      {
        "level": 2,
        "text": "Authentication & Security",
        "anchor": "authentication-security"
      },
      {
        "level": 3,
        "text": "API Key Setup",
        "anchor": "api-key-setup"
      },
      {
        "level": 1,
        "text": "Include in all requests",
        "anchor": "include-in-all-requests"
      },
      {
        "level": 3,
        "text": "Security Best Practices",
        "anchor": "security-best-practices"
      },
      {
        "level": 2,
        "text": "Rate Limits & Performance",
        "anchor": "rate-limits-performance"
      },
      {
        "level": 3,
        "text": "Current Limits",
        "anchor": "current-limits"
      },
      {
        "level": 3,
        "text": "Optimization Tips",
        "anchor": "optimization-tips"
      },
      {
        "level": 2,
        "text": "Response Format & Standards",
        "anchor": "response-format-standards"
      },
      {
        "level": 3,
        "text": "Success Response Structure",
        "anchor": "success-response-structure"
      },
      {
        "level": 3,
        "text": "Error Response Structure",
        "anchor": "error-response-structure"
      },
      {
        "level": 3,
        "text": "HTTP Status Codes",
        "anchor": "http-status-codes"
      },
      {
        "level": 2,
        "text": "Network Support",
        "anchor": "network-support"
      },
      {
        "level": 3,
        "text": "Supported Blockchains",
        "anchor": "supported-blockchains"
      },
      {
        "level": 3,
        "text": "Network Configuration",
        "anchor": "network-configuration"
      },
      {
        "level": 2,
        "text": "Getting Started",
        "anchor": "getting-started"
      },
      {
        "level": 3,
        "text": "Quick Setup",
        "anchor": "quick-setup"
      },
      {
        "level": 1,
        "text": "Install the SDK",
        "anchor": "install-the-sdk"
      },
      {
        "level": 1,
        "text": "Set up environment",
        "anchor": "set-up-environment"
      },
      {
        "level": 3,
        "text": "First API Call",
        "anchor": "first-api-call"
      },
      {
        "level": 2,
        "text": "Additional Resources",
        "anchor": "additional-resources"
      },
      {
        "level": 3,
        "text": "Quick Links",
        "anchor": "quick-links"
      },
      {
        "level": 3,
        "text": "Support & Community",
        "anchor": "support-community"
      }
    ],
    "excerpt": "1inch Orderbook API Overview ** Your gateway to decentralized limit order trading** The 1inch Orderbook API provides RESTful access to limit orders, enabling efficient discovery and execution while ma..."
  },
  {
    "id": "1inch/Orderbook API/overview#1inch-orderbook-api-overview",
    "title": "overview - 1inch Orderbook API Overview",
    "content": "1inch Orderbook API Overview",
    "url": "/docs/1inch/Orderbook API/overview#1inch-orderbook-api-overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "1inch Orderbook API Overview (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#purpose-mission",
    "title": "overview - Purpose & Mission",
    "content": "Purpose & Mission",
    "url": "/docs/1inch/Orderbook API/overview#purpose-mission",
    "category": "1inch",
    "headings": [],
    "excerpt": "Purpose & Mission (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#key-features",
    "title": "overview - Key Features",
    "content": "Key Features",
    "url": "/docs/1inch/Orderbook API/overview#key-features",
    "category": "1inch",
    "headings": [],
    "excerpt": "Key Features (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#order-management",
    "title": "overview - Order Management",
    "content": "Order Management",
    "url": "/docs/1inch/Orderbook API/overview#order-management",
    "category": "1inch",
    "headings": [],
    "excerpt": "Order Management (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#event-tracking",
    "title": "overview - Event Tracking",
    "content": "Event Tracking",
    "url": "/docs/1inch/Orderbook API/overview#event-tracking",
    "category": "1inch",
    "headings": [],
    "excerpt": "Event Tracking (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#market-data-analytics",
    "title": "overview - Market Data & Analytics",
    "content": "Market Data & Analytics",
    "url": "/docs/1inch/Orderbook API/overview#market-data-analytics",
    "category": "1inch",
    "headings": [],
    "excerpt": "Market Data & Analytics (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#api-endpoints",
    "title": "overview - API Endpoints",
    "content": "API Endpoints",
    "url": "/docs/1inch/Orderbook API/overview#api-endpoints",
    "category": "1inch",
    "headings": [],
    "excerpt": "API Endpoints (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#core-order-operations",
    "title": "overview - Core Order Operations",
    "content": "Core Order Operations",
    "url": "/docs/1inch/Orderbook API/overview#core-order-operations",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Order Operations (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#event-analytics",
    "title": "overview - Event & Analytics",
    "content": "Event & Analytics",
    "url": "/docs/1inch/Orderbook API/overview#event-analytics",
    "category": "1inch",
    "headings": [],
    "excerpt": "Event & Analytics (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#authentication-security",
    "title": "overview - Authentication & Security",
    "content": "Authentication & Security",
    "url": "/docs/1inch/Orderbook API/overview#authentication-security",
    "category": "1inch",
    "headings": [],
    "excerpt": "Authentication & Security (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#api-key-setup",
    "title": "overview - API Key Setup",
    "content": "API Key Setup",
    "url": "/docs/1inch/Orderbook API/overview#api-key-setup",
    "category": "1inch",
    "headings": [],
    "excerpt": "API Key Setup (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#include-in-all-requests",
    "title": "overview - Include in all requests",
    "content": "Include in all requests",
    "url": "/docs/1inch/Orderbook API/overview#include-in-all-requests",
    "category": "1inch",
    "headings": [],
    "excerpt": "Include in all requests (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#security-best-practices",
    "title": "overview - Security Best Practices",
    "content": "Security Best Practices",
    "url": "/docs/1inch/Orderbook API/overview#security-best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Security Best Practices (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#rate-limits-performance",
    "title": "overview - Rate Limits & Performance",
    "content": "Rate Limits & Performance",
    "url": "/docs/1inch/Orderbook API/overview#rate-limits-performance",
    "category": "1inch",
    "headings": [],
    "excerpt": "Rate Limits & Performance (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#current-limits",
    "title": "overview - Current Limits",
    "content": "Current Limits",
    "url": "/docs/1inch/Orderbook API/overview#current-limits",
    "category": "1inch",
    "headings": [],
    "excerpt": "Current Limits (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#optimization-tips",
    "title": "overview - Optimization Tips",
    "content": "Optimization Tips",
    "url": "/docs/1inch/Orderbook API/overview#optimization-tips",
    "category": "1inch",
    "headings": [],
    "excerpt": "Optimization Tips (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#response-format-standards",
    "title": "overview - Response Format & Standards",
    "content": "Response Format & Standards",
    "url": "/docs/1inch/Orderbook API/overview#response-format-standards",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response Format & Standards (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#success-response-structure",
    "title": "overview - Success Response Structure",
    "content": "Success Response Structure",
    "url": "/docs/1inch/Orderbook API/overview#success-response-structure",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success Response Structure (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#error-response-structure",
    "title": "overview - Error Response Structure",
    "content": "Error Response Structure",
    "url": "/docs/1inch/Orderbook API/overview#error-response-structure",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Response Structure (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#http-status-codes",
    "title": "overview - HTTP Status Codes",
    "content": "HTTP Status Codes",
    "url": "/docs/1inch/Orderbook API/overview#http-status-codes",
    "category": "1inch",
    "headings": [],
    "excerpt": "HTTP Status Codes (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#network-support",
    "title": "overview - Network Support",
    "content": "Network Support",
    "url": "/docs/1inch/Orderbook API/overview#network-support",
    "category": "1inch",
    "headings": [],
    "excerpt": "Network Support (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#supported-blockchains",
    "title": "overview - Supported Blockchains",
    "content": "Supported Blockchains",
    "url": "/docs/1inch/Orderbook API/overview#supported-blockchains",
    "category": "1inch",
    "headings": [],
    "excerpt": "Supported Blockchains (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#network-configuration",
    "title": "overview - Network Configuration",
    "content": "Network Configuration",
    "url": "/docs/1inch/Orderbook API/overview#network-configuration",
    "category": "1inch",
    "headings": [],
    "excerpt": "Network Configuration (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#getting-started",
    "title": "overview - Getting Started",
    "content": "Getting Started",
    "url": "/docs/1inch/Orderbook API/overview#getting-started",
    "category": "1inch",
    "headings": [],
    "excerpt": "Getting Started (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#quick-setup",
    "title": "overview - Quick Setup",
    "content": "Quick Setup",
    "url": "/docs/1inch/Orderbook API/overview#quick-setup",
    "category": "1inch",
    "headings": [],
    "excerpt": "Quick Setup (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#install-the-sdk",
    "title": "overview - Install the SDK",
    "content": "Install the SDK",
    "url": "/docs/1inch/Orderbook API/overview#install-the-sdk",
    "category": "1inch",
    "headings": [],
    "excerpt": "Install the SDK (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#set-up-environment",
    "title": "overview - Set up environment",
    "content": "Set up environment",
    "url": "/docs/1inch/Orderbook API/overview#set-up-environment",
    "category": "1inch",
    "headings": [],
    "excerpt": "Set up environment (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#first-api-call",
    "title": "overview - First API Call",
    "content": "First API Call",
    "url": "/docs/1inch/Orderbook API/overview#first-api-call",
    "category": "1inch",
    "headings": [],
    "excerpt": "First API Call (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#additional-resources",
    "title": "overview - Additional Resources",
    "content": "Additional Resources",
    "url": "/docs/1inch/Orderbook API/overview#additional-resources",
    "category": "1inch",
    "headings": [],
    "excerpt": "Additional Resources (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#quick-links",
    "title": "overview - Quick Links",
    "content": "Quick Links",
    "url": "/docs/1inch/Orderbook API/overview#quick-links",
    "category": "1inch",
    "headings": [],
    "excerpt": "Quick Links (from overview)"
  },
  {
    "id": "1inch/Orderbook API/overview#support-community",
    "title": "overview - Support & Community",
    "content": "Support & Community",
    "url": "/docs/1inch/Orderbook API/overview#support-community",
    "category": "1inch",
    "headings": [],
    "excerpt": "Support & Community (from overview)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order",
    "title": "post-order",
    "content": "Submit Order Submit a new limit order to the 1inch Orderbook This endpoint allows you to submit a cryptographically signed limit order for discovery by takers and resolvers. %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','primaryBorderColor':'#6c757d','lineColor':'#6c757d','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','gridColor':'#dee2e6','secondaryColor':'#e9ecef','tertiaryColor':'#f8f9fa'}}}%% sequenceDiagram participant M as Maker participant API as 1inch API participant DB as Orderbook DB participant V as Validator M->>M: Create & Sign Order M->>API: POST /orderbook/v4.0/{chain} API->>V: Validate Signature V->>V: Check Order Structure V->>V: Verify Chain Parameters V-->>API: Validation Result alt Valid Order API->>DB: Store Order DB-->>API: Success API-->>M: 201 Created else Invalid Order API-->>M: 400 Bad Request end Note over DB: Order now discoverable by takers Endpoint Details POST https://api.1inch.dev/orderbook/v4.0/{chain} Component Description Method POST Base URL https://api.1inch.dev/orderbook/v4.0 Authentication Bearer token required Content-Type application/json Parameters Path Parameters Parameter Type Required Description Example chain number Yes Blockchain network ID 1 (Ethereum) 137 (Polygon) 56 (BSC) Request Body ** Important** All orders must be properly signed using EIP-712 standard before submission. Top-level Fields Field Type Required Description orderHash string Yes Unique hash identifier of the order signature string Yes EIP-712 signature from the maker data object Yes Complete order data structure Order Data Structure Field Type Required Description Example data.makerAsset string Yes Token address being sold 0xdac17f958d2ee523a2206206994597c13d831ec7 data.takerAsset string Yes Token address being bought 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 data.maker string Yes Address of the order creator 0xccede9975db9241bfc54f077b6990aafe8aee6da data.receiver string ‚ö™ No Address to receive taker tokens 0xc0dfdb9e7a392c3dbbe7c6fbe8fbc1789c9fe05e data.makingAmount string Yes Amount of maker tokens (wei) \"500000000\" data.takingAmount string Yes Amount of taker tokens (wei) \"142857142857142850\" data.salt string Yes Unique order identifier Random large number data.extension string ‚ö™ No Extension data \"0x\" (default) data.makerTraits string ‚ö™ No Order behavior configuration Hex-encoded traits Request Example Using Axios import axios from \"axios\"; async function submitOrder() { const url = \"https://api.1inch.dev/orderbook/v4.0/1\"; const config = { headers: { Authorization: \"Bearer YOUR_API_KEY\", \"Content-Type\": \"application/json\", }, }; const orderData = { orderHash: \"0xf2637aec6b34381238f8c7c0a2e2e5b1bbcfa62c8e6411c7304f3f10e30d74b4\", signature: \"0x9b2097ae806d5212ea48fd0d79aab10d330cea08ccf8a7e8aceaad24a8f4c3ae5121132fa69c5ef2fe1cbe5d484322d1c5da986516a69ed1be22341a4a8c02a51b\", data: { makerAsset: \"0xdac17f958d2ee523a2206206994597c13d831ec7\", // USDT takerAsset: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", // WETH maker: \"0xccede9975db9241bfc54f077b6990aafe8aee6da\", receiver: \"0xc0dfdb9e7a392c3dbbe7c6fbe8fbc1789c9fe05e\", makingAmount: \"500000000\", // 500 USDT (6 decimals) takingAmount: \"142857142857142850\", // ~0.14 WETH (18 decimals) salt: \"5487688115047438160270854460963812119342305034397817101594570438434225671085\", extension: \"0x\", makerTraits: \"0x4e80000000000000000000000000000000006889c95600000000000000000000\", }, }; try { const response = await axios.post(url, orderData, config); console.log(\" Order submitted successfully:\", response.data); return response.data; } catch (error) { console.error( \" Failed to submit order:\", error.response?.data || error.message, ); throw error; } } Using 1inch SDK import { Api, AxiosProviderConnector } from \"@1inch/limit-order-sdk\"; const api = new Api({ networkId: 1, authKey: process.env.API_KEY, httpConnector: new AxiosProviderConnector(), }); // Submit order using SDK (recommended) const result = await api.submitOrder(order, signature); Response Format Success Response (201 Created) { \"success\": true, \"orderHash\": \"0xf2637aec6b34381238f8c7c0a2e2e5b1bbcfa62c8e6411c7304f3f10e30d74b4\" } Field Type Description success boolean Indicates successful submission orderHash string Unique identifier for the submitted order Error Responses 400 Bad Request Common Issues: Invalid order data, malformed signature, or missing required fields { \"statusCode\": 400, \"message\": \"Invalid signature\", \"error\": \"Bad Request\" } Possible Causes: Invalid or malformed EIP-712 signature Missing required fields in request body Invalid token addresses Malformed amounts (not valid numbers) 401 Unauthorized { \"statusCode\": 401, \"message\": \"Unauthorized\", \"error\": \"Invalid API key\" } 409 Conflict Order Already Exists: This order hash has already been submitted { \"statusCode\": 409, \"message\": \"Order already exists\", \"error\": \"Conflict\" } 422 Unprocessable Entity { \"statusCode\": 422, \"message\": \"Insufficient maker balance or allowance\", \"error\": \"Unprocessable Entity\" } Common Validation Failures: Maker has insufficient token balance Maker hasn't approved tokens for the limit order contract Order has already expired Invalid order hash (doesn't match order data) Important Notes Security Requirements ** Critical Security Checks** Order must be signed using EIP-712 standard orderHash must match the actual hash of the order data Signature must be valid and from the specified maker address Financial Requirements ** Before Submitting** Maker must have sufficient balance of the maker asset Maker must have approved the limit order contract to spend tokens Order must not be expired (if expiration is set) Best Practices Use the SDK : The @1inch/limit-order-sdk handles order creation and signing automatically Validate Locally : Check order validity before submission to avoid API errors Handle Errors : Implement proper error handling for different response codes Monitor Status : Use other API endpoints to track order status after submission Related Endpoints Endpoint Purpose Link Get Order Retrieve order details GET /order/{hash} List Orders View all orders GET /all Order Events Track order execution GET /events/{hash} Next Steps Order Creation Guide - Learn how to create and sign orders SDK Integration - Use the JavaScript SDK Order Management - Track your submitted orders",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Submit Order",
        "anchor": "submit-order"
      },
      {
        "level": 2,
        "text": "Endpoint Details",
        "anchor": "endpoint-details"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 3,
        "text": "Request Body",
        "anchor": "request-body"
      },
      {
        "level": 4,
        "text": "Top-level Fields",
        "anchor": "top-level-fields"
      },
      {
        "level": 4,
        "text": "Order Data Structure",
        "anchor": "order-data-structure"
      },
      {
        "level": 2,
        "text": "Request Example",
        "anchor": "request-example"
      },
      {
        "level": 3,
        "text": "Using Axios",
        "anchor": "using-axios"
      },
      {
        "level": 3,
        "text": "Using 1inch SDK",
        "anchor": "using-1inch-sdk"
      },
      {
        "level": 2,
        "text": "Response Format",
        "anchor": "response-format"
      },
      {
        "level": 3,
        "text": "Success Response (201 Created)",
        "anchor": "success-response-201-created"
      },
      {
        "level": 2,
        "text": "Error Responses",
        "anchor": "error-responses"
      },
      {
        "level": 3,
        "text": "400 Bad Request",
        "anchor": "400-bad-request"
      },
      {
        "level": 3,
        "text": "401 Unauthorized",
        "anchor": "401-unauthorized"
      },
      {
        "level": 3,
        "text": "409 Conflict",
        "anchor": "409-conflict"
      },
      {
        "level": 3,
        "text": "422 Unprocessable Entity",
        "anchor": "422-unprocessable-entity"
      },
      {
        "level": 2,
        "text": "Important Notes",
        "anchor": "important-notes"
      },
      {
        "level": 3,
        "text": "Security Requirements",
        "anchor": "security-requirements"
      },
      {
        "level": 3,
        "text": "Financial Requirements",
        "anchor": "financial-requirements"
      },
      {
        "level": 3,
        "text": "Best Practices",
        "anchor": "best-practices"
      },
      {
        "level": 2,
        "text": "Related Endpoints",
        "anchor": "related-endpoints"
      },
      {
        "level": 2,
        "text": "Next Steps",
        "anchor": "next-steps"
      }
    ],
    "excerpt": "Submit Order Submit a new limit order to the 1inch Orderbook This endpoint allows you to submit a cryptographically signed limit order for discovery by takers and resolvers. %%{init: {'theme':'base', ..."
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#submit-order",
    "title": "post-order - Submit Order",
    "content": "Submit Order",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#submit-order",
    "category": "1inch",
    "headings": [],
    "excerpt": "Submit Order (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#endpoint-details",
    "title": "post-order - Endpoint Details",
    "content": "Endpoint Details",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#endpoint-details",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint Details (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#parameters",
    "title": "post-order - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#path-parameters",
    "title": "post-order - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#request-body",
    "title": "post-order - Request Body",
    "content": "Request Body",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#request-body",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Body (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#request-example",
    "title": "post-order - Request Example",
    "content": "Request Example",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#request-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Example (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#using-axios",
    "title": "post-order - Using Axios",
    "content": "Using Axios",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#using-axios",
    "category": "1inch",
    "headings": [],
    "excerpt": "Using Axios (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#using-1inch-sdk",
    "title": "post-order - Using 1inch SDK",
    "content": "Using 1inch SDK",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#using-1inch-sdk",
    "category": "1inch",
    "headings": [],
    "excerpt": "Using 1inch SDK (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#response-format",
    "title": "post-order - Response Format",
    "content": "Response Format",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#response-format",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response Format (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#success-response-201-created",
    "title": "post-order - Success Response (201 Created)",
    "content": "Success Response (201 Created)",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#success-response-201-created",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success Response (201 Created) (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#error-responses",
    "title": "post-order - Error Responses",
    "content": "Error Responses",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#error-responses",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Responses (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#400-bad-request",
    "title": "post-order - 400 Bad Request",
    "content": "400 Bad Request",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#400-bad-request",
    "category": "1inch",
    "headings": [],
    "excerpt": "400 Bad Request (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#401-unauthorized",
    "title": "post-order - 401 Unauthorized",
    "content": "401 Unauthorized",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#401-unauthorized",
    "category": "1inch",
    "headings": [],
    "excerpt": "401 Unauthorized (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#409-conflict",
    "title": "post-order - 409 Conflict",
    "content": "409 Conflict",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#409-conflict",
    "category": "1inch",
    "headings": [],
    "excerpt": "409 Conflict (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#422-unprocessable-entity",
    "title": "post-order - 422 Unprocessable Entity",
    "content": "422 Unprocessable Entity",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#422-unprocessable-entity",
    "category": "1inch",
    "headings": [],
    "excerpt": "422 Unprocessable Entity (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#important-notes",
    "title": "post-order - Important Notes",
    "content": "Important Notes",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#important-notes",
    "category": "1inch",
    "headings": [],
    "excerpt": "Important Notes (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#security-requirements",
    "title": "post-order - Security Requirements",
    "content": "Security Requirements",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#security-requirements",
    "category": "1inch",
    "headings": [],
    "excerpt": "Security Requirements (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#financial-requirements",
    "title": "post-order - Financial Requirements",
    "content": "Financial Requirements",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#financial-requirements",
    "category": "1inch",
    "headings": [],
    "excerpt": "Financial Requirements (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#best-practices",
    "title": "post-order - Best Practices",
    "content": "Best Practices",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Best Practices (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#related-endpoints",
    "title": "post-order - Related Endpoints",
    "content": "Related Endpoints",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#related-endpoints",
    "category": "1inch",
    "headings": [],
    "excerpt": "Related Endpoints (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/post-order#next-steps",
    "title": "post-order - Next Steps",
    "content": "Next Steps",
    "url": "/docs/1inch/Orderbook API/api-reference/post-order#next-steps",
    "category": "1inch",
    "headings": [],
    "excerpt": "Next Steps (from post-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order",
    "title": "get-fill-cancel-events-by-order",
    "content": "Get Fill/Cancel Events by Order Get fill and cancel events related to a specific order. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/events/{orderHash} Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, etc.) orderHash string Yes The order hash to get events for Request Example const axios = require(\"axios\"); async function httpCall() { const url = \"https://api.1inch.dev/orderbook/v4.0/1/events/0x55e039757dd333858f464b1da5dda6717284713352ba5f62447f8d1d63d49330\"; const config = { headers: { Authorization: \"Bearer {API_KEY}\", }, params: {}, paramsSerializer: { indexes: null, }, }; try { const response = await axios.get(url, config); console.log(response.data); } catch (error) { console.error(error); } } Response Success (200) Returns events related to the specified order hash. Schema The response is an object where the key is the order hash and the value is an array of events. Field Type Description id number Event ID network number Network/chain ID logId string Log identifier version number Protocol version action string Event action (\"fill\" or \"cancel\") orderHash string Order hash taker string Taker address remainingMakerAmount string Remaining maker amount after event transactionHash string Transaction hash blockNumber number Block number createDateTime string Event timestamp Example Response { \"0x55e039757dd333858f464b1da5dda6717284713352ba5f62447f8d1d63d49330\": [ { \"id\": 371431676, \"network\": 1, \"logId\": \"log_aaca02fe\", \"version\": 4, \"action\": \"fill\", \"orderHash\": \"0x55e039757dd333858f464b1da5dda6717284713352ba5f62447f8d1d63d49330\", \"taker\": \"0x71da20ac9f8d798a99b3c79681c8440cbfe77e07\", \"remainingMakerAmount\": \"0\", \"transactionHash\": \"0x864bfb2dec2fa32aa7a91e88d1a2befdb725630f1b53bcbd1f290190687e6148\", \"blockNumber\": 23009264, \"createDateTime\": \"2025-07-27T08:24:49.941Z\" } ] } Error Responses Bad Request (400) Input data is invalid. { \"statusCode\": 400, \"message\": \"Invalid order hash format\", \"error\": \"Bad Request\" }",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get Fill/Cancel Events by Order",
        "anchor": "get-fillcancel-events-by-order"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 2,
        "text": "Request Example",
        "anchor": "request-example"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success (200)",
        "anchor": "success-200"
      },
      {
        "level": 3,
        "text": "Schema",
        "anchor": "schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      },
      {
        "level": 2,
        "text": "Error Responses",
        "anchor": "error-responses"
      },
      {
        "level": 3,
        "text": "Bad Request (400)",
        "anchor": "bad-request-400"
      }
    ],
    "excerpt": "Get Fill/Cancel Events by Order Get fill and cancel events related to a specific order. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/events/{orderHash} Parameters Path Parameters Paramete..."
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#get-fillcancel-events-by-order",
    "title": "get-fill-cancel-events-by-order - Get Fill/Cancel Events by Order",
    "content": "Get Fill/Cancel Events by Order",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#get-fillcancel-events-by-order",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get Fill/Cancel Events by Order (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#endpoint",
    "title": "get-fill-cancel-events-by-order - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#parameters",
    "title": "get-fill-cancel-events-by-order - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#path-parameters",
    "title": "get-fill-cancel-events-by-order - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#request-example",
    "title": "get-fill-cancel-events-by-order - Request Example",
    "content": "Request Example",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#request-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Example (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#response",
    "title": "get-fill-cancel-events-by-order - Response",
    "content": "Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#success-200",
    "title": "get-fill-cancel-events-by-order - Success (200)",
    "content": "Success (200)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#success-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success (200) (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#schema",
    "title": "get-fill-cancel-events-by-order - Schema",
    "content": "Schema",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Schema (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#example-response",
    "title": "get-fill-cancel-events-by-order - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#error-responses",
    "title": "get-fill-cancel-events-by-order - Error Responses",
    "content": "Error Responses",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#error-responses",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Responses (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#bad-request-400",
    "title": "get-fill-cancel-events-by-order - Bad Request (400)",
    "content": "Bad Request (400)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events-by-order#bad-request-400",
    "category": "1inch",
    "headings": [],
    "excerpt": "Bad Request (400) (from get-fill-cancel-events-by-order)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees",
    "title": "get-estimate-fees",
    "content": "Get Estimate Fees Estimate fees for order execution. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/estimate-fees Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, etc.) Query Parameters Parameter Type Required Description orderHash string Yes The hash of the order to estimate fees for takerAddress string Yes Address of the taker who will fill the order makingAmount string No Amount to be filled (if partial fill) Request Example const axios = require(\"axios\"); async function httpCall() { const url = \"https://api.1inch.dev/orderbook/v4.0/1/estimate-fees\"; const config = { headers: { Authorization: \"Bearer {API_KEY}\", }, params: { orderHash: \"0xf2637aec6b34381238f8c7c0a2e2e5b1bbcfa62c8e6411c7304f3f10e30d74b4\", takerAddress: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\", makingAmount: \"100000000\", }, paramsSerializer: { indexes: null, }, }; try { const response = await axios.get(url, config); console.log(response.data); } catch (error) { console.error(error); } } Response Success (200) Returns estimated fees for the order execution. Schema Field Type Description resolverFee string Fee amount paid to the resolver integratorFee string Fee amount for the integrator protocolFee string Protocol fee amount totalFee string Total fees to be paid estimatedGas string Estimated gas units for the transaction Example Response { \"resolverFee\": \"50000\", \"integratorFee\": \"100000\", \"protocolFee\": \"25000\", \"totalFee\": \"175000\", \"estimatedGas\": \"150000\" } Error Responses Bad Request (400) Input data is invalid. { \"statusCode\": 400, \"message\": \"Invalid order hash format\", \"error\": \"Bad Request\" } Not Found (404) Order not found. { \"statusCode\": 404, \"message\": \"Order not found\", \"error\": \"Not Found\" }",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get Estimate Fees",
        "anchor": "get-estimate-fees"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 3,
        "text": "Query Parameters",
        "anchor": "query-parameters"
      },
      {
        "level": 2,
        "text": "Request Example",
        "anchor": "request-example"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success (200)",
        "anchor": "success-200"
      },
      {
        "level": 3,
        "text": "Schema",
        "anchor": "schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      },
      {
        "level": 2,
        "text": "Error Responses",
        "anchor": "error-responses"
      },
      {
        "level": 3,
        "text": "Bad Request (400)",
        "anchor": "bad-request-400"
      },
      {
        "level": 3,
        "text": "Not Found (404)",
        "anchor": "not-found-404"
      }
    ],
    "excerpt": "Get Estimate Fees Estimate fees for order execution. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/estimate-fees Parameters Path Parameters Parameter Type Required Description chain number..."
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#get-estimate-fees",
    "title": "get-estimate-fees - Get Estimate Fees",
    "content": "Get Estimate Fees",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#get-estimate-fees",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get Estimate Fees (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#endpoint",
    "title": "get-estimate-fees - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#parameters",
    "title": "get-estimate-fees - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#path-parameters",
    "title": "get-estimate-fees - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#query-parameters",
    "title": "get-estimate-fees - Query Parameters",
    "content": "Query Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#query-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Query Parameters (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#request-example",
    "title": "get-estimate-fees - Request Example",
    "content": "Request Example",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#request-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Example (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#response",
    "title": "get-estimate-fees - Response",
    "content": "Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#success-200",
    "title": "get-estimate-fees - Success (200)",
    "content": "Success (200)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#success-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success (200) (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#schema",
    "title": "get-estimate-fees - Schema",
    "content": "Schema",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Schema (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#example-response",
    "title": "get-estimate-fees - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#error-responses",
    "title": "get-estimate-fees - Error Responses",
    "content": "Error Responses",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#error-responses",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Responses (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#bad-request-400",
    "title": "get-estimate-fees - Bad Request (400)",
    "content": "Bad Request (400)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#bad-request-400",
    "category": "1inch",
    "headings": [],
    "excerpt": "Bad Request (400) (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-estimate-fees#not-found-404",
    "title": "get-estimate-fees - Not Found (404)",
    "content": "Not Found (404)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-estimate-fees#not-found-404",
    "category": "1inch",
    "headings": [],
    "excerpt": "Not Found (404) (from get-estimate-fees)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-order-by-hash",
    "title": "get-order-by-hash",
    "content": "Get Order by Hash Get order details by the specified order hash. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/order/{orderHash} Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, etc.) orderHash string Yes The order hash to retrieve Request Example const axios = require(\"axios\"); async function httpCall() { const url = \" https://api.1inch.dev/orderbook/v4.0/1/order/0xf2637aec6b34381238f8c7c0a2e2e5b1bbcfa62c8e6411c7304f3f10e30d74b4 \"; const config = { headers: { Authorization: \"Bearer {API_KEY}\", }, params: {}, paramsSerializer: { indexes: null, }, }; try { const response = await axios.get(url, config); console.log(response.data); } catch (error) { console.error(error); } } Response Success (200) Returns the order details. Schema Field Type Required Description id number Yes Order ID orderHash string Yes Order hash createDateTime string Yes Creation timestamp lastChangedDateTime string Yes Last update timestamp takerAsset string Yes Taker asset address makerAsset string Yes Maker asset address orderStatus number Yes Order status code makerAmount string Yes Total maker amount remainingMakerAmount string Yes Remaining maker amount orderMaker string Yes Maker address makerBalance string Yes Maker's balance makerAllowance string Yes Maker's allowance takerAmount string Yes Total taker amount data object Yes Order data structure makerRate string Yes Maker exchange rate takerRate string Yes Taker exchange rate orderInvalidReason string Yes Reason if invalid isMakerContract boolean Yes Is maker a contract Example Response { \"id\": 223802678, \"orderHash\": \"0xf2637aec6b34381238f8c7c0a2e2e5b1bbcfa62c8e6411c7304f3f10e30d74b4\", \"createDateTime\": \"2025-07-27T07:27:23.335Z\", \"lastChangedDateTime\": \"2025-07-27T07:27:23.335Z\", \"takerAsset\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", \"makerAsset\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\", \"orderStatus\": 1, \"makerAmount\": \"500000000\", \"remainingMakerAmount\": \"500000000\", \"orderMaker\": \"0xccede9975db9241bfc54f077b6990aafe8aee6da\", \"makerBalance\": \"1285018081\", \"makerAllowance\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"takerAmount\": \"142857142857142850\", \"data\": { \"salt\": \"5487688115047438160270854460963812119342305034397817101594570438434225671085\", \"maker\": \"0xccede9975db9241bfc54f077b6990aafe8aee6da\", \"receiver\": \"0xc0dfdb9e7a392c3dbbe7c6fbe8fbc1789c9fe05e\", \"extension\": \"0x...\", \"makerAsset\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\", \"takerAsset\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", \"makerTraits\": \"0x4e80000000000000000000000000000000006889c95600000000000000000000\", \"makingAmount\": \"500000000\", \"takingAmount\": \"142857142857142850\" }, \"makerRate\": \"285714285.714285700000000000\", \"takerRate\": \"0.000000003500000000\", \"orderInvalidReason\": null, \"isMakerContract\": false }",
    "url": "/docs/1inch/Orderbook API/api-reference/get-order-by-hash",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get Order by Hash",
        "anchor": "get-order-by-hash"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 2,
        "text": "Request Example",
        "anchor": "request-example"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success (200)",
        "anchor": "success-200"
      },
      {
        "level": 3,
        "text": "Schema",
        "anchor": "schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      }
    ],
    "excerpt": "Get Order by Hash Get order details by the specified order hash. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/order/{orderHash} Parameters Path Parameters Parameter Type Required Descript..."
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-order-by-hash#get-order-by-hash",
    "title": "get-order-by-hash - Get Order by Hash",
    "content": "Get Order by Hash",
    "url": "/docs/1inch/Orderbook API/api-reference/get-order-by-hash#get-order-by-hash",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get Order by Hash (from get-order-by-hash)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-order-by-hash#endpoint",
    "title": "get-order-by-hash - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Orderbook API/api-reference/get-order-by-hash#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-order-by-hash)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-order-by-hash#parameters",
    "title": "get-order-by-hash - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-order-by-hash#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-order-by-hash)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-order-by-hash#path-parameters",
    "title": "get-order-by-hash - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-order-by-hash#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-order-by-hash)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-order-by-hash#request-example",
    "title": "get-order-by-hash - Request Example",
    "content": "Request Example",
    "url": "/docs/1inch/Orderbook API/api-reference/get-order-by-hash#request-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Example (from get-order-by-hash)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-order-by-hash#response",
    "title": "get-order-by-hash - Response",
    "content": "Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-order-by-hash#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-order-by-hash)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-order-by-hash#success-200",
    "title": "get-order-by-hash - Success (200)",
    "content": "Success (200)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-order-by-hash#success-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success (200) (from get-order-by-hash)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-order-by-hash#schema",
    "title": "get-order-by-hash - Schema",
    "content": "Schema",
    "url": "/docs/1inch/Orderbook API/api-reference/get-order-by-hash#schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Schema (from get-order-by-hash)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-order-by-hash#example-response",
    "title": "get-order-by-hash - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-order-by-hash#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-order-by-hash)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address",
    "title": "get-orders-by-address",
    "content": "Get Orders by Address Get all orders created by a specific address. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/address/{address} Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, etc.) address string Yes Maker address to query orders for Query Parameters Parameter Type Required Description page number No Page number for pagination (default: 1) limit number No Number of items per page (default: 100, max: 1000) statuses string No Comma-separated order statuses (1,2,3) takerAsset string No Filter by taker asset address makerAsset string No Filter by maker asset address Request Example const axios = require(\"axios\"); async function httpCall() { const url = \" https://api.1inch.dev/orderbook/v4.0/1/address/0xccede9975db9241bfc54f077b6990aafe8aee6da \"; const config = { headers: { Authorization: \"Bearer {API_KEY}\", }, params: { page: 1, limit: 100, statuses: \"1,2,3\", takerAsset: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", makerAsset: \"0xdac17f958d2ee523a2206206994597c13d831ec7\", }, paramsSerializer: { indexes: null, }, }; try { const response = await axios.get(url, config); console.log(response.data); } catch (error) { console.error(error); } } Response Success (200) Returns an array of orders for the specified address. Schema Field Type Required Description signature string Yes Order signature orderHash string Yes Unique order identifier createDateTime string Yes Order creation timestamp remainingMakerAmount string Yes Remaining amount to be filled makerBalance string Yes Maker's token balance makerAllowance string Yes Maker's token allowance data object Yes Order data structure data.makerAsset string Yes Maker asset address data.takerAsset string Yes Taker asset address data.maker string Yes Maker address data.receiver string No Receiver address data.makingAmount string Yes Total making amount data.takingAmount string Yes Total taking amount data.salt string Yes Order salt data.extension string No Order extension data data.makerTraits string No Maker traits makerRate string Yes Maker exchange rate takerRate string Yes Taker exchange rate isMakerContract boolean Yes Whether maker is a contract orderInvalidReason string Yes Reason if order is invalid Example Response [ { \"orderHash\": \"0xf2637aec6b34381238f8c7c0a2e2e5b1bbcfa62c8e6411c7304f3f10e30d74b4\", \"createDateTime\": \"2025-07-27T07:27:23.335Z\", \"remainingMakerAmount\": \"500000000\", \"makerBalance\": \"1285018081\", \"makerAllowance\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"data\": { \"makerAsset\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\", \"takerAsset\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", \"salt\": \"5487688115047438160270854460963812119342305034397817101594570438434225671085\", \"receiver\": \"0xc0dfdb9e7a392c3dbbe7c6fbe8fbc1789c9fe05e\", \"makingAmount\": \"500000000\", \"takingAmount\": \"142857142857142850\", \"maker\": \"0xccede9975db9241bfc54f077b6990aafe8aee6da\", \"extension\": \"0x...\", \"makerTraits\": \"0x4e80000000000000000000000000000000006889c95600000000000000000000\" }, \"makerRate\": \"285714285.714285700000000000\", \"takerRate\": \"0.000000003500000000\", \"isMakerContract\": false, \"orderInvalidReason\": null, \"signature\": \"0x...\" } ]",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get Orders by Address",
        "anchor": "get-orders-by-address"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 3,
        "text": "Query Parameters",
        "anchor": "query-parameters"
      },
      {
        "level": 2,
        "text": "Request Example",
        "anchor": "request-example"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success (200)",
        "anchor": "success-200"
      },
      {
        "level": 3,
        "text": "Schema",
        "anchor": "schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      }
    ],
    "excerpt": "Get Orders by Address Get all orders created by a specific address. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/address/{address} Parameters Path Parameters Parameter Type Required Descr..."
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address#get-orders-by-address",
    "title": "get-orders-by-address - Get Orders by Address",
    "content": "Get Orders by Address",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address#get-orders-by-address",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get Orders by Address (from get-orders-by-address)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address#endpoint",
    "title": "get-orders-by-address - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-orders-by-address)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address#parameters",
    "title": "get-orders-by-address - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-orders-by-address)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address#path-parameters",
    "title": "get-orders-by-address - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-orders-by-address)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address#query-parameters",
    "title": "get-orders-by-address - Query Parameters",
    "content": "Query Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address#query-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Query Parameters (from get-orders-by-address)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address#request-example",
    "title": "get-orders-by-address - Request Example",
    "content": "Request Example",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address#request-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Example (from get-orders-by-address)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address#response",
    "title": "get-orders-by-address - Response",
    "content": "Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-orders-by-address)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address#success-200",
    "title": "get-orders-by-address - Success (200)",
    "content": "Success (200)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address#success-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success (200) (from get-orders-by-address)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address#schema",
    "title": "get-orders-by-address - Schema",
    "content": "Schema",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address#schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Schema (from get-orders-by-address)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address#example-response",
    "title": "get-orders-by-address - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-orders-by-address)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders",
    "title": "get-all-orders",
    "content": "Get All Orders Retrieve all orders with optional filtering parameters. %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','primaryBorderColor':'#6c757d','lineColor':'#6c757d','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','gridColor':'#dee2e6','secondaryColor':'#e9ecef','tertiaryColor':'#f8f9fa'}}}%% graph LR subgraph \"Query Parameters\" PAGE[page] --> FILTER[Filter Engine] LIMIT[limit] --> FILTER STATUS[statuses] --> FILTER MAKER[makerAsset] --> FILTER TAKER[takerAsset] --> FILTER end subgraph \"Processing\" FILTER --> DB[(Orderbook DB)] DB --> SORT[Sort by Creation Time] SORT --> PAGINATE[Apply Pagination] end subgraph \"Response\" PAGINATE --> ORDERS[Order List] PAGINATE --> META[Pagination Meta] ORDERS --> JSON[JSON Response] META --> JSON end Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/all Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, etc.) Query Parameters Parameter Type Required Description page number No Page number for pagination (default: 1) limit number No Number of items per page (default: 100, max: 1000) statuses string No Comma-separated order statuses (1,2,3) takerAsset string No Filter by taker asset address makerAsset string No Filter by maker asset address sortBy string No Sort field. One of: createDateTime , takerRate , makerRate , makerAmount , takerAmount Request Example const axios = require(\"axios\"); async function httpCall() { const url = \"https://api.1inch.dev/orderbook/v4.0/1/all\"; const config = { headers: { Authorization: \"Bearer {API_KEY}\", }, params: { page: 1, limit: 100, statuses: \"1,2,3\", takerAsset: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", makerAsset: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", }, paramsSerializer: { indexes: null, }, }; try { const response = await axios.get(url, config); console.log(response.data); } catch (error) { console.error(error); } } Response Success (200) Returns an array of queried limit orders. Schema Field Type Required Description signature string Yes Order signature orderHash string Yes Unique order identifier createDateTime string Yes Order creation timestamp remainingMakerAmount string Yes Remaining amount to be filled makerBalance string Yes Maker's token balance makerAllowance string Yes Maker's token allowance data object Yes Order data structure data.makerAsset string Yes Maker asset address data.takerAsset string Yes Taker asset address data.maker string Yes Maker address data.receiver string No Receiver address data.makingAmount string Yes Total making amount data.takingAmount string Yes Total taking amount data.salt string Yes Order salt data.extension string No Order extension data data.makerTraits string No Maker traits makerRate string Yes Maker exchange rate takerRate string Yes Taker exchange rate isMakerContract boolean Yes Whether maker is a contract orderInvalidReason string Yes Reason if order is invalid Example Response [ { \"orderHash\": \"0xf2637aec6b34381238f8c7c0a2e2e5b1bbcfa62c8e6411c7304f3f10e30d74b4\", \"createDateTime\": \"2025-07-27T07:27:23.335Z\", \"remainingMakerAmount\": \"500000000\", \"makerBalance\": \"1285018081\", \"makerAllowance\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"data\": { \"makerAsset\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\", \"takerAsset\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", \"salt\": \"5487688115047438160270854460963812119342305034397817101594570438434225671085\", \"receiver\": \"0xc0dfdb9e7a392c3dbbe7c6fbe8fbc1789c9fe05e\", \"makingAmount\": \"500000000\", \"takingAmount\": \"142857142857142850\", \"maker\": \"0xccede9975db9241bfc54f077b6990aafe8aee6da\", \"extension\": \"0x000000d400000072000000720000007200000072000000390000000000000000c0dfdb9e7a392c3dbbe7c6fbe8fbc1789c9fe05e00000001f43203b09498030ae3416b66dc74db31d09524fa87b1f7d18bd45f0b94f54a968fc0dfdb9e7a392c3dbbe7c6fbe8fbc1789c9fe05e00000001f43203b09498030ae3416b66dc74db31d09524fa87b1f7d18bd45f0b94f54a968fc0dfdb9e7a392c3dbbe7c6fbe8fbc1789c9fe05e00000000000000000000000000000000000000000090cbe4bdd538d6e9b379bff5fe72c3d67a521de500000001f43203b09498030ae3416b66dc74db31d09524fa87b1f7d18bd45f0b94f54a968f\", \"makerTraits\": \"0x4e80000000000000000000000000000000006889c95600000000000000000000\" }, \"makerRate\": \"285714285.714285700000000000\", \"takerRate\": \"0.000000003500000000\", \"isMakerContract\": false, \"orderInvalidReason\": null, \"signature\": \"0x9b2097ae806d5212ea48fd0d79aab10d330cea08ccf8a7e8aceaad24a8f4c3ae5121132fa69c5ef2fe1cbe5d484322d1c5da986516a69ed1be22341a4a8c02a51b\" },... ]",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get All Orders",
        "anchor": "get-all-orders"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 3,
        "text": "Query Parameters",
        "anchor": "query-parameters"
      },
      {
        "level": 2,
        "text": "Request Example",
        "anchor": "request-example"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success (200)",
        "anchor": "success-200"
      },
      {
        "level": 3,
        "text": "Schema",
        "anchor": "schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      }
    ],
    "excerpt": "Get All Orders Retrieve all orders with optional filtering parameters. %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','primaryBorderColor':'#6c757d'..."
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders#get-all-orders",
    "title": "get-all-orders - Get All Orders",
    "content": "Get All Orders",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders#get-all-orders",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get All Orders (from get-all-orders)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders#endpoint",
    "title": "get-all-orders - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-all-orders)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders#parameters",
    "title": "get-all-orders - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-all-orders)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders#path-parameters",
    "title": "get-all-orders - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-all-orders)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders#query-parameters",
    "title": "get-all-orders - Query Parameters",
    "content": "Query Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders#query-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Query Parameters (from get-all-orders)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders#request-example",
    "title": "get-all-orders - Request Example",
    "content": "Request Example",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders#request-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Example (from get-all-orders)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders#response",
    "title": "get-all-orders - Response",
    "content": "Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-all-orders)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders#success-200",
    "title": "get-all-orders - Success (200)",
    "content": "Success (200)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders#success-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success (200) (from get-all-orders)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders#schema",
    "title": "get-all-orders - Schema",
    "content": "Schema",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders#schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Schema (from get-all-orders)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-all-orders#example-response",
    "title": "get-all-orders - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-all-orders#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-all-orders)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets",
    "title": "get-markets",
    "content": "Get Markets Get unique active token pairs (markets) with limit orders. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/unique-active-pairs Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, etc.) Query Parameters Parameter Type Required Description page number No Page number for pagination (default: 1) limit number No Number of items per page (default: 100, max: 1000) Request Example const axios = require(\"axios\"); async function httpCall() { const url = \"https://api.1inch.dev/orderbook/v4.0/1/unique-active-pairs\"; const config = { headers: { Authorization: \"Bearer {API_KEY}\", }, params: { page: 1, limit: 100, }, paramsSerializer: { indexes: null, }, }; try { const response = await axios.get(url, config); console.log(response.data); } catch (error) { console.error(error); } } Response Success (200) Returns paginated list of unique active token pairs. Schema Field Type Description meta object Pagination metadata meta.totalItems number Total number of unique pairs meta.itemsPerPage number Items per page meta.totalPages number Total number of pages meta.currentPage number Current page number items array Array of token pairs items[].makerAsset string Maker asset address items[].takerAsset string Taker asset address Example Response { \"items\": [ { \"makerAsset\": \"0x000000000000d0151e748d25b766e77efe2a6c83\", \"takerAsset\": \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\" }, // ... { \"makerAsset\": \"0x027ce48b9b346728557e8d420fe936a72bf9b1c7\", \"takerAsset\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\" } ], \"meta\": { \"totalItems\": 15734, \"currentPage\": 1, \"itemsPerPage\": 100, \"totalPages\": 158 } } ## Error Responses ### Bad Request (400) Input data is invalid. ```json { \"statusCode\": 400, \"message\": \"Invalid parameters\", \"error\": \"Bad Request\" }",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get Markets",
        "anchor": "get-markets"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 3,
        "text": "Query Parameters",
        "anchor": "query-parameters"
      },
      {
        "level": 2,
        "text": "Request Example",
        "anchor": "request-example"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success (200)",
        "anchor": "success-200"
      },
      {
        "level": 3,
        "text": "Schema",
        "anchor": "schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      },
      {
        "level": 2,
        "text": "Error Responses",
        "anchor": "error-responses"
      },
      {
        "level": 3,
        "text": "Bad Request (400)",
        "anchor": "bad-request-400"
      }
    ],
    "excerpt": "Get Markets Get unique active token pairs (markets) with limit orders. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/unique-active-pairs Parameters Path Parameters Parameter Type Required ..."
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#get-markets",
    "title": "get-markets - Get Markets",
    "content": "Get Markets",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#get-markets",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get Markets (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#endpoint",
    "title": "get-markets - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#parameters",
    "title": "get-markets - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#path-parameters",
    "title": "get-markets - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#query-parameters",
    "title": "get-markets - Query Parameters",
    "content": "Query Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#query-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Query Parameters (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#request-example",
    "title": "get-markets - Request Example",
    "content": "Request Example",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#request-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Example (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#response",
    "title": "get-markets - Response",
    "content": "Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#success-200",
    "title": "get-markets - Success (200)",
    "content": "Success (200)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#success-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success (200) (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#schema",
    "title": "get-markets - Schema",
    "content": "Schema",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Schema (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#example-response",
    "title": "get-markets - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#error-responses",
    "title": "get-markets - Error Responses",
    "content": "Error Responses",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#error-responses",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Responses (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-markets#bad-request-400",
    "title": "get-markets - Bad Request (400)",
    "content": "Bad Request (400)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-markets#bad-request-400",
    "category": "1inch",
    "headings": [],
    "excerpt": "Bad Request (400) (from get-markets)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events",
    "title": "get-fill-cancel-events",
    "content": "Get Fill/Cancel Events Get all order fill and cancel events. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/events Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, etc.) Query Parameters Parameter Type Required Description limit number No Number of events to return (default: 100, max: 1000) Request Example const axios = require(\"axios\"); async function httpCall() { const url = \"https://api.1inch.dev/orderbook/v4.0/1/events\"; const config = { headers: { Authorization: \"Bearer {API_KEY}\", }, params: { limit: 100, }, paramsSerializer: { indexes: null, }, }; try { const response = await axios.get(url, config); console.log(response.data); } catch (error) { console.error(error); } } Response Success (200) Returns an array of fill and cancel events. Schema Field Type Description id number Event ID network number Network/chain ID logId string Log identifier version number Protocol version action string Event action (\"fill\" or \"cancel\") orderHash string Order hash taker string Taker address remainingMakerAmount string Remaining maker amount after event transactionHash string Transaction hash blockNumber number Block number createDateTime string Event timestamp Example Response [ { \"id\": 371438716, \"network\": 1, \"logId\": \"log_b1582237\", \"version\": 4, \"action\": \"cancel\", \"orderHash\": \"0xe335b69fd14019878bc8824f84d72514f634c79c7a6dee65ad807e13cfa9dd5d\", \"taker\": \"0x52b702259b78bac5ee7842a0f01937e670efcc7d\", \"remainingMakerAmount\": \"1800000000000000000\", \"transactionHash\": \"0x95ef780b9ba43c01675e4d5407125db0a02bbcfbb8253846d8b4b3bd4158c3fc\", \"blockNumber\": 23009437, \"createDateTime\": \"2025-07-27T08:59:26.509Z\" }, { \"id\": 371438655, \"network\": 1, \"logId\": \"log_ccfedfbb\", \"version\": 4, \"action\": \"fill\", \"orderHash\": \"0x55e039757dd333858f464b1da5dda6717284713352ba5f62447f8d1d63d49330\", \"taker\": \"0x71da20ac9f8d798a99b3c79681c8440cbfe77e07\", \"remainingMakerAmount\": \"0\", \"transactionHash\": \"0x864bfb2dec2fa32aa7a91e88d1a2befdb725630f1b53bcbd1f290190687e6148\", \"blockNumber\": 23009264, \"createDateTime\": \"2025-07-27T08:24:49.941Z\" } ]",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get Fill/Cancel Events",
        "anchor": "get-fillcancel-events"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 3,
        "text": "Query Parameters",
        "anchor": "query-parameters"
      },
      {
        "level": 2,
        "text": "Request Example",
        "anchor": "request-example"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success (200)",
        "anchor": "success-200"
      },
      {
        "level": 3,
        "text": "Schema",
        "anchor": "schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      }
    ],
    "excerpt": "Get Fill/Cancel Events Get all order fill and cancel events. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/events Parameters Path Parameters Parameter Type Required Description chain numbe..."
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events#get-fillcancel-events",
    "title": "get-fill-cancel-events - Get Fill/Cancel Events",
    "content": "Get Fill/Cancel Events",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events#get-fillcancel-events",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get Fill/Cancel Events (from get-fill-cancel-events)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events#endpoint",
    "title": "get-fill-cancel-events - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-fill-cancel-events)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events#parameters",
    "title": "get-fill-cancel-events - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-fill-cancel-events)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events#path-parameters",
    "title": "get-fill-cancel-events - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-fill-cancel-events)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events#query-parameters",
    "title": "get-fill-cancel-events - Query Parameters",
    "content": "Query Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events#query-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Query Parameters (from get-fill-cancel-events)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events#request-example",
    "title": "get-fill-cancel-events - Request Example",
    "content": "Request Example",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events#request-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Example (from get-fill-cancel-events)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events#response",
    "title": "get-fill-cancel-events - Response",
    "content": "Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-fill-cancel-events)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events#success-200",
    "title": "get-fill-cancel-events - Success (200)",
    "content": "Success (200)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events#success-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success (200) (from get-fill-cancel-events)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events#schema",
    "title": "get-fill-cancel-events - Schema",
    "content": "Schema",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events#schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Schema (from get-fill-cancel-events)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-fill-cancel-events#example-response",
    "title": "get-fill-cancel-events - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-fill-cancel-events#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-fill-cancel-events)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token",
    "title": "get-orders-by-address-and-token",
    "content": "Check Active Orders with Permit Check if there are active orders with permit for a specified wallet address and token. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/has-active-orders-with-permit/{walletAddress}/{token} Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, etc.) walletAddress string Yes Wallet address to check token string Yes Token address to check for permits Request Example const axios = require(\"axios\"); async function httpCall() { const url = \"https://api.1inch.dev/orderbook/v4.0/1/has-active-orders-with-permit/0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045/0x1234567890ABCDEF1234567890ABCDEF12345678\"; const config = { headers: { Authorization: \"Bearer {API_KEY}\", }, params: {}, paramsSerializer: { indexes: null, }, }; try { const response = await axios.get(url, config); console.log(response.data); } catch (error) { console.error(error); } } Response Success (200) Returns whether there are active orders with permit for the specified wallet and token. Schema Field Type Description result boolean True if active orders with permit exist, false otherwise Example Response { \"result\": true } Error Responses Bad Request (400) Input data is invalid. { \"statusCode\": 400, \"message\": \"Invalid address format\", \"error\": \"Bad Request\" } Notes This endpoint is useful for checking if a user has active orders that utilize the permit functionality for a specific token. This can help in managing token permissions and understanding the user's active trading positions.",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Check Active Orders with Permit",
        "anchor": "check-active-orders-with-permit"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 2,
        "text": "Request Example",
        "anchor": "request-example"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success (200)",
        "anchor": "success-200"
      },
      {
        "level": 3,
        "text": "Schema",
        "anchor": "schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      },
      {
        "level": 2,
        "text": "Error Responses",
        "anchor": "error-responses"
      },
      {
        "level": 3,
        "text": "Bad Request (400)",
        "anchor": "bad-request-400"
      },
      {
        "level": 2,
        "text": "Notes",
        "anchor": "notes"
      }
    ],
    "excerpt": "Check Active Orders with Permit Check if there are active orders with permit for a specified wallet address and token. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/has-active-orders-with-..."
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#check-active-orders-with-permit",
    "title": "get-orders-by-address-and-token - Check Active Orders with Permit",
    "content": "Check Active Orders with Permit",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#check-active-orders-with-permit",
    "category": "1inch",
    "headings": [],
    "excerpt": "Check Active Orders with Permit (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#endpoint",
    "title": "get-orders-by-address-and-token - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#parameters",
    "title": "get-orders-by-address-and-token - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#path-parameters",
    "title": "get-orders-by-address-and-token - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#request-example",
    "title": "get-orders-by-address-and-token - Request Example",
    "content": "Request Example",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#request-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Example (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#response",
    "title": "get-orders-by-address-and-token - Response",
    "content": "Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#success-200",
    "title": "get-orders-by-address-and-token - Success (200)",
    "content": "Success (200)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#success-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success (200) (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#schema",
    "title": "get-orders-by-address-and-token - Schema",
    "content": "Schema",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Schema (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#example-response",
    "title": "get-orders-by-address-and-token - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#error-responses",
    "title": "get-orders-by-address-and-token - Error Responses",
    "content": "Error Responses",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#error-responses",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Responses (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#bad-request-400",
    "title": "get-orders-by-address-and-token - Bad Request (400)",
    "content": "Bad Request (400)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#bad-request-400",
    "category": "1inch",
    "headings": [],
    "excerpt": "Bad Request (400) (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-by-address-and-token#notes",
    "title": "get-orders-by-address-and-token - Notes",
    "content": "Notes",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-by-address-and-token#notes",
    "category": "1inch",
    "headings": [],
    "excerpt": "Notes (from get-orders-by-address-and-token)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered",
    "title": "get-orders-count-filtered",
    "content": "Get Orders Count Get the count of orders matching specified filters. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/count Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, etc.) Query Parameters Parameter Type Required Description statuses string No Comma-separated order statuses (1,2,3) takerAsset string No Filter by taker asset address makerAsset string No Filter by maker asset address Request Example const axios = require(\"axios\"); async function httpCall() { const url = \"https://api.1inch.dev/orderbook/v4.0/1/count\"; const config = { headers: { Authorization: \"Bearer {API_KEY}\", }, params: { statuses: \"1,2,3\", takerAsset: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", makerAsset: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", }, paramsSerializer: { indexes: null, }, }; try { const response = await axios.get(url, config); console.log(response.data); } catch (error) { console.error(error); } } Response Success (200) Returns the count of orders matching the filters. Schema Field Type Description count number Number of orders matching the criteria Example Response { \"count\": 4347 }",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get Orders Count",
        "anchor": "get-orders-count"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 3,
        "text": "Query Parameters",
        "anchor": "query-parameters"
      },
      {
        "level": 2,
        "text": "Request Example",
        "anchor": "request-example"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success (200)",
        "anchor": "success-200"
      },
      {
        "level": 3,
        "text": "Schema",
        "anchor": "schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      }
    ],
    "excerpt": "Get Orders Count Get the count of orders matching specified filters. Endpoint GET https://api.1inch.dev/orderbook/v4.0/{chain}/count Parameters Path Parameters Parameter Type Required Description chai..."
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered#get-orders-count",
    "title": "get-orders-count-filtered - Get Orders Count",
    "content": "Get Orders Count",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered#get-orders-count",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get Orders Count (from get-orders-count-filtered)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered#endpoint",
    "title": "get-orders-count-filtered - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-orders-count-filtered)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered#parameters",
    "title": "get-orders-count-filtered - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-orders-count-filtered)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered#path-parameters",
    "title": "get-orders-count-filtered - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-orders-count-filtered)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered#query-parameters",
    "title": "get-orders-count-filtered - Query Parameters",
    "content": "Query Parameters",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered#query-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Query Parameters (from get-orders-count-filtered)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered#request-example",
    "title": "get-orders-count-filtered - Request Example",
    "content": "Request Example",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered#request-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Example (from get-orders-count-filtered)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered#response",
    "title": "get-orders-count-filtered - Response",
    "content": "Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-orders-count-filtered)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered#success-200",
    "title": "get-orders-count-filtered - Success (200)",
    "content": "Success (200)",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered#success-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success (200) (from get-orders-count-filtered)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered#schema",
    "title": "get-orders-count-filtered - Schema",
    "content": "Schema",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered#schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Schema (from get-orders-count-filtered)"
  },
  {
    "id": "1inch/Orderbook API/api-reference/get-orders-count-filtered#example-response",
    "title": "get-orders-count-filtered - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Orderbook API/api-reference/get-orders-count-filtered#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-orders-count-filtered)"
  },
  {
    "id": "1inch/Orderbook API/quickstart",
    "title": "quickstart",
    "content": "Quickstart Guide Get started with 1inch Limit Orders in minutes! This comprehensive guide walks you through creating, signing, and submitting your first Limit Order v4. %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','primaryBorderColor':'#6c757d','lineColor':'#6c757d','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','gridColor':'#dee2e6','secondaryColor':'#e9ecef','tertiaryColor':'#f8f9fa'}}}%% flowchart TD START[Start] --> SETUP[Setup Environment] SETUP --> APPROVE[Approve Tokens] APPROVE --> CREATE[Create Order] CREATE --> SIGN[Sign Order] SIGN --> SUBMIT[Submit to API] SUBMIT --> WAIT[Wait for Taker] WAIT --> EXECUTE[Order Executed] subgraph \"Development Steps\" SETUP --> INSTALL[Install Dependencies] SETUP --> CONFIG[Configure Wallet] SETUP --> CONNECT[Connect to Network] end subgraph \"Order Lifecycle\" SUBMIT --> PENDING[Order Pending] PENDING --> PARTIAL[Partial Fill] PENDING --> COMPLETE[Complete Fill] PENDING --> CANCEL[Cancel Order] end What You'll Learn This guide demonstrates how to create and submit a Limit Order v4 using the @1inch/limit-order-sdk in a JavaScript environment. You'll learn how to: Configure your development environment Approve token transfers securely Construct and sign a limit order Submit the signed order to the 1inch Orderbook API Step 1: Install Dependencies Prerequisites: Ensure you have Node.js installed (v18 or higher recommended) Initialize a new project and install the required libraries: # Initialize a new project bun init -y # Install required dependencies bun add @1inch/limit-order-sdk ethers Dependencies Overview Package Purpose Version @1inch/limit-order-sdk Core SDK for creating, signing, and submitting limit orders Latest ethers Lightweight library for Ethereum blockchain interaction v6+ Step 2: Set Up Wallet and Network Configuration Create a new file (e.g., limitOrder.js ) and set up the basic configuration: import { Wallet, JsonRpcProvider, Contract } from \"ethers\"; import { LimitOrder, MakerTraits, Address, Api, getLimitOrderV4Domain, } from \"@1inch/limit-order-sdk\"; // Standard ERC-20 ABI fragment (used for token approval) const erc20AbiFragment = [ \"function approve(address spender, uint256 amount) external returns (bool)\", \"function allowance(address owner, address spender) external view returns (uint256)\", ]; Secure Wallet Setup ** Security Warning** Never hardcode private keys in your code. Always use environment variables or secure key management systems. // Use environment variables to manage private keys securely const privateKey = process.env.PRIVATE_KEY; const chainId = 1; // Ethereum mainnet const provider = new JsonRpcProvider(\"https://cloudflare-eth.com/\"); const wallet = new Wallet(privateKey, provider); Token Configuration Configure the trading pair and amounts for your limit order: // Token addresses (Ethereum mainnet) const makerAsset = \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"; // USDC const takerAsset = \"0x111111111117dc0aa78b770fa6a738034120c302\"; // 1INCH // Trading amounts (use BigInt for precision) const makingAmount = 1_000_000n; // 1 USDC (6 decimals) const takingAmount = 1_000_000_000_000_000_000n; // 1 1INCH (18 decimals) // Order expiration (2 minutes from now) const expiresIn = 120n; // seconds const expiration = BigInt(Math.floor(Date.now() / 1000)) + expiresIn; Token Symbol Address Decimals Maker Asset USDC 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 6 Taker Asset 1INCH 0x111111111117dc0aa78b770fa6a738034120c302 18 Step 3: Check Allowance and Approve Token ** Important Note** The 1inch Limit Order smart contract must be authorized to transfer your tokens. This requires an ERC-20 approval transaction. Approval Process import { MaxUint256 } from \"ethers\"; // Get the limit order contract address const domain = getLimitOrderV4Domain(chainId); const limitOrderContractAddress = domain.verifyingContract; // Create contract instance for the maker asset const makerAssetContract = new Contract(makerAsset, erc20AbiFragment, wallet); // Check current allowance const currentAllowance = await makerAssetContract.allowance( wallet.address, limitOrderContractAddress, ); // Approve if insufficient allowance if (currentAllowance < makingAmount) { console.log(\"üîÑ Approving token transfer...\"); const approveTx = await makerAssetContract.approve( limitOrderContractAddress, makingAmount, // or MaxUint256 for unlimited approval ); await approveTx.wait(); console.log(\" Token approval confirmed!\"); } Pro Tips Tip: One-time Approval To avoid repeated approvals, you can approve the maximum amount: await makerAssetContract.approve(limitOrderContractAddress, MaxUint256); Important: Token-Specific Approvals ERC-20 allowances are token- and spender-specific. If you change the token or contract, a new approval is required. Step 4: Define Order Parameters and Traits The MakerTraits define how your order behaves. Configure rules for partial fills, expiration, and reusability: Available Trait Methods Method Description Use Case .withExpiration(timestamp) Sets order expiration time Time-sensitive trading .allowPartialFills() Enables partial order execution Large orders, better liquidity .allowMultipleFills() Allows multiple executions Market making strategies .withNonce(value) Sets unique order identifier Order management Implementation // Configure order traits const makerTraits = new MakerTraits() .withExpiration(expiration) .allowPartialFills() .allowMultipleFills(); // Create the limit order const order = new LimitOrder({ makerAsset: new Address(makerAsset), takerAsset: new Address(takerAsset), makingAmount, takingAmount, maker: new Address(wallet.address), receiver: new Address(wallet.address), salt: BigInt(Math.floor(Math.random() * 1e8)), // Unique identifier makerTraits, }); Step 5: Sign the Order (EIP-712) üîê Security Feature EIP-712 signing ensures the order can only be executed exactly as specified by the maker. // Generate typed data for signing const typedData = order.getTypedData(domain); // Prepare domain for ethers.js const domainForSignature = { ...typedData.domain, chainId: chainId, }; // Sign the order console.log(\" Signing order...\"); const signature = await wallet.signTypedData( domainForSignature, { Order: typedData.types.Order }, typedData.message, ); console.log(\" Order signed successfully!\"); What's Being Signed The signature includes: Order details (amounts, tokens, expiration) Maker address and traits Unique salt for order identification Domain-specific information for security Step 6: Submit the Signed Order Submit your order to the 1inch Orderbook to make it discoverable by resolvers: API Setup ** Get Your API Key** Register at the 1inch Developer Portal to obtain your API key. import { AxiosProviderConnector } from \"@1inch/limit-order-sdk\"; const api = new Api({ networkId: chainId, // 1 = Ethereum Mainnet authKey: process.env.API_KEY, // Load API key securely httpConnector: new AxiosProviderConnector(), }); Order Submission try { console.log(\"üì° Submitting order to 1inch Orderbook...\"); const result = await api.submitOrder(order, signature); console.log(\" Order submitted successfully!\"); console.log(\"Order Hash:\", result.orderHash); console.log(\"Status:\", result.success ? \"Active\" : \"Failed\"); } catch (error) { console.error(\" Failed to submit order:\", error.message); // Handle common errors if (error.message.includes(\"insufficient allowance\")) { console.log(\" Tip: Check your token approval\"); } else if (error.message.includes(\"invalid signature\")) { console.log(\" Tip: Verify your order signing process\"); } } Frontend Considerations CORS Warning When calling the API directly from a browser, you may encounter CORS errors. For frontend applications, use a backend proxy server to forward requests securely. Network Support The 1inch Limit Order Protocol supports multiple networks: Network Chain ID Status Ethereum 1 Active Polygon 137 Active BSC 56 Active Arbitrum 42161 Active Optimism 10 Active Avalanche 43114 Active Conclusion Congratulations! You've successfully: Set up the development environment Configured wallet and tokens Approved token transfers Created and signed a limit order Submitted the order to the 1inch Orderbook Your order is now live and discoverable by resolvers across the network! Next Steps API Reference - Explore all available endpoints Advanced Integration - Learn about contract interactions SDK Documentation - Dive deeper into the SDK features Need Help? Documentation Portal Developer Community üêõ Report Issues ** Pro Tip** For production applications, implement proper error handling, logging, and monitoring to ensure reliable order management.",
    "url": "/docs/1inch/Orderbook API/quickstart",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Quickstart Guide",
        "anchor": "quickstart-guide"
      },
      {
        "level": 2,
        "text": "What You'll Learn",
        "anchor": "what-youll-learn"
      },
      {
        "level": 2,
        "text": "Step 1: Install Dependencies",
        "anchor": "step-1-install-dependencies"
      },
      {
        "level": 1,
        "text": "Initialize a new project",
        "anchor": "initialize-a-new-project"
      },
      {
        "level": 1,
        "text": "Install required dependencies",
        "anchor": "install-required-dependencies"
      },
      {
        "level": 3,
        "text": "Dependencies Overview",
        "anchor": "dependencies-overview"
      },
      {
        "level": 2,
        "text": "Step 2: Set Up Wallet and Network Configuration",
        "anchor": "step-2-set-up-wallet-and-network-configuration"
      },
      {
        "level": 3,
        "text": "Secure Wallet Setup",
        "anchor": "secure-wallet-setup"
      },
      {
        "level": 3,
        "text": "Token Configuration",
        "anchor": "token-configuration"
      },
      {
        "level": 2,
        "text": "Step 3: Check Allowance and Approve Token",
        "anchor": "step-3-check-allowance-and-approve-token"
      },
      {
        "level": 3,
        "text": "Approval Process",
        "anchor": "approval-process"
      },
      {
        "level": 3,
        "text": "Pro Tips",
        "anchor": "pro-tips"
      },
      {
        "level": 2,
        "text": "Step 4: Define Order Parameters and Traits",
        "anchor": "step-4-define-order-parameters-and-traits"
      },
      {
        "level": 3,
        "text": "Available Trait Methods",
        "anchor": "available-trait-methods"
      },
      {
        "level": 3,
        "text": "Implementation",
        "anchor": "implementation"
      },
      {
        "level": 2,
        "text": "Step 5: Sign the Order (EIP-712)",
        "anchor": "step-5-sign-the-order-eip-712"
      },
      {
        "level": 3,
        "text": "What's Being Signed",
        "anchor": "whats-being-signed"
      },
      {
        "level": 2,
        "text": "Step 6: Submit the Signed Order",
        "anchor": "step-6-submit-the-signed-order"
      },
      {
        "level": 3,
        "text": "API Setup",
        "anchor": "api-setup"
      },
      {
        "level": 3,
        "text": "Order Submission",
        "anchor": "order-submission"
      },
      {
        "level": 3,
        "text": "Frontend Considerations",
        "anchor": "frontend-considerations"
      },
      {
        "level": 2,
        "text": "Network Support",
        "anchor": "network-support"
      },
      {
        "level": 2,
        "text": "Conclusion",
        "anchor": "conclusion"
      },
      {
        "level": 3,
        "text": "Next Steps",
        "anchor": "next-steps"
      },
      {
        "level": 3,
        "text": "Need Help?",
        "anchor": "need-help"
      }
    ],
    "excerpt": "Quickstart Guide Get started with 1inch Limit Orders in minutes! This comprehensive guide walks you through creating, signing, and submitting your first Limit Order v4. %%{init: {'theme':'base', 'them..."
  },
  {
    "id": "1inch/Orderbook API/quickstart#quickstart-guide",
    "title": "quickstart - Quickstart Guide",
    "content": "Quickstart Guide",
    "url": "/docs/1inch/Orderbook API/quickstart#quickstart-guide",
    "category": "1inch",
    "headings": [],
    "excerpt": "Quickstart Guide (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#what-youll-learn",
    "title": "quickstart - What You'll Learn",
    "content": "What You'll Learn",
    "url": "/docs/1inch/Orderbook API/quickstart#what-youll-learn",
    "category": "1inch",
    "headings": [],
    "excerpt": "What You'll Learn (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#step-1-install-dependencies",
    "title": "quickstart - Step 1: Install Dependencies",
    "content": "Step 1: Install Dependencies",
    "url": "/docs/1inch/Orderbook API/quickstart#step-1-install-dependencies",
    "category": "1inch",
    "headings": [],
    "excerpt": "Step 1: Install Dependencies (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#initialize-a-new-project",
    "title": "quickstart - Initialize a new project",
    "content": "Initialize a new project",
    "url": "/docs/1inch/Orderbook API/quickstart#initialize-a-new-project",
    "category": "1inch",
    "headings": [],
    "excerpt": "Initialize a new project (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#install-required-dependencies",
    "title": "quickstart - Install required dependencies",
    "content": "Install required dependencies",
    "url": "/docs/1inch/Orderbook API/quickstart#install-required-dependencies",
    "category": "1inch",
    "headings": [],
    "excerpt": "Install required dependencies (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#dependencies-overview",
    "title": "quickstart - Dependencies Overview",
    "content": "Dependencies Overview",
    "url": "/docs/1inch/Orderbook API/quickstart#dependencies-overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "Dependencies Overview (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#step-2-set-up-wallet-and-network-configuration",
    "title": "quickstart - Step 2: Set Up Wallet and Network Configuration",
    "content": "Step 2: Set Up Wallet and Network Configuration",
    "url": "/docs/1inch/Orderbook API/quickstart#step-2-set-up-wallet-and-network-configuration",
    "category": "1inch",
    "headings": [],
    "excerpt": "Step 2: Set Up Wallet and Network Configuration (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#secure-wallet-setup",
    "title": "quickstart - Secure Wallet Setup",
    "content": "Secure Wallet Setup",
    "url": "/docs/1inch/Orderbook API/quickstart#secure-wallet-setup",
    "category": "1inch",
    "headings": [],
    "excerpt": "Secure Wallet Setup (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#token-configuration",
    "title": "quickstart - Token Configuration",
    "content": "Token Configuration",
    "url": "/docs/1inch/Orderbook API/quickstart#token-configuration",
    "category": "1inch",
    "headings": [],
    "excerpt": "Token Configuration (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#step-3-check-allowance-and-approve-token",
    "title": "quickstart - Step 3: Check Allowance and Approve Token",
    "content": "Step 3: Check Allowance and Approve Token",
    "url": "/docs/1inch/Orderbook API/quickstart#step-3-check-allowance-and-approve-token",
    "category": "1inch",
    "headings": [],
    "excerpt": "Step 3: Check Allowance and Approve Token (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#approval-process",
    "title": "quickstart - Approval Process",
    "content": "Approval Process",
    "url": "/docs/1inch/Orderbook API/quickstart#approval-process",
    "category": "1inch",
    "headings": [],
    "excerpt": "Approval Process (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#pro-tips",
    "title": "quickstart - Pro Tips",
    "content": "Pro Tips",
    "url": "/docs/1inch/Orderbook API/quickstart#pro-tips",
    "category": "1inch",
    "headings": [],
    "excerpt": "Pro Tips (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#step-4-define-order-parameters-and-traits",
    "title": "quickstart - Step 4: Define Order Parameters and Traits",
    "content": "Step 4: Define Order Parameters and Traits",
    "url": "/docs/1inch/Orderbook API/quickstart#step-4-define-order-parameters-and-traits",
    "category": "1inch",
    "headings": [],
    "excerpt": "Step 4: Define Order Parameters and Traits (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#available-trait-methods",
    "title": "quickstart - Available Trait Methods",
    "content": "Available Trait Methods",
    "url": "/docs/1inch/Orderbook API/quickstart#available-trait-methods",
    "category": "1inch",
    "headings": [],
    "excerpt": "Available Trait Methods (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#implementation",
    "title": "quickstart - Implementation",
    "content": "Implementation",
    "url": "/docs/1inch/Orderbook API/quickstart#implementation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Implementation (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#step-5-sign-the-order-eip-712",
    "title": "quickstart - Step 5: Sign the Order (EIP-712)",
    "content": "Step 5: Sign the Order (EIP-712)",
    "url": "/docs/1inch/Orderbook API/quickstart#step-5-sign-the-order-eip-712",
    "category": "1inch",
    "headings": [],
    "excerpt": "Step 5: Sign the Order (EIP-712) (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#whats-being-signed",
    "title": "quickstart - What's Being Signed",
    "content": "What's Being Signed",
    "url": "/docs/1inch/Orderbook API/quickstart#whats-being-signed",
    "category": "1inch",
    "headings": [],
    "excerpt": "What's Being Signed (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#step-6-submit-the-signed-order",
    "title": "quickstart - Step 6: Submit the Signed Order",
    "content": "Step 6: Submit the Signed Order",
    "url": "/docs/1inch/Orderbook API/quickstart#step-6-submit-the-signed-order",
    "category": "1inch",
    "headings": [],
    "excerpt": "Step 6: Submit the Signed Order (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#api-setup",
    "title": "quickstart - API Setup",
    "content": "API Setup",
    "url": "/docs/1inch/Orderbook API/quickstart#api-setup",
    "category": "1inch",
    "headings": [],
    "excerpt": "API Setup (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#order-submission",
    "title": "quickstart - Order Submission",
    "content": "Order Submission",
    "url": "/docs/1inch/Orderbook API/quickstart#order-submission",
    "category": "1inch",
    "headings": [],
    "excerpt": "Order Submission (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#frontend-considerations",
    "title": "quickstart - Frontend Considerations",
    "content": "Frontend Considerations",
    "url": "/docs/1inch/Orderbook API/quickstart#frontend-considerations",
    "category": "1inch",
    "headings": [],
    "excerpt": "Frontend Considerations (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#network-support",
    "title": "quickstart - Network Support",
    "content": "Network Support",
    "url": "/docs/1inch/Orderbook API/quickstart#network-support",
    "category": "1inch",
    "headings": [],
    "excerpt": "Network Support (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#conclusion",
    "title": "quickstart - Conclusion",
    "content": "Conclusion",
    "url": "/docs/1inch/Orderbook API/quickstart#conclusion",
    "category": "1inch",
    "headings": [],
    "excerpt": "Conclusion (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#next-steps",
    "title": "quickstart - Next Steps",
    "content": "Next Steps",
    "url": "/docs/1inch/Orderbook API/quickstart#next-steps",
    "category": "1inch",
    "headings": [],
    "excerpt": "Next Steps (from quickstart)"
  },
  {
    "id": "1inch/Orderbook API/quickstart#need-help",
    "title": "quickstart - Need Help?",
    "content": "Need Help?",
    "url": "/docs/1inch/Orderbook API/quickstart#need-help",
    "category": "1inch",
    "headings": [],
    "excerpt": "Need Help? (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/overview",
    "title": "overview",
    "content": "1inch Spot Price API Overview The 1inch Spot Price API provides real-time price data for whitelisted tokens across multiple blockchain networks. This service aggregates pricing information from various decentralized exchanges to deliver accurate and up-to-date token valuations. Key Features Multi-chain Support : Access prices across Ethereum, Polygon, BSC, Arbitrum, and other supported networks Real-time Data : Get current market prices with minimal latency Batch Requests : Query multiple tokens in a single API call for optimal performance Currency Flexibility : Retrieve prices in different base currencies (USD, ETH, etc.) High Availability : Robust infrastructure with enterprise-grade reliability Architecture %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','primaryBorderColor':'#6c757d','lineColor':'#6c757d','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','gridColor':'#dee2e6','secondaryColor':'#e9ecef','tertiaryColor':'#f8f9fa'}}}%% graph TD subgraph \"Price Sources\" DEX1[Uniswap V2/V3] DEX2[SushiSwap] DEX3[Curve] DEX4[Balancer] DEX5[Other DEXs] end subgraph \"1inch Price API\" AGG[Price Aggregator] CACHE[Price Cache] API[REST API] end subgraph \"Client Applications\" CLIENT1[Trading Bots] CLIENT2[DeFi Protocols] CLIENT3[Portfolio Trackers] CLIENT4[Analytics Platforms] end DEX1 --> AGG DEX2 --> AGG DEX3 --> AGG DEX4 --> AGG DEX5 --> AGG AGG --> CACHE CACHE --> API API --> CLIENT1 API --> CLIENT2 API --> CLIENT3 API --> CLIENT4 Supported Networks Network Chain ID Base Currency Status Ethereum 1 ETH Active Polygon 137 MATIC Active BSC 56 BNB Active Arbitrum 42161 ETH Active Optimism 10 ETH Active Avalanche 43114 AVAX Active API Endpoints Core Endpoints Endpoint Method Description /price/v1.1/{chain} GET Get prices for all whitelisted tokens /price/v1.1/{chain} POST Get prices for specific tokens /price/v1.1/{chain}/{address} GET Get price for a single token /price/v1.1/{chain}/currencies GET Get available base currencies Authentication All requests require authentication using a Bearer token: Authorization: Bearer YOUR_API_KEY You can obtain an API key from the 1inch Developer Portal . Rate Limits Free Tier : 100 requests per minute Pro Tier : 1,000 requests per minute Enterprise : Custom limits available Price Format Token prices are returned as strings representing the price in the requested currency: { \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\": \"3500.123456789\", \"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\": \"1.987654321\" } Important Notes: Prices are denominated in the base currency (USD by default) All numeric values are returned as strings to preserve precision Token addresses are lowercase and include the 0x prefix Error Handling The API uses standard HTTP status codes and returns detailed error information: { \"error\": \"Invalid token address\", \"description\": \"The provided token address is not a valid Ethereum address\", \"statusCode\": 400 } Common error codes: 400 - Bad Request (invalid parameters) 401 - Unauthorized (invalid API key) 404 - Not Found (token not whitelisted) 429 - Too Many Requests (rate limit exceeded) 500 - Internal Server Error Best Practices Efficient Usage Batch Requests : Use POST endpoints to query multiple tokens simultaneously Caching : Implement client-side caching to reduce API calls Error Handling : Always implement proper error handling and retry logic Rate Limiting : Respect rate limits and implement exponential backoff Example Implementation class PriceService { constructor(apiKey, chainId = 1) { this.apiKey = apiKey; this.chainId = chainId; this.baseUrl = 'https://api.1inch.dev/price/v1.1'; this.cache = new Map(); } async getTokenPrices(tokenAddresses, currency = 'USD') { const cacheKey = `${tokenAddresses.join(',')}-${currency}`; const cached = this.cache.get(cacheKey); if (cached && Date.now() - cached.timestamp < 30000) { return cached.data; } const response = await fetch(`${this.baseUrl}/${this.chainId}`, { method: 'POST', headers: { 'Authorization': `Bearer ${this.apiKey}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ tokens: tokenAddresses, currency: currency }) }); if (!response.ok) { throw new Error(`Price API error: ${response.status}`); } const data = await response.json(); this.cache.set(cacheKey, { data, timestamp: Date.now() }); return data; } } Use Cases Portfolio Valuation Track the total value of token holdings across multiple wallets and networks. Trading Algorithms Power automated trading strategies with real-time price feeds. DeFi Protocol Integration Enable price-aware smart contract functionality for lending, borrowing, and yield farming. Analytics and Reporting Build comprehensive market analysis tools and dashboards. Getting Started Obtain API Key : Sign up at the 1inch Developer Portal Choose Your Network : Select the blockchain network for your use case Review Documentation : Read the Quickstart Guide for implementation examples Test Integration : Start with the sandbox environment before going live Related Documentation Quickstart Guide - Get up and running quickly API Reference - Detailed endpoint documentation 1inch Orderbook API - Access to limit order data 1edge Integration - Integration with 1edge platform Support For technical support and questions: Documentation: 1inch Docs Developer Portal: portal.1inch.dev Community: Discord",
    "url": "/docs/1inch/Spot Price API/overview",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "1inch Spot Price API Overview",
        "anchor": "1inch-spot-price-api-overview"
      },
      {
        "level": 2,
        "text": "Key Features",
        "anchor": "key-features"
      },
      {
        "level": 2,
        "text": "Architecture",
        "anchor": "architecture"
      },
      {
        "level": 2,
        "text": "Supported Networks",
        "anchor": "supported-networks"
      },
      {
        "level": 2,
        "text": "API Endpoints",
        "anchor": "api-endpoints"
      },
      {
        "level": 3,
        "text": "Core Endpoints",
        "anchor": "core-endpoints"
      },
      {
        "level": 2,
        "text": "Authentication",
        "anchor": "authentication"
      },
      {
        "level": 2,
        "text": "Rate Limits",
        "anchor": "rate-limits"
      },
      {
        "level": 2,
        "text": "Price Format",
        "anchor": "price-format"
      },
      {
        "level": 2,
        "text": "Error Handling",
        "anchor": "error-handling"
      },
      {
        "level": 2,
        "text": "Best Practices",
        "anchor": "best-practices"
      },
      {
        "level": 3,
        "text": "Efficient Usage",
        "anchor": "efficient-usage"
      },
      {
        "level": 3,
        "text": "Example Implementation",
        "anchor": "example-implementation"
      },
      {
        "level": 2,
        "text": "Use Cases",
        "anchor": "use-cases"
      },
      {
        "level": 3,
        "text": "Portfolio Valuation",
        "anchor": "portfolio-valuation"
      },
      {
        "level": 3,
        "text": "Trading Algorithms",
        "anchor": "trading-algorithms"
      },
      {
        "level": 3,
        "text": "DeFi Protocol Integration",
        "anchor": "defi-protocol-integration"
      },
      {
        "level": 3,
        "text": "Analytics and Reporting",
        "anchor": "analytics-and-reporting"
      },
      {
        "level": 2,
        "text": "Getting Started",
        "anchor": "getting-started"
      },
      {
        "level": 2,
        "text": "Related Documentation",
        "anchor": "related-documentation"
      },
      {
        "level": 2,
        "text": "Support",
        "anchor": "support"
      }
    ],
    "excerpt": "1inch Spot Price API Overview The 1inch Spot Price API provides real-time price data for whitelisted tokens across multiple blockchain networks. This service aggregates pricing information from variou..."
  },
  {
    "id": "1inch/Spot Price API/overview#1inch-spot-price-api-overview",
    "title": "overview - 1inch Spot Price API Overview",
    "content": "1inch Spot Price API Overview",
    "url": "/docs/1inch/Spot Price API/overview#1inch-spot-price-api-overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "1inch Spot Price API Overview (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#key-features",
    "title": "overview - Key Features",
    "content": "Key Features",
    "url": "/docs/1inch/Spot Price API/overview#key-features",
    "category": "1inch",
    "headings": [],
    "excerpt": "Key Features (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#architecture",
    "title": "overview - Architecture",
    "content": "Architecture",
    "url": "/docs/1inch/Spot Price API/overview#architecture",
    "category": "1inch",
    "headings": [],
    "excerpt": "Architecture (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#supported-networks",
    "title": "overview - Supported Networks",
    "content": "Supported Networks",
    "url": "/docs/1inch/Spot Price API/overview#supported-networks",
    "category": "1inch",
    "headings": [],
    "excerpt": "Supported Networks (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#api-endpoints",
    "title": "overview - API Endpoints",
    "content": "API Endpoints",
    "url": "/docs/1inch/Spot Price API/overview#api-endpoints",
    "category": "1inch",
    "headings": [],
    "excerpt": "API Endpoints (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#core-endpoints",
    "title": "overview - Core Endpoints",
    "content": "Core Endpoints",
    "url": "/docs/1inch/Spot Price API/overview#core-endpoints",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Endpoints (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#authentication",
    "title": "overview - Authentication",
    "content": "Authentication",
    "url": "/docs/1inch/Spot Price API/overview#authentication",
    "category": "1inch",
    "headings": [],
    "excerpt": "Authentication (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#rate-limits",
    "title": "overview - Rate Limits",
    "content": "Rate Limits",
    "url": "/docs/1inch/Spot Price API/overview#rate-limits",
    "category": "1inch",
    "headings": [],
    "excerpt": "Rate Limits (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#price-format",
    "title": "overview - Price Format",
    "content": "Price Format",
    "url": "/docs/1inch/Spot Price API/overview#price-format",
    "category": "1inch",
    "headings": [],
    "excerpt": "Price Format (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#error-handling",
    "title": "overview - Error Handling",
    "content": "Error Handling",
    "url": "/docs/1inch/Spot Price API/overview#error-handling",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Handling (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#best-practices",
    "title": "overview - Best Practices",
    "content": "Best Practices",
    "url": "/docs/1inch/Spot Price API/overview#best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Best Practices (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#efficient-usage",
    "title": "overview - Efficient Usage",
    "content": "Efficient Usage",
    "url": "/docs/1inch/Spot Price API/overview#efficient-usage",
    "category": "1inch",
    "headings": [],
    "excerpt": "Efficient Usage (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#example-implementation",
    "title": "overview - Example Implementation",
    "content": "Example Implementation",
    "url": "/docs/1inch/Spot Price API/overview#example-implementation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Implementation (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#use-cases",
    "title": "overview - Use Cases",
    "content": "Use Cases",
    "url": "/docs/1inch/Spot Price API/overview#use-cases",
    "category": "1inch",
    "headings": [],
    "excerpt": "Use Cases (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#portfolio-valuation",
    "title": "overview - Portfolio Valuation",
    "content": "Portfolio Valuation",
    "url": "/docs/1inch/Spot Price API/overview#portfolio-valuation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Portfolio Valuation (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#trading-algorithms",
    "title": "overview - Trading Algorithms",
    "content": "Trading Algorithms",
    "url": "/docs/1inch/Spot Price API/overview#trading-algorithms",
    "category": "1inch",
    "headings": [],
    "excerpt": "Trading Algorithms (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#defi-protocol-integration",
    "title": "overview - DeFi Protocol Integration",
    "content": "DeFi Protocol Integration",
    "url": "/docs/1inch/Spot Price API/overview#defi-protocol-integration",
    "category": "1inch",
    "headings": [],
    "excerpt": "DeFi Protocol Integration (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#analytics-and-reporting",
    "title": "overview - Analytics and Reporting",
    "content": "Analytics and Reporting",
    "url": "/docs/1inch/Spot Price API/overview#analytics-and-reporting",
    "category": "1inch",
    "headings": [],
    "excerpt": "Analytics and Reporting (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#getting-started",
    "title": "overview - Getting Started",
    "content": "Getting Started",
    "url": "/docs/1inch/Spot Price API/overview#getting-started",
    "category": "1inch",
    "headings": [],
    "excerpt": "Getting Started (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#related-documentation",
    "title": "overview - Related Documentation",
    "content": "Related Documentation",
    "url": "/docs/1inch/Spot Price API/overview#related-documentation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Related Documentation (from overview)"
  },
  {
    "id": "1inch/Spot Price API/overview#support",
    "title": "overview - Support",
    "content": "Support",
    "url": "/docs/1inch/Spot Price API/overview#support",
    "category": "1inch",
    "headings": [],
    "excerpt": "Support (from overview)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices",
    "title": "get-all-prices",
    "content": "Get All Prices Retrieve current prices for all whitelisted tokens on a specific blockchain network. %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','primaryBorderColor':'#6c757d','lineColor':'#6c757d','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','gridColor':'#dee2e6','secondaryColor':'#e9ecef','tertiaryColor':'#f8f9fa'}}}%% graph LR subgraph \"Request Flow\" CLIENT[Client Request] --> API[1inch Price API] API --> CACHE[Price Cache] CACHE --> AGG[Price Aggregator] AGG --> SOURCES[DEX Price Sources] end subgraph \"Response Flow\" SOURCES --> AGG2[Aggregate & Normalize] AGG2 --> VALIDATE[Validate Prices] VALIDATE --> CACHE2[Update Cache] CACHE2 --> RESPONSE[JSON Response] RESPONSE --> CLIENT2[Client] end Endpoint GET https://api.1inch.dev/price/v1.1/{chain} Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, 56 for BSC, etc.) Query Parameters This endpoint accepts no query parameters. All whitelisted tokens for the specified chain are returned. Authentication All requests require authentication using a Bearer token in the Authorization header: Authorization: Bearer YOUR_API_KEY Request Examples cURL curl -X GET \"https://api.1inch.dev/price/v1.1/1\" \\ -H \"Authorization: Bearer T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\" \\ -H \"Accept: application/json\" JavaScript (axios) const axios = require(\"axios\"); async function getAllPrices() { const url = \"https://api.1inch.dev/price/v1.1/1\"; const config = { headers: { Authorization: \"Bearer T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\", Accept: \"application/json\" } }; try { const response = await axios.get(url, config); console.log(response.data); return response.data; } catch (error) { console.error(\"Error fetching prices:\", error.response?.data || error.message); throw error; } } getAllPrices(); Python (requests) import requests def get_all_prices(chain_id=1, api_key=\"T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\"): url = f\"https://api.1inch.dev/price/v1.1/{chain_id}\" headers = { \"Authorization\": f\"Bearer {api_key}\", \"Accept\": \"application/json\" } try: response = requests.get(url, headers=headers) response.raise_for_status() return response.json() except requests.exceptions.RequestException as e: print(f\"Error fetching prices: {e}\") raise # Usage prices = get_all_prices() print(prices) Go package main import ( \"encoding/json\" \"fmt\" \"io\" \"net/http\" ) func getAllPrices(chainID int, apiKey string) (map[string]string, error) { url := fmt.Sprintf(\"https://api.1inch.dev/price/v1.1/%d\", chainID) req, err := http.NewRequest(\"GET\", url, nil) if err != nil { return nil, err } req.Header.Set(\"Authorization\", \"Bearer \"+apiKey) req.Header.Set(\"Accept\", \"application/json\") client := &http.Client{} resp, err := client.Do(req) if err != nil { return nil, err } defer resp.Body.Close() body, err := io.ReadAll(resp.Body) if err != nil { return nil, err } var prices map[string]string err = json.Unmarshal(body, &prices) return prices, err } func main() { prices, err := getAllPrices(1, \"T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\") if err != nil { panic(err) } fmt.Printf(\"Retrieved %d token prices\\n\", len(prices)) } Response Success Response (200) Returns a JSON object where each key is a token contract address (lowercase, with 0x prefix) and each value is the current price as a string. Response Schema Field Type Description {tokenAddress} string Price of the token in USD (default currency) Example Response { \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\": \"3456.789123456789\", \"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\": \"1.000123456789\", \"0x6b175474e89094c44da98b954eedeac495271d0f\": \"0.999876543210\", \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\": \"12.345678901234\", \"0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9\": \"89.123456789012\", \"0x59d9356e565ab3a36dd77763fc0d87feaf85508c\": \"0.000258695490709856\" } Response Format Notes: All token addresses are returned in lowercase Prices are strings to preserve decimal precision Prices are denominated in USD by default Only whitelisted tokens are included in the response Common Token Addresses Here are some commonly requested token addresses for reference: Ethereum (Chain ID: 1) Token Symbol Address Wrapped Ether WETH 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 USD Coin USDC 0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7 Dai Stablecoin DAI 0x6b175474e89094c44da98b954eedeac495271d0f Uniswap UNI 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984 Aave AAVE 0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9 1INCH Token 1INCH 0x111111111117dc0aa78b770fa6a738034120c302 Error Responses 400 Bad Request Invalid chain ID or malformed request. { \"error\": \"Invalid chain ID\", \"description\": \"Chain ID must be a positive integer\", \"statusCode\": 400 } 401 Unauthorized Invalid or missing API key. { \"error\": \"Unauthorized\", \"description\": \"Invalid API key or missing Authorization header\", \"statusCode\": 401 } 429 Too Many Requests Rate limit exceeded. { \"error\": \"Rate limit exceeded\", \"description\": \"Too many requests. Please retry after some time\", \"statusCode\": 429, \"retryAfter\": 60 } 500 Internal Server Error Server-side error occurred. { \"error\": \"Internal server error\", \"description\": \"An unexpected error occurred while processing the request\", \"statusCode\": 500 } Rate Limits Plan Requests per Minute Daily Limit Free 100 10,000 Pro 1,000 100,000 Enterprise Custom Custom Usage Examples Price Monitoring Monitor price changes for all tokens: const axios = require(\"axios\"); class PriceMonitor { constructor(apiKey, chainId = 1, interval = 30000) { this.apiKey = apiKey; this.chainId = chainId; this.interval = interval; this.previousPrices = new Map(); this.isRunning = false; } async start() { this.isRunning = true; console.log(`Starting price monitor for chain ${this.chainId}`); while (this.isRunning) { try { await this.checkPrices(); await this.sleep(this.interval); } catch (error) { console.error(\"Error in price monitoring:\", error.message); await this.sleep(5000); // Short delay on error } } } async checkPrices() { const response = await axios.get( `https://api.1inch.dev/price/v1.1/${this.chainId}`, { headers: { Authorization: `Bearer ${this.apiKey}`, }, } ); const currentPrices = response.data; for (const [address, price] of Object.entries(currentPrices)) { const currentPrice = parseFloat(price); const previousPrice = this.previousPrices.get(address); if (previousPrice) { const changePercent = ((currentPrice - previousPrice) / previousPrice) * 100; if (Math.abs(changePercent) > 5) { // Alert on 5%+ change console.log(`üö® Price Alert: ${address}`); console.log(` Previous: $${previousPrice.toFixed(6)}`); console.log(` Current: $${currentPrice.toFixed(6)}`); console.log(` Change: ${changePercent.toFixed(2)}%`); } } this.previousPrices.set(address, currentPrice); } } sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); } stop() { this.isRunning = false; } } // Usage const monitor = new PriceMonitor(\"YOUR_API_KEY\", 1, 60000); // Check every minute monitor.start(); Price Analytics Calculate market statistics: async function getMarketStats(apiKey, chainId = 1) { const response = await axios.get( `https://api.1inch.dev/price/v1.1/${chainId}`, { headers: { Authorization: `Bearer ${apiKey}`, }, } ); const prices = Object.values(response.data).map(price => parseFloat(price)); const stats = { totalTokens: prices.length, averagePrice: prices.reduce((sum, price) => sum + price, 0) / prices.length, medianPrice: prices.sort((a, b) => a - b)[Math.floor(prices.length / 2)], highestPrice: Math.max(...prices), lowestPrice: Math.min(...prices), pricesAbove1000: prices.filter(price => price > 1000).length, pricesBelow1: prices.filter(price => price < 1).length }; return stats; } // Usage getMarketStats(\"YOUR_API_KEY\") .then(stats => console.log(\"Market Statistics:\", stats)) .catch(console.error); Best Practices 1. Implement Caching Cache responses to reduce API calls: const NodeCache = require(\"node-cache\"); const cache = new NodeCache({ stdTTL: 30 }); // 30 second cache async function getCachedPrices(apiKey, chainId) { const cacheKey = `prices-${chainId}`; let prices = cache.get(cacheKey); if (!prices) { const response = await axios.get( `https://api.1inch.dev/price/v1.1/${chainId}`, { headers: { Authorization: `Bearer ${apiKey}` } } ); prices = response.data; cache.set(cacheKey, prices); } return prices; } 2. Handle Rate Limits Implement exponential backoff: async function fetchWithRetry(url, config, maxRetries = 3) { for (let attempt = 1; attempt <= maxRetries; attempt++) { try { return await axios.get(url, config); } catch (error) { if (error.response?.status === 429 && attempt < maxRetries) { const delay = Math.pow(2, attempt) * 1000; // Exponential backoff console.log(`Rate limited. Retrying in ${delay}ms...`); await new Promise(resolve => setTimeout(resolve, delay)); continue; } throw error; } } } 3. Process Large Responses Efficiently Use streaming for large datasets: const { Transform } = require('stream'); class PriceProcessor extends Transform { constructor() { super({ objectMode: true }); this.processedCount = 0; } _transform(chunk, encoding, callback) { try { const prices = JSON.parse(chunk); for (const [address, price] of Object.entries(prices)) { if (parseFloat(price) > 1000) { // Process high-value tokens this.push({ address, price: parseFloat(price) }); this.processedCount++; } } callback(); } catch (error) { callback(error); } } } Related Endpoints Get Prices by Tokens - Get prices for specific tokens Get All Currencies - Get available base currencies API Overview - Complete API documentation Support For technical issues or questions about this endpoint: 1inch Developer Portal API Documentation Community Discord",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get All Prices",
        "anchor": "get-all-prices"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 3,
        "text": "Query Parameters",
        "anchor": "query-parameters"
      },
      {
        "level": 2,
        "text": "Authentication",
        "anchor": "authentication"
      },
      {
        "level": 2,
        "text": "Request Examples",
        "anchor": "request-examples"
      },
      {
        "level": 3,
        "text": "cURL",
        "anchor": "curl"
      },
      {
        "level": 3,
        "text": "JavaScript (axios)",
        "anchor": "javascript-axios"
      },
      {
        "level": 3,
        "text": "Python (requests)",
        "anchor": "python-requests"
      },
      {
        "level": 1,
        "text": "Usage",
        "anchor": "usage"
      },
      {
        "level": 3,
        "text": "Go",
        "anchor": "go"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success Response (200)",
        "anchor": "success-response-200"
      },
      {
        "level": 3,
        "text": "Response Schema",
        "anchor": "response-schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      },
      {
        "level": 2,
        "text": "Common Token Addresses",
        "anchor": "common-token-addresses"
      },
      {
        "level": 3,
        "text": "Ethereum (Chain ID: 1)",
        "anchor": "ethereum-chain-id-1"
      },
      {
        "level": 2,
        "text": "Error Responses",
        "anchor": "error-responses"
      },
      {
        "level": 3,
        "text": "400 Bad Request",
        "anchor": "400-bad-request"
      },
      {
        "level": 3,
        "text": "401 Unauthorized",
        "anchor": "401-unauthorized"
      },
      {
        "level": 3,
        "text": "429 Too Many Requests",
        "anchor": "429-too-many-requests"
      },
      {
        "level": 3,
        "text": "500 Internal Server Error",
        "anchor": "500-internal-server-error"
      },
      {
        "level": 2,
        "text": "Rate Limits",
        "anchor": "rate-limits"
      },
      {
        "level": 2,
        "text": "Usage Examples",
        "anchor": "usage-examples"
      },
      {
        "level": 3,
        "text": "Price Monitoring",
        "anchor": "price-monitoring"
      },
      {
        "level": 3,
        "text": "Price Analytics",
        "anchor": "price-analytics"
      },
      {
        "level": 2,
        "text": "Best Practices",
        "anchor": "best-practices"
      },
      {
        "level": 3,
        "text": "1. Implement Caching",
        "anchor": "1-implement-caching"
      },
      {
        "level": 3,
        "text": "2. Handle Rate Limits",
        "anchor": "2-handle-rate-limits"
      },
      {
        "level": 3,
        "text": "3. Process Large Responses Efficiently",
        "anchor": "3-process-large-responses-efficiently"
      },
      {
        "level": 2,
        "text": "Related Endpoints",
        "anchor": "related-endpoints"
      },
      {
        "level": 2,
        "text": "Support",
        "anchor": "support"
      }
    ],
    "excerpt": "Get All Prices Retrieve current prices for all whitelisted tokens on a specific blockchain network. %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','..."
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#get-all-prices",
    "title": "get-all-prices - Get All Prices",
    "content": "Get All Prices",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#get-all-prices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get All Prices (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#endpoint",
    "title": "get-all-prices - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#parameters",
    "title": "get-all-prices - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#path-parameters",
    "title": "get-all-prices - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#query-parameters",
    "title": "get-all-prices - Query Parameters",
    "content": "Query Parameters",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#query-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Query Parameters (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#authentication",
    "title": "get-all-prices - Authentication",
    "content": "Authentication",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#authentication",
    "category": "1inch",
    "headings": [],
    "excerpt": "Authentication (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#request-examples",
    "title": "get-all-prices - Request Examples",
    "content": "Request Examples",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#request-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Examples (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#curl",
    "title": "get-all-prices - cURL",
    "content": "cURL",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#curl",
    "category": "1inch",
    "headings": [],
    "excerpt": "cURL (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#javascript-axios",
    "title": "get-all-prices - JavaScript (axios)",
    "content": "JavaScript (axios)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#javascript-axios",
    "category": "1inch",
    "headings": [],
    "excerpt": "JavaScript (axios) (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#python-requests",
    "title": "get-all-prices - Python (requests)",
    "content": "Python (requests)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#python-requests",
    "category": "1inch",
    "headings": [],
    "excerpt": "Python (requests) (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#usage",
    "title": "get-all-prices - Usage",
    "content": "Usage",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#usage",
    "category": "1inch",
    "headings": [],
    "excerpt": "Usage (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#go",
    "title": "get-all-prices - Go",
    "content": "Go",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#go",
    "category": "1inch",
    "headings": [],
    "excerpt": "Go (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#response",
    "title": "get-all-prices - Response",
    "content": "Response",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#success-response-200",
    "title": "get-all-prices - Success Response (200)",
    "content": "Success Response (200)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#success-response-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success Response (200) (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#response-schema",
    "title": "get-all-prices - Response Schema",
    "content": "Response Schema",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#response-schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response Schema (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#example-response",
    "title": "get-all-prices - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#common-token-addresses",
    "title": "get-all-prices - Common Token Addresses",
    "content": "Common Token Addresses",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#common-token-addresses",
    "category": "1inch",
    "headings": [],
    "excerpt": "Common Token Addresses (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#ethereum-chain-id-1",
    "title": "get-all-prices - Ethereum (Chain ID: 1)",
    "content": "Ethereum (Chain ID: 1)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#ethereum-chain-id-1",
    "category": "1inch",
    "headings": [],
    "excerpt": "Ethereum (Chain ID: 1) (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#error-responses",
    "title": "get-all-prices - Error Responses",
    "content": "Error Responses",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#error-responses",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Responses (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#400-bad-request",
    "title": "get-all-prices - 400 Bad Request",
    "content": "400 Bad Request",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#400-bad-request",
    "category": "1inch",
    "headings": [],
    "excerpt": "400 Bad Request (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#401-unauthorized",
    "title": "get-all-prices - 401 Unauthorized",
    "content": "401 Unauthorized",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#401-unauthorized",
    "category": "1inch",
    "headings": [],
    "excerpt": "401 Unauthorized (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#429-too-many-requests",
    "title": "get-all-prices - 429 Too Many Requests",
    "content": "429 Too Many Requests",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#429-too-many-requests",
    "category": "1inch",
    "headings": [],
    "excerpt": "429 Too Many Requests (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#500-internal-server-error",
    "title": "get-all-prices - 500 Internal Server Error",
    "content": "500 Internal Server Error",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#500-internal-server-error",
    "category": "1inch",
    "headings": [],
    "excerpt": "500 Internal Server Error (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#rate-limits",
    "title": "get-all-prices - Rate Limits",
    "content": "Rate Limits",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#rate-limits",
    "category": "1inch",
    "headings": [],
    "excerpt": "Rate Limits (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#usage-examples",
    "title": "get-all-prices - Usage Examples",
    "content": "Usage Examples",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#usage-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Usage Examples (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#price-monitoring",
    "title": "get-all-prices - Price Monitoring",
    "content": "Price Monitoring",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#price-monitoring",
    "category": "1inch",
    "headings": [],
    "excerpt": "Price Monitoring (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#price-analytics",
    "title": "get-all-prices - Price Analytics",
    "content": "Price Analytics",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#price-analytics",
    "category": "1inch",
    "headings": [],
    "excerpt": "Price Analytics (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#best-practices",
    "title": "get-all-prices - Best Practices",
    "content": "Best Practices",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Best Practices (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#1-implement-caching",
    "title": "get-all-prices - 1. Implement Caching",
    "content": "1. Implement Caching",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#1-implement-caching",
    "category": "1inch",
    "headings": [],
    "excerpt": "1. Implement Caching (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#2-handle-rate-limits",
    "title": "get-all-prices - 2. Handle Rate Limits",
    "content": "2. Handle Rate Limits",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#2-handle-rate-limits",
    "category": "1inch",
    "headings": [],
    "excerpt": "2. Handle Rate Limits (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#3-process-large-responses-efficiently",
    "title": "get-all-prices - 3. Process Large Responses Efficiently",
    "content": "3. Process Large Responses Efficiently",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#3-process-large-responses-efficiently",
    "category": "1inch",
    "headings": [],
    "excerpt": "3. Process Large Responses Efficiently (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#related-endpoints",
    "title": "get-all-prices - Related Endpoints",
    "content": "Related Endpoints",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#related-endpoints",
    "category": "1inch",
    "headings": [],
    "excerpt": "Related Endpoints (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-prices#support",
    "title": "get-all-prices - Support",
    "content": "Support",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-prices#support",
    "category": "1inch",
    "headings": [],
    "excerpt": "Support (from get-all-prices)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens",
    "title": "get-prices-by-tokens",
    "content": "Get Prices by Tokens Retrieve prices for specific tokens using either GET (single token) or POST (multiple tokens) requests. This endpoint provides flexible price querying with currency options. %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','primaryBorderColor':'#6c757d','lineColor':'#6c757d','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','gridColor':'#dee2e6','secondaryColor':'#e9ecef','tertiaryColor':'#f8f9fa'}}}%% graph TD subgraph \"Request Types\" SINGLE[Single Token GET] --> VALIDATE1[Validate Token Address] BATCH[Batch Tokens POST] --> VALIDATE2[Validate Token List] end subgraph \"Processing Pipeline\" VALIDATE1 --> CURRENCY[Apply Currency Filter] VALIDATE2 --> CURRENCY CURRENCY --> CACHE[Check Price Cache] CACHE --> FETCH[Fetch from DEX Sources] FETCH --> NORMALIZE[Normalize & Convert] NORMALIZE --> RESPONSE[JSON Response] end subgraph \"Response Formats\" RESPONSE --> SINGLE_RESP[Single Token Object] RESPONSE --> BATCH_RESP[Token Address Map] end Endpoints Single Token (GET) GET https://api.1inch.dev/price/v1.1/{chain}/{address} Multiple Tokens (POST) POST https://api.1inch.dev/price/v1.1/{chain} Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, 56 for BSC, etc.) address string Yes* Token contract address (GET requests only, *required for GET) Query Parameters (GET only) Parameter Type Required Default Description currency string No USD Base currency for price denomination Request Body (POST only) Field Type Required Description tokens string[] Yes Array of token contract addresses currency string No Base currency for price denomination (default: USD ) Authentication All requests require authentication using a Bearer token: Authorization: Bearer YOUR_API_KEY Request Examples Single Token (GET) Basic Request curl -X GET \"https://api.1inch.dev/price/v1.1/1/0x111111111117dc0aa78b770fa6a738034120c302\" \\ -H \"Authorization: Bearer T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\" \\ -H \"Accept: application/json\" With Currency Parameter curl -X GET \"https://api.1inch.dev/price/v1.1/1/0x111111111117dc0aa78b770fa6a738034120c302?currency=EUR\" \\ -H \"Authorization: Bearer T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\" \\ -H \"Accept: application/json\" JavaScript (axios) const axios = require(\"axios\"); async function getSingleTokenPrice(tokenAddress, currency = \"USD\", chainId = 1) { const url = `https://api.1inch.dev/price/v1.1/${chainId}/${tokenAddress}`; const config = { headers: { Authorization: \"Bearer T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\", Accept: \"application/json\" }, params: { currency } }; try { const response = await axios.get(url, config); console.log(`Price for ${tokenAddress}:`, response.data); return response.data; } catch (error) { console.error(\"Error fetching token price:\", error.response?.data || error.message); throw error; } } // Usage examples getSingleTokenPrice(\"0x111111111117dc0aa78b770fa6a738034120c302\", \"USD\"); // 1INCH in USD getSingleTokenPrice(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", \"EUR\"); // WETH in EUR getSingleTokenPrice(\"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\", \"ETH\"); // USDC in ETH Multiple Tokens (POST) Basic Batch Request curl -X POST \"https://api.1inch.dev/price/v1.1/1\" \\ -H \"Authorization: Bearer T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"tokens\": [ \"0x111111111117dc0aa78b770fa6a738034120c302\", \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", \"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\" ], \"currency\": \"USD\" }' JavaScript (axios) async function getBatchTokenPrices(tokenAddresses, currency = \"USD\", chainId = 1) { const url = `https://api.1inch.dev/price/v1.1/${chainId}`; const config = { headers: { Authorization: \"Bearer T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\", \"Content-Type\": \"application/json\" } }; const body = { tokens: tokenAddresses, currency: currency }; try { const response = await axios.post(url, body, config); console.log(`Batch prices in ${currency}:`, response.data); return response.data; } catch (error) { console.error(\"Error fetching batch prices:\", error.response?.data || error.message); throw error; } } // Usage examples const tokens = [ \"0x111111111117dc0aa78b770fa6a738034120c302\", // 1INCH \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", // WETH \"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\", // USDC \"0x6b175474e89094c44da98b954eedeac495271d0f\", // DAI \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\" // UNI ]; getBatchTokenPrices(tokens, \"USD\"); // Prices in USD getBatchTokenPrices(tokens, \"ETH\"); // Prices in ETH getBatchTokenPrices(tokens, \"EUR\"); // Prices in EUR Python (requests) import requests import json def get_batch_token_prices(token_addresses, currency=\"USD\", chain_id=1, api_key=\"T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\"): url = f\"https://api.1inch.dev/price/v1.1/{chain_id}\" headers = { \"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\", \"Accept\": \"application/json\" } payload = { \"tokens\": token_addresses, \"currency\": currency } try: response = requests.post(url, headers=headers, json=payload) response.raise_for_status() prices = response.json() print(f\"Token prices in {currency}:\") for address, price in prices.items(): print(f\" {address}: {price}\") return prices except requests.exceptions.RequestException as e: print(f\"Error fetching batch prices: {e}\") raise # Usage tokens = [ \"0x111111111117dc0aa78b770fa6a738034120c302\", # 1INCH \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", # WETH \"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\" # USDC ] prices = get_batch_token_prices(tokens, \"USD\") Go package main import ( \"bytes\" \"encoding/json\" \"fmt\" \"io\" \"net/http\" ) type BatchPriceRequest struct { Tokens []string `json:\"tokens\"` Currency string `json:\"currency\"` } func getBatchTokenPrices(chainID int, tokens []string, currency string, apiKey string) (map[string]string, error) { url := fmt.Sprintf(\"https://api.1inch.dev/price/v1.1/%d\", chainID) requestBody := BatchPriceRequest{ Tokens: tokens, Currency: currency, } jsonBody, err := json.Marshal(requestBody) if err != nil { return nil, err } req, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonBody)) if err != nil { return nil, err } req.Header.Set(\"Authorization\", \"Bearer \"+apiKey) req.Header.Set(\"Content-Type\", \"application/json\") req.Header.Set(\"Accept\", \"application/json\") client := &http.Client{} resp, err := client.Do(req) if err != nil { return nil, err } defer resp.Body.Close() body, err := io.ReadAll(resp.Body) if err != nil { return nil, err } var prices map[string]string err = json.Unmarshal(body, &prices) return prices, err } func main() { tokens := []string{ \"0x111111111117dc0aa78b770fa6a738034120c302\", // 1INCH \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", // WETH } prices, err := getBatchTokenPrices(1, tokens, \"USD\", \"T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\") if err != nil { panic(err) } fmt.Printf(\"Token prices: %v\\n\", prices) } Response Format Single Token (GET) Returns a JSON object with the token address as key and price as value: { \"0x111111111117dc0aa78b770fa6a738034120c302\": \"0.27929411310613317\" } Multiple Tokens (POST) Returns a JSON object mapping each token address to its price: { \"0x111111111117dc0aa78b770fa6a738034120c302\": \"0.27929411310613317\", \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\": \"3456.789123456789\", \"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\": \"1.000123456789\" } Response Format Notes: Token addresses are returned in lowercase with 0x prefix Prices are strings to preserve decimal precision Missing tokens (not whitelisted or invalid) are omitted from response Prices are denominated in the requested currency Currency Support Available Currencies Use the Get All Currencies endpoint to retrieve available currencies for each chain. Common currencies include: Fiat : USD (default), EUR , GBP , JPY Crypto : ETH , BTC , BNB , MATIC Stablecoins : USDC , USDT , BUSD Currency Examples // Different currency examples const wethAddress = \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"; // Price in USD (default) const usdPrice = await getSingleTokenPrice(wethAddress, \"USD\"); // Price in EUR const eurPrice = await getSingleTokenPrice(wethAddress, \"EUR\"); // Price in BTC const btcPrice = await getSingleTokenPrice(wethAddress, \"BTC\"); // Price in ETH (shows 1.0 for WETH) const ethPrice = await getSingleTokenPrice(wethAddress, \"ETH\"); console.log({ USD: usdPrice, EUR: eurPrice, BTC: btcPrice, ETH: ethPrice }); Advanced Usage Examples Portfolio Price Tracking Track portfolio value across multiple currencies: class PortfolioTracker { constructor(apiKey, chainId = 1) { this.apiKey = apiKey; this.chainId = chainId; this.holdings = new Map(); } addHolding(tokenAddress, amount, symbol = null) { this.holdings.set(tokenAddress.toLowerCase(), { address: tokenAddress.toLowerCase(), amount: parseFloat(amount), symbol: symbol || tokenAddress.slice(0, 8) }); } async getPortfolioValue(currency = \"USD\") { const tokenAddresses = Array.from(this.holdings.keys()); if (tokenAddresses.length === 0) { return { totalValue: 0, breakdown: [], currency }; } try { const prices = await getBatchTokenPrices(tokenAddresses, currency, this.chainId); let totalValue = 0; const breakdown = []; for (const [address, holding] of this.holdings) { const price = prices[address]; if (price) { const value = holding.amount * parseFloat(price); totalValue += value; breakdown.push({ symbol: holding.symbol, address: address, amount: holding.amount, price: parseFloat(price), value: value, percentage: 0 // Will be calculated after total }); } else { console.warn(`No price found for ${holding.symbol} (${address})`); } } // Calculate percentages breakdown.forEach(item => { item.percentage = totalValue > 0 ? (item.value / totalValue) * 100 : 0; }); // Sort by value descending breakdown.sort((a, b) => b.value - a.value); return { totalValue, breakdown, currency, timestamp: Date.now() }; } catch (error) { console.error(\"Error calculating portfolio value:\", error); throw error; } } async getMultiCurrencyValue(currencies = [\"USD\", \"EUR\", \"ETH\"]) { const results = {}; for (const currency of currencies) { try { results[currency] = await this.getPortfolioValue(currency); } catch (error) { console.error(`Failed to get portfolio value in ${currency}:`, error.message); results[currency] = null; } } return results; } } // Usage example async function demonstratePortfolioTracking() { const portfolio = new PortfolioTracker(\"YOUR_API_KEY\", 1); // Add holdings portfolio.addHolding(\"0x111111111117dc0aa78b770fa6a738034120c302\", 1000, \"1INCH\"); portfolio.addHolding(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", 2.5, \"WETH\"); portfolio.addHolding(\"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\", 5000, \"USDC\"); // Get portfolio value in USD const usdValue = await portfolio.getPortfolioValue(\"USD\"); console.log(`Portfolio Value: $${usdValue.totalValue.toFixed(2)}`); usdValue.breakdown.forEach(holding => { console.log(` ${holding.symbol}: ${holding.amount} √ó $${holding.price.toFixed(4)} = $${holding.value.toFixed(2)} (${holding.percentage.toFixed(1)}%)`); }); // Get portfolio value in multiple currencies const multiCurrency = await portfolio.getMultiCurrencyValue([\"USD\", \"EUR\", \"ETH\"]); console.log(\"\\nMulti-currency portfolio values:\"); for (const [currency, data] of Object.entries(multiCurrency)) { if (data) { console.log(`${currency}: ${data.totalValue.toFixed(6)}`); } } } demonstratePortfolioTracking(); Price Alert System Monitor token prices and trigger alerts: class PriceAlertSystem { constructor(apiKey, chainId = 1) { this.apiKey = apiKey; this.chainId = chainId; this.alerts = new Map(); this.priceHistory = new Map(); this.isRunning = false; } addAlert(tokenAddress, targetPrice, direction, currency = \"USD\", description = \"\") { const alertId = `${tokenAddress}-${Date.now()}`; this.alerts.set(alertId, { id: alertId, tokenAddress: tokenAddress.toLowerCase(), targetPrice: parseFloat(targetPrice), direction: direction.toLowerCase(), // 'above' or 'below' currency: currency.toUpperCase(), description: description, created: Date.now(), triggered: false }); console.log(`‚úì Alert added: ${description || tokenAddress} ${direction} ${targetPrice} ${currency}`); return alertId; } removeAlert(alertId) { const removed = this.alerts.delete(alertId); if (removed) { console.log(`‚úó Alert removed: ${alertId}`); } return removed; } async checkAlerts() { if (this.alerts.size === 0) return; // Group alerts by currency for batch requests const alertsByCurrency = new Map(); for (const alert of this.alerts.values()) { if (alert.triggered) continue; if (!alertsByCurrency.has(alert.currency)) { alertsByCurrency.set(alert.currency, []); } alertsByCurrency.get(alert.currency).push(alert); } // Check each currency group for (const [currency, currencyAlerts] of alertsByCurrency) { try { const tokenAddresses = [...new Set(currencyAlerts.map(a => a.tokenAddress))]; const prices = await getBatchTokenPrices(tokenAddresses, currency, this.chainId); for (const alert of currencyAlerts) { const currentPrice = parseFloat(prices[alert.tokenAddress]); if (!currentPrice) continue; // Store price history const historyKey = `${alert.tokenAddress}-${currency}`; if (!this.priceHistory.has(historyKey)) { this.priceHistory.set(historyKey, []); } this.priceHistory.get(historyKey).push({ price: currentPrice, timestamp: Date.now() }); // Check alert condition const shouldTrigger = ( (alert.direction === 'above' && currentPrice >= alert.targetPrice) || (alert.direction === 'below' && currentPrice <= alert.targetPrice) ); if (shouldTrigger) { this.triggerAlert(alert, currentPrice); } } } catch (error) { console.error(`Error checking alerts for ${currency}:`, error.message); } } } triggerAlert(alert, currentPrice) { alert.triggered = true; alert.triggeredAt = Date.now(); alert.triggeredPrice = currentPrice; console.log(`üö® PRICE ALERT TRIGGERED! üö®`); console.log(`Token: ${alert.tokenAddress}`); console.log(`Description: ${alert.description}`); console.log(`Target: ${alert.direction} ${alert.targetPrice} ${alert.currency}`); console.log(`Current Price: ${currentPrice} ${alert.currency}`); console.log(`Time: ${new Date().toISOString()}`); console.log(`---`); // Here you could send notifications via email, Slack, Discord, etc. this.sendNotification(alert, currentPrice); } async sendNotification(alert, currentPrice) { // Implement your notification logic here // Examples: email, SMS, webhook, Discord bot, etc. const notificationData = { type: 'price_alert', token: alert.tokenAddress, description: alert.description, targetPrice: alert.targetPrice, currentPrice: currentPrice, currency: alert.currency, direction: alert.direction, timestamp: Date.now() }; // Example webhook notification try { // await sendWebhook('https://your-webhook-url.com', notificationData); console.log('Notification sent:', notificationData); } catch (error) { console.error('Failed to send notification:', error); } } async start(checkInterval = 30000) { this.isRunning = true; console.log(` Price alert system started (checking every ${checkInterval/1000}s)`); while (this.isRunning) { try { await this.checkAlerts(); // Clean up old price history (keep last 100 entries per token-currency) for (const [key, history] of this.priceHistory) { if (history.length > 100) { this.priceHistory.set(key, history.slice(-100)); } } await new Promise(resolve => setTimeout(resolve, checkInterval)); } catch (error) { console.error('Error in price alert system:', error); await new Promise(resolve => setTimeout(resolve, 5000)); } } } stop() { this.isRunning = false; console.log('üõë Price alert system stopped'); } getActiveAlerts() { return Array.from(this.alerts.values()).filter(alert => !alert.triggered); } getTriggeredAlerts() { return Array.from(this.alerts.values()).filter(alert => alert.triggered); } getPriceHistory(tokenAddress, currency = \"USD\", limit = 50) { const historyKey = `${tokenAddress.toLowerCase()}-${currency.toUpperCase()}`; const history = this.priceHistory.get(historyKey) || []; return history.slice(-limit); } } // Usage example async function demonstratePriceAlerts() { const alertSystem = new PriceAlertSystem(\"YOUR_API_KEY\", 1); // Add some alerts alertSystem.addAlert( \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", 4000, \"above\", \"USD\", \"WETH above $4000\" ); alertSystem.addAlert( \"0x111111111117dc0aa78b770fa6a738034120c302\", 0.5, \"above\", \"USD\", \"1INCH above $0.50\" ); alertSystem.addAlert( \"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\", 0.98, \"below\", \"USD\", \"USDC below $0.98 (depeg alert)\" ); // Start monitoring (runs until stopped) alertSystem.start(60000); // Check every minute // Stop after 5 minutes for demo setTimeout(() => { alertSystem.stop(); console.log(\"\\nActive alerts:\", alertSystem.getActiveAlerts().length); console.log(\"Triggered alerts:\", alertSystem.getTriggeredAlerts().length); }, 300000); } // Uncomment to run // demonstratePriceAlerts(); Price Comparison Tool Compare prices across different currencies and time periods: class PriceComparison { constructor(apiKey, chainId = 1) { this.apiKey = apiKey; this.chainId = chainId; } async compareTokenPrices(tokenAddresses, currencies = [\"USD\", \"EUR\", \"ETH\"]) { const comparison = { tokens: tokenAddresses, currencies: currencies, timestamp: Date.now(), data: {} }; for (const currency of currencies) { try { const prices = await getBatchTokenPrices(tokenAddresses, currency, this.chainId); comparison.data[currency] = prices; } catch (error) { console.error(`Failed to get prices in ${currency}:`, error.message); comparison.data[currency] = {}; } } return comparison; } async analyzePriceRelationships(tokenAddresses, baseCurrency = \"USD\") { const prices = await getBatchTokenPrices(tokenAddresses, baseCurrency, this.chainId); const tokens = Object.keys(prices); const analysis = { baseCurrency, timestamp: Date.now(), relationships: {} }; // Calculate price ratios between all token pairs for (let i = 0; i < tokens.length; i++) { for (let j = i + 1; j < tokens.length; j++) { const token1 = tokens[i]; const token2 = tokens[j]; const price1 = parseFloat(prices[token1]); const price2 = parseFloat(prices[token2]); if (price1 && price2) { const ratio = price1 / price2; const pairKey = `${token1.slice(0,8)}/${token2.slice(0,8)}`; analysis.relationships[pairKey] = { token1: { address: token1, price: price1 }, token2: { address: token2, price: price2 }, ratio: ratio, inverseRatio: 1 / ratio }; } } } return analysis; } formatComparisonTable(comparison) { console.log(\"\\n=== PRICE COMPARISON TABLE ===\"); console.log(`Timestamp: ${new Date(comparison.timestamp).toISOString()}`); console.log(); // Header const header = [\"Token Address\", ...comparison.currencies]; console.log(header.map(h => h.padEnd(15)).join(\" | \")); console.log(\"-\".repeat(header.length * 18)); // Data rows for (const tokenAddress of comparison.tokens) { const row = [tokenAddress.slice(0, 12) + \"...\"]; for (const currency of comparison.currencies) { const price = comparison.data[currency][tokenAddress]; row.push(price ? parseFloat(price).toFixed(6) : \"N/A\"); } console.log(row.map(cell => cell.padEnd(15)).join(\" | \")); } console.log(); } } // Usage example async function demonstratePriceComparison() { const comparison = new PriceComparison(\"YOUR_API_KEY\", 1); const tokens = [ \"0x111111111117dc0aa78b770fa6a738034120c302\", // 1INCH \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", // WETH \"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\", // USDC \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\" // UNI ]; // Compare prices across currencies const comp = await comparison.compareTokenPrices(tokens, [\"USD\", \"EUR\", \"ETH\", \"BTC\"]); comparison.formatComparisonTable(comp); // Analyze price relationships const analysis = await comparison.analyzePriceRelationships(tokens, \"USD\"); console.log(\"\\n=== PRICE RELATIONSHIPS ===\"); for (const [pair, data] of Object.entries(analysis.relationships)) { console.log(`${pair}: 1 ${data.token1.address.slice(0,8)} = ${data.ratio.toFixed(6)} ${data.token2.address.slice(0,8)}`); } } // demonstratePriceComparison(); Error Responses 400 Bad Request Invalid request parameters or malformed addresses. { \"error\": \"Invalid token address\", \"description\": \"Token address must be a valid Ethereum address\", \"statusCode\": 400 } 401 Unauthorized Invalid or missing API key. { \"error\": \"Unauthorized\", \"description\": \"Invalid API key or missing Authorization header\", \"statusCode\": 401 } 404 Not Found Token not whitelisted or chain not supported. { \"error\": \"Token not found\", \"description\": \"The requested token is not whitelisted on this chain\", \"statusCode\": 404 } 429 Too Many Requests Rate limit exceeded. { \"error\": \"Rate limit exceeded\", \"description\": \"Too many requests. Please retry after some time\", \"statusCode\": 429, \"retryAfter\": 60 } 500 Internal Server Error Server-side error occurred. { \"error\": \"Internal server error\", \"description\": \"An unexpected error occurred while processing the request\", \"statusCode\": 500 } Best Practices 1. Use Batch Requests for Multiple Tokens Always prefer POST batch requests when querying multiple tokens: // Inefficient: Multiple single requests const prices = {}; for (const token of tokens) { prices[token] = await getSingleTokenPrice(token, \"USD\"); } // Efficient: Single batch request const prices = await getBatchTokenPrices(tokens, \"USD\"); 2. Implement Request Caching Cache results to reduce API calls: const NodeCache = require(\"node-cache\"); const priceCache = new NodeCache({ stdTTL: 30 }); // 30 second cache async function getCachedPrice(tokenAddress, currency = \"USD\", chainId = 1) { const cacheKey = `${chainId}-${tokenAddress}-${currency}`; let price = priceCache.get(cacheKey); if (!price) { const result = await getSingleTokenPrice(tokenAddress, currency, chainId); price = result[tokenAddress]; priceCache.set(cacheKey, price); } return price; } 3. Handle Missing Tokens Gracefully Not all tokens may be available in the response: async function safeGetPrices(tokenAddresses, currency = \"USD\") { const prices = await getBatchTokenPrices(tokenAddresses, currency); const results = {}; for (const address of tokenAddresses) { const price = prices[address.toLowerCase()]; results[address] = { price: price || null, available: !!price, currency: currency }; } return results; } 4. Validate Addresses Before Requests Validate Ethereum addresses before making API calls: function isValidEthereumAddress(address) { return /^0x[a-fA-F0-9]{40}$/.test(address); } async function getValidatedPrice(tokenAddress, currency = \"USD\") { if (!isValidEthereumAddress(tokenAddress)) { throw new Error(`Invalid Ethereum address: ${tokenAddress}`); } return await getSingleTokenPrice(tokenAddress, currency); } Rate Limiting Plan Requests per Minute Batch Size Limit Daily Limit Free 100 50 tokens 10,000 Pro 1,000 200 tokens 100,000 Enterprise Custom Custom Custom Related Endpoints Get All Prices - Get prices for all whitelisted tokens Get All Currencies - Get available base currencies API Overview - Complete API documentation Support For technical issues or questions about this endpoint: 1inch Developer Portal API Documentation Community Discord",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get Prices by Tokens",
        "anchor": "get-prices-by-tokens"
      },
      {
        "level": 2,
        "text": "Endpoints",
        "anchor": "endpoints"
      },
      {
        "level": 3,
        "text": "Single Token (GET)",
        "anchor": "single-token-get"
      },
      {
        "level": 3,
        "text": "Multiple Tokens (POST)",
        "anchor": "multiple-tokens-post"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 3,
        "text": "Query Parameters (GET only)",
        "anchor": "query-parameters-get-only"
      },
      {
        "level": 3,
        "text": "Request Body (POST only)",
        "anchor": "request-body-post-only"
      },
      {
        "level": 2,
        "text": "Authentication",
        "anchor": "authentication"
      },
      {
        "level": 2,
        "text": "Request Examples",
        "anchor": "request-examples"
      },
      {
        "level": 3,
        "text": "Single Token (GET)",
        "anchor": "single-token-get"
      },
      {
        "level": 4,
        "text": "Basic Request",
        "anchor": "basic-request"
      },
      {
        "level": 4,
        "text": "With Currency Parameter",
        "anchor": "with-currency-parameter"
      },
      {
        "level": 4,
        "text": "JavaScript (axios)",
        "anchor": "javascript-axios"
      },
      {
        "level": 3,
        "text": "Multiple Tokens (POST)",
        "anchor": "multiple-tokens-post"
      },
      {
        "level": 4,
        "text": "Basic Batch Request",
        "anchor": "basic-batch-request"
      },
      {
        "level": 4,
        "text": "JavaScript (axios)",
        "anchor": "javascript-axios"
      },
      {
        "level": 4,
        "text": "Python (requests)",
        "anchor": "python-requests"
      },
      {
        "level": 1,
        "text": "Usage",
        "anchor": "usage"
      },
      {
        "level": 4,
        "text": "Go",
        "anchor": "go"
      },
      {
        "level": 2,
        "text": "Response Format",
        "anchor": "response-format"
      },
      {
        "level": 3,
        "text": "Single Token (GET)",
        "anchor": "single-token-get"
      },
      {
        "level": 3,
        "text": "Multiple Tokens (POST)",
        "anchor": "multiple-tokens-post"
      },
      {
        "level": 2,
        "text": "Currency Support",
        "anchor": "currency-support"
      },
      {
        "level": 3,
        "text": "Available Currencies",
        "anchor": "available-currencies"
      },
      {
        "level": 3,
        "text": "Currency Examples",
        "anchor": "currency-examples"
      },
      {
        "level": 2,
        "text": "Advanced Usage Examples",
        "anchor": "advanced-usage-examples"
      },
      {
        "level": 3,
        "text": "Portfolio Price Tracking",
        "anchor": "portfolio-price-tracking"
      },
      {
        "level": 3,
        "text": "Price Alert System",
        "anchor": "price-alert-system"
      },
      {
        "level": 3,
        "text": "Price Comparison Tool",
        "anchor": "price-comparison-tool"
      },
      {
        "level": 2,
        "text": "Error Responses",
        "anchor": "error-responses"
      },
      {
        "level": 3,
        "text": "400 Bad Request",
        "anchor": "400-bad-request"
      },
      {
        "level": 3,
        "text": "401 Unauthorized",
        "anchor": "401-unauthorized"
      },
      {
        "level": 3,
        "text": "404 Not Found",
        "anchor": "404-not-found"
      },
      {
        "level": 3,
        "text": "429 Too Many Requests",
        "anchor": "429-too-many-requests"
      },
      {
        "level": 3,
        "text": "500 Internal Server Error",
        "anchor": "500-internal-server-error"
      },
      {
        "level": 2,
        "text": "Best Practices",
        "anchor": "best-practices"
      },
      {
        "level": 3,
        "text": "1. Use Batch Requests for Multiple Tokens",
        "anchor": "1-use-batch-requests-for-multiple-tokens"
      },
      {
        "level": 3,
        "text": "2. Implement Request Caching",
        "anchor": "2-implement-request-caching"
      },
      {
        "level": 3,
        "text": "3. Handle Missing Tokens Gracefully",
        "anchor": "3-handle-missing-tokens-gracefully"
      },
      {
        "level": 3,
        "text": "4. Validate Addresses Before Requests",
        "anchor": "4-validate-addresses-before-requests"
      },
      {
        "level": 2,
        "text": "Rate Limiting",
        "anchor": "rate-limiting"
      },
      {
        "level": 2,
        "text": "Related Endpoints",
        "anchor": "related-endpoints"
      },
      {
        "level": 2,
        "text": "Support",
        "anchor": "support"
      }
    ],
    "excerpt": "Get Prices by Tokens Retrieve prices for specific tokens using either GET (single token) or POST (multiple tokens) requests. This endpoint provides flexible price querying with currency options. %%{in..."
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#get-prices-by-tokens",
    "title": "get-prices-by-tokens - Get Prices by Tokens",
    "content": "Get Prices by Tokens",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#get-prices-by-tokens",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get Prices by Tokens (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#endpoints",
    "title": "get-prices-by-tokens - Endpoints",
    "content": "Endpoints",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#endpoints",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoints (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#single-token-get",
    "title": "get-prices-by-tokens - Single Token (GET)",
    "content": "Single Token (GET)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#single-token-get",
    "category": "1inch",
    "headings": [],
    "excerpt": "Single Token (GET) (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#multiple-tokens-post",
    "title": "get-prices-by-tokens - Multiple Tokens (POST)",
    "content": "Multiple Tokens (POST)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#multiple-tokens-post",
    "category": "1inch",
    "headings": [],
    "excerpt": "Multiple Tokens (POST) (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#parameters",
    "title": "get-prices-by-tokens - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#path-parameters",
    "title": "get-prices-by-tokens - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#query-parameters-get-only",
    "title": "get-prices-by-tokens - Query Parameters (GET only)",
    "content": "Query Parameters (GET only)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#query-parameters-get-only",
    "category": "1inch",
    "headings": [],
    "excerpt": "Query Parameters (GET only) (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#request-body-post-only",
    "title": "get-prices-by-tokens - Request Body (POST only)",
    "content": "Request Body (POST only)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#request-body-post-only",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Body (POST only) (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#authentication",
    "title": "get-prices-by-tokens - Authentication",
    "content": "Authentication",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#authentication",
    "category": "1inch",
    "headings": [],
    "excerpt": "Authentication (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#request-examples",
    "title": "get-prices-by-tokens - Request Examples",
    "content": "Request Examples",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#request-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Examples (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#single-token-get",
    "title": "get-prices-by-tokens - Single Token (GET)",
    "content": "Single Token (GET)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#single-token-get",
    "category": "1inch",
    "headings": [],
    "excerpt": "Single Token (GET) (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#multiple-tokens-post",
    "title": "get-prices-by-tokens - Multiple Tokens (POST)",
    "content": "Multiple Tokens (POST)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#multiple-tokens-post",
    "category": "1inch",
    "headings": [],
    "excerpt": "Multiple Tokens (POST) (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#usage",
    "title": "get-prices-by-tokens - Usage",
    "content": "Usage",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#usage",
    "category": "1inch",
    "headings": [],
    "excerpt": "Usage (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#response-format",
    "title": "get-prices-by-tokens - Response Format",
    "content": "Response Format",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#response-format",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response Format (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#single-token-get",
    "title": "get-prices-by-tokens - Single Token (GET)",
    "content": "Single Token (GET)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#single-token-get",
    "category": "1inch",
    "headings": [],
    "excerpt": "Single Token (GET) (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#multiple-tokens-post",
    "title": "get-prices-by-tokens - Multiple Tokens (POST)",
    "content": "Multiple Tokens (POST)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#multiple-tokens-post",
    "category": "1inch",
    "headings": [],
    "excerpt": "Multiple Tokens (POST) (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#currency-support",
    "title": "get-prices-by-tokens - Currency Support",
    "content": "Currency Support",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#currency-support",
    "category": "1inch",
    "headings": [],
    "excerpt": "Currency Support (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#available-currencies",
    "title": "get-prices-by-tokens - Available Currencies",
    "content": "Available Currencies",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#available-currencies",
    "category": "1inch",
    "headings": [],
    "excerpt": "Available Currencies (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#currency-examples",
    "title": "get-prices-by-tokens - Currency Examples",
    "content": "Currency Examples",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#currency-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Currency Examples (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#advanced-usage-examples",
    "title": "get-prices-by-tokens - Advanced Usage Examples",
    "content": "Advanced Usage Examples",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#advanced-usage-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Advanced Usage Examples (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#portfolio-price-tracking",
    "title": "get-prices-by-tokens - Portfolio Price Tracking",
    "content": "Portfolio Price Tracking",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#portfolio-price-tracking",
    "category": "1inch",
    "headings": [],
    "excerpt": "Portfolio Price Tracking (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#price-alert-system",
    "title": "get-prices-by-tokens - Price Alert System",
    "content": "Price Alert System",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#price-alert-system",
    "category": "1inch",
    "headings": [],
    "excerpt": "Price Alert System (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#price-comparison-tool",
    "title": "get-prices-by-tokens - Price Comparison Tool",
    "content": "Price Comparison Tool",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#price-comparison-tool",
    "category": "1inch",
    "headings": [],
    "excerpt": "Price Comparison Tool (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#error-responses",
    "title": "get-prices-by-tokens - Error Responses",
    "content": "Error Responses",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#error-responses",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Responses (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#400-bad-request",
    "title": "get-prices-by-tokens - 400 Bad Request",
    "content": "400 Bad Request",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#400-bad-request",
    "category": "1inch",
    "headings": [],
    "excerpt": "400 Bad Request (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#401-unauthorized",
    "title": "get-prices-by-tokens - 401 Unauthorized",
    "content": "401 Unauthorized",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#401-unauthorized",
    "category": "1inch",
    "headings": [],
    "excerpt": "401 Unauthorized (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#404-not-found",
    "title": "get-prices-by-tokens - 404 Not Found",
    "content": "404 Not Found",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#404-not-found",
    "category": "1inch",
    "headings": [],
    "excerpt": "404 Not Found (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#429-too-many-requests",
    "title": "get-prices-by-tokens - 429 Too Many Requests",
    "content": "429 Too Many Requests",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#429-too-many-requests",
    "category": "1inch",
    "headings": [],
    "excerpt": "429 Too Many Requests (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#500-internal-server-error",
    "title": "get-prices-by-tokens - 500 Internal Server Error",
    "content": "500 Internal Server Error",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#500-internal-server-error",
    "category": "1inch",
    "headings": [],
    "excerpt": "500 Internal Server Error (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#best-practices",
    "title": "get-prices-by-tokens - Best Practices",
    "content": "Best Practices",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Best Practices (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#1-use-batch-requests-for-multiple-tokens",
    "title": "get-prices-by-tokens - 1. Use Batch Requests for Multiple Tokens",
    "content": "1. Use Batch Requests for Multiple Tokens",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#1-use-batch-requests-for-multiple-tokens",
    "category": "1inch",
    "headings": [],
    "excerpt": "1. Use Batch Requests for Multiple Tokens (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#2-implement-request-caching",
    "title": "get-prices-by-tokens - 2. Implement Request Caching",
    "content": "2. Implement Request Caching",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#2-implement-request-caching",
    "category": "1inch",
    "headings": [],
    "excerpt": "2. Implement Request Caching (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#3-handle-missing-tokens-gracefully",
    "title": "get-prices-by-tokens - 3. Handle Missing Tokens Gracefully",
    "content": "3. Handle Missing Tokens Gracefully",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#3-handle-missing-tokens-gracefully",
    "category": "1inch",
    "headings": [],
    "excerpt": "3. Handle Missing Tokens Gracefully (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#4-validate-addresses-before-requests",
    "title": "get-prices-by-tokens - 4. Validate Addresses Before Requests",
    "content": "4. Validate Addresses Before Requests",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#4-validate-addresses-before-requests",
    "category": "1inch",
    "headings": [],
    "excerpt": "4. Validate Addresses Before Requests (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#rate-limiting",
    "title": "get-prices-by-tokens - Rate Limiting",
    "content": "Rate Limiting",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#rate-limiting",
    "category": "1inch",
    "headings": [],
    "excerpt": "Rate Limiting (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#related-endpoints",
    "title": "get-prices-by-tokens - Related Endpoints",
    "content": "Related Endpoints",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#related-endpoints",
    "category": "1inch",
    "headings": [],
    "excerpt": "Related Endpoints (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-prices-by-tokens#support",
    "title": "get-prices-by-tokens - Support",
    "content": "Support",
    "url": "/docs/1inch/Spot Price API/api-reference/get-prices-by-tokens#support",
    "category": "1inch",
    "headings": [],
    "excerpt": "Support (from get-prices-by-tokens)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies",
    "title": "get-all-currencies",
    "content": "Get All Currencies Retrieve all available base currencies that can be used for price denomination in the 1inch Spot Price API. graph TD subgraph \"Currency System\" CLIENT[Client Request] --> API[Currency API] API --> DB[(Currency Registry)] DB --> VALIDATE[Validate Availability] VALIDATE --> FILTER[Filter by Chain] FILTER --> RESPONSE[Currency List] RESPONSE --> CLIENT end subgraph \"Supported Currencies\" USD[USD - US Dollar] ETH[ETH - Ethereum] BTC[BTC - Bitcoin] EUR[EUR - Euro] OTHER[Other Fiat & Crypto] end RESPONSE --> USD RESPONSE --> ETH RESPONSE --> BTC RESPONSE --> EUR RESPONSE --> OTHER Endpoint GET https://api.1inch.dev/price/v1.1/{chain}/currencies Parameters Path Parameters Parameter Type Required Description chain number Yes Chain ID (1 for Ethereum, 137 for Polygon, 56 for BSC, etc.) Query Parameters This endpoint accepts no query parameters. All available currencies for the specified chain are returned. Authentication All requests require authentication using a Bearer token in the Authorization header: Authorization: Bearer YOUR_API_KEY Request Examples cURL curl -X GET \"https://api.1inch.dev/price/v1.1/1/currencies\" \\ -H \"Authorization: Bearer T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\" \\ -H \"Accept: application/json\" JavaScript (axios) const axios = require(\"axios\"); async function getAllCurrencies(chainId = 1) { const url = `https://api.1inch.dev/price/v1.1/${chainId}/currencies`; const config = { headers: { Authorization: \"Bearer T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\", Accept: \"application/json\" } }; try { const response = await axios.get(url, config); console.log(\"Available currencies:\", response.data); return response.data; } catch (error) { console.error(\"Error fetching currencies:\", error.response?.data || error.message); throw error; } } getAllCurrencies(); JavaScript (fetch) async function getCurrencies(chainId = 1, apiKey = \"T4l6ro3uDEfeBY4ROtslRUjUhacPmBgu\") { const response = await fetch(`https://api.1inch.dev/price/v1.1/${chainId}/currencies`, { method: 'GET', headers: { 'Authorization': `Bearer ${apiKey}`, 'Accept': 'application/json' } }); if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`); } return await response.json(); } // Usage getCurrencies(1) .then(currencies => console.log(currencies)) .catch(console.error); Python (requests) import requests import json def get_all_currencies(chain_id=1, api_key=\"T4l6ro3uDEfeBY4ROtslRUjUhacePmBgu\"): url = f\"https://api.1inch.dev/price/v1.1/{chain_id}/currencies\" headers = { \"Authorization\": f\"Bearer {api_key}\", \"Accept\": \"application/json\" } try: response = requests.get(url, headers=headers) response.raise_for_status() currencies = response.json() print(f\"Available currencies for chain {chain_id}:\") print(json.dumps(currencies, indent=2)) return currencies except requests.exceptions.RequestException as e: print(f\"Error fetching currencies: {e}\") raise # Usage currencies = get_all_currencies() Go package main import ( \"encoding/json\" \"fmt\" \"io\" \"net/http\" ) type CurrencyResponse struct { Currencies []string `json:\"currencies\"` } func getAllCurrencies(chainID int, apiKey string) ([]string, error) { url := fmt.Sprintf(\"https://api.1inch.dev/price/v1.1/%d/currencies\", chainID) req, err := http.NewRequest(\"GET\", url, nil) if err != nil { return nil, err } req.Header.Set(\"Authorization\", \"Bearer \"+apiKey) req.Header.Set(\"Accept\", \"application/json\") client := &http.Client{} resp, err := client.Do(req) if err != nil { return nil, err } defer resp.Body.Close() body, err := io.ReadAll(resp.Body) if err != nil { return nil, err } var currencies []string err = json.Unmarshal(body, &currencies) return currencies, err } func main() { currencies, err := getAllCurrencies(1, \"T4l6ro3uDEfeBY4ROtslRUjUhacePmBgu\") if err != nil { panic(err) } fmt.Printf(\"Available currencies: %v\\n\", currencies) } Response Success Response (200) Returns a JSON array containing all available currency codes that can be used as base currencies for price requests. Response Schema Field Type Description currencies array Array of currency code strings Example Response [ \"USD\", \"EUR\", \"GBP\", \"JPY\", \"ETH\", \"BTC\", \"BNB\", \"MATIC\" ] Response Format Notes: Currency codes are returned as uppercase strings Includes both fiat currencies (USD, EUR, etc.) and cryptocurrency base currencies Available currencies may vary by blockchain network The list is ordered alphabetically Supported Currencies by Network Ethereum (Chain ID: 1) Currency Type Description USD Fiat US Dollar (default) EUR Fiat Euro GBP Fiat British Pound JPY Fiat Japanese Yen ETH Crypto Ethereum BTC Crypto Bitcoin USDC Stablecoin USD Coin USDT Stablecoin Tether USD Polygon (Chain ID: 137) Currency Type Description USD Fiat US Dollar (default) EUR Fiat Euro MATIC Crypto Polygon native token ETH Crypto Ethereum BTC Crypto Bitcoin USDC Stablecoin USD Coin BSC (Chain ID: 56) Currency Type Description USD Fiat US Dollar (default) EUR Fiat Euro BNB Crypto Binance Coin ETH Crypto Ethereum BTC Crypto Bitcoin BUSD Stablecoin Binance USD Usage Examples Currency Selection Interface Build a currency picker for your application: async function buildCurrencySelector(chainId = 1) { try { const currencies = await getAllCurrencies(chainId); const currencyInfo = { USD: { symbol: '$', name: 'US Dollar', type: 'fiat' }, EUR: { symbol: 'ÔøΩ', name: 'Euro', type: 'fiat' }, GBP: { symbol: 'ÔøΩ', name: 'British Pound', type: 'fiat' }, ETH: { symbol: 'ÔøΩ', name: 'Ethereum', type: 'crypto' }, BTC: { symbol: 'ÔøΩ', name: 'Bitcoin', type: 'crypto' }, BNB: { symbol: 'BNB', name: 'Binance Coin', type: 'crypto' }, MATIC: { symbol: 'MATIC', name: 'Polygon', type: 'crypto' } }; const selector = currencies.map(code => ({ code, ...currencyInfo[code], displayName: `${currencyInfo[code]?.symbol || ''} ${currencyInfo[code]?.name || code}` })); console.log('Currency selector options:', selector); return selector; } catch (error) { console.error('Failed to build currency selector:', error); return []; } } buildCurrencySelector(1); Multi-Currency Price Fetching Get prices in multiple currencies: async function getMultiCurrencyPrices(tokenAddress, chainId = 1) { const currencies = await getAllCurrencies(chainId); const prices = {}; for (const currency of currencies) { try { const response = await axios.get( `https://api.1inch.dev/price/v1.1/${chainId}/${tokenAddress}?currency=${currency}`, { headers: { Authorization: \"Bearer T4l6ro3uDEfeBY4ROtslRUjUhacePmBgu\" } } ); prices[currency] = response.data[tokenAddress]; } catch (error) { console.warn(`Failed to get price in ${currency}:`, error.message); prices[currency] = null; } } return prices; } // Usage: Get WETH prices in all available currencies getMultiCurrencyPrices(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\") .then(prices => { console.log(\"WETH prices in different currencies:\"); for (const [currency, price] of Object.entries(prices)) { if (price) { console.log(`${currency}: ${price}`); } } }); Currency Validation Validate currency codes before making price requests: class CurrencyValidator { constructor(apiKey, chainId = 1) { this.apiKey = apiKey; this.chainId = chainId; this.supportedCurrencies = null; this.lastUpdated = null; } async getSupportedCurrencies() { // Cache currencies for 1 hour if (this.supportedCurrencies && this.lastUpdated && Date.now() - this.lastUpdated < 3600000) { return this.supportedCurrencies; } try { const currencies = await getAllCurrencies(this.chainId); this.supportedCurrencies = new Set(currencies); this.lastUpdated = Date.now(); return this.supportedCurrencies; } catch (error) { console.error('Failed to fetch supported currencies:', error); // Return cached currencies if available return this.supportedCurrencies || new Set(['USD']); } } async isValidCurrency(currency) { const supported = await this.getSupportedCurrencies(); return supported.has(currency.toUpperCase()); } async validateAndNormalize(currency) { const normalized = currency.toUpperCase(); const isValid = await this.isValidCurrency(normalized); if (!isValid) { throw new Error(`Unsupported currency: ${currency}. Use one of: ${Array.from(await this.getSupportedCurrencies()).join(', ')}`); } return normalized; } } // Usage const validator = new CurrencyValidator(\"YOUR_API_KEY\", 1); async function validateCurrencyInput(userInput) { try { const validCurrency = await validator.validateAndNormalize(userInput); console.log(`\u0013 Valid currency: ${validCurrency}`); return validCurrency; } catch (error) { console.error(`\u0017 ${error.message}`); return null; } } // Test various inputs validateCurrencyInput(\"usd\"); // \u0013 Valid currency: USD validateCurrencyInput(\"eth\"); // \u0013 Valid currency: ETH validateCurrencyInput(\"xyz\"); // \u0017 Unsupported currency: xyz Error Responses 400 Bad Request Invalid chain ID or malformed request. { \"error\": \"Invalid chain ID\", \"description\": \"Chain ID must be a positive integer\", \"statusCode\": 400 } 401 Unauthorized Invalid or missing API key. { \"error\": \"Unauthorized\", \"description\": \"Invalid API key or missing Authorization header\", \"statusCode\": 401 } 404 Not Found Chain not supported or currencies not available. { \"error\": \"Chain not supported\", \"description\": \"The requested chain ID is not currently supported\", \"statusCode\": 404 } 429 Too Many Requests Rate limit exceeded. { \"error\": \"Rate limit exceeded\", \"description\": \"Too many requests. Please retry after some time\", \"statusCode\": 429, \"retryAfter\": 60 } 500 Internal Server Error Server-side error occurred. { \"error\": \"Internal server error\", \"description\": \"An unexpected error occurred while processing the request\", \"statusCode\": 500 } Best Practices 1. Cache Currency Lists Cache the currency list to avoid repeated API calls: const NodeCache = require(\"node-cache\"); const currencyCache = new NodeCache({ stdTTL: 3600 }); // 1 hour cache async function getCachedCurrencies(chainId) { const cacheKey = `currencies-${chainId}`; let currencies = currencyCache.get(cacheKey); if (!currencies) { currencies = await getAllCurrencies(chainId); currencyCache.set(cacheKey, currencies); } return currencies; } 2. Handle Currency Fallbacks Provide fallback currencies when the preferred one is unavailable: async function getPriceWithFallback(tokenAddress, preferredCurrency, chainId = 1) { const fallbackCurrencies = ['USD', 'ETH', 'BTC']; const supportedCurrencies = await getAllCurrencies(chainId); // Try preferred currency first if (supportedCurrencies.includes(preferredCurrency)) { try { return await getTokenPrice(tokenAddress, preferredCurrency, chainId); } catch (error) { console.warn(`Failed to get price in ${preferredCurrency}, trying fallbacks`); } } // Try fallback currencies for (const currency of fallbackCurrencies) { if (supportedCurrencies.includes(currency)) { try { return await getTokenPrice(tokenAddress, currency, chainId); } catch (error) { console.warn(`Failed to get price in ${currency}`); } } } throw new Error('Unable to get price in any supported currency'); } 3. Build Currency Conversion Create a simple currency converter: class CurrencyConverter { constructor(apiKey) { this.apiKey = apiKey; this.exchangeRates = new Map(); this.lastUpdated = null; } async updateExchangeRates(chainId = 1) { try { // Use a reference token (like USDC) to calculate cross rates const usdcAddress = \"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\"; const currencies = await getAllCurrencies(chainId); for (const currency of currencies) { if (currency !== 'USD') { const price = await this.getTokenPriceInCurrency(usdcAddress, currency, chainId); this.exchangeRates.set(`USD_${currency}`, parseFloat(price)); } } this.lastUpdated = Date.now(); } catch (error) { console.error('Failed to update exchange rates:', error); } } convert(amount, fromCurrency, toCurrency) { if (fromCurrency === toCurrency) return amount; // Convert through USD as base let usdAmount = amount; if (fromCurrency !== 'USD') { const fromRate = this.exchangeRates.get(`USD_${fromCurrency}`); if (!fromRate) throw new Error(`No exchange rate for ${fromCurrency}`); usdAmount = amount / fromRate; } if (toCurrency === 'USD') return usdAmount; const toRate = this.exchangeRates.get(`USD_${toCurrency}`); if (!toRate) throw new Error(`No exchange rate for ${toCurrency}`); return usdAmount * toRate; } } Use Cases Portfolio Valuation Calculate portfolio values in user's preferred currency: async function calculatePortfolioValue(holdings, preferredCurrency = 'USD', chainId = 1) { const currencies = await getAllCurrencies(chainId); if (!currencies.includes(preferredCurrency)) { throw new Error(`Currency ${preferredCurrency} not supported on chain ${chainId}`); } let totalValue = 0; for (const holding of holdings) { try { const price = await getTokenPriceInCurrency( holding.tokenAddress, preferredCurrency, chainId ); const value = holding.amount * parseFloat(price); totalValue += value; console.log(`${holding.symbol}: ${holding.amount} ÔøΩ ${price} ${preferredCurrency} = ${value.toFixed(2)} ${preferredCurrency}`); } catch (error) { console.warn(`Failed to get price for ${holding.symbol}:`, error.message); } } return totalValue; } Multi-Currency Analytics Build analytics dashboards supporting multiple currencies: async function buildCurrencyAnalytics(tokenAddress, chainId = 1) { const currencies = await getAllCurrencies(chainId); const analytics = { tokenAddress, chainId, timestamp: Date.now(), prices: {}, volatility: {}, trends: {} }; // Get current prices in all currencies for (const currency of currencies) { try { const price = await getTokenPriceInCurrency(tokenAddress, currency, chainId); analytics.prices[currency] = parseFloat(price); } catch (error) { console.warn(`Failed to get ${currency} price:`, error.message); } } return analytics; } Related Endpoints Get All Prices - Get prices for all tokens Get Prices by Tokens - Get prices for specific tokens with currency options API Overview - Complete API documentation Support For technical issues or questions about this endpoint: 1inch Developer Portal API Documentation Community Discord",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Get All Currencies",
        "anchor": "get-all-currencies"
      },
      {
        "level": 2,
        "text": "Endpoint",
        "anchor": "endpoint"
      },
      {
        "level": 2,
        "text": "Parameters",
        "anchor": "parameters"
      },
      {
        "level": 3,
        "text": "Path Parameters",
        "anchor": "path-parameters"
      },
      {
        "level": 3,
        "text": "Query Parameters",
        "anchor": "query-parameters"
      },
      {
        "level": 2,
        "text": "Authentication",
        "anchor": "authentication"
      },
      {
        "level": 2,
        "text": "Request Examples",
        "anchor": "request-examples"
      },
      {
        "level": 3,
        "text": "cURL",
        "anchor": "curl"
      },
      {
        "level": 3,
        "text": "JavaScript (axios)",
        "anchor": "javascript-axios"
      },
      {
        "level": 3,
        "text": "JavaScript (fetch)",
        "anchor": "javascript-fetch"
      },
      {
        "level": 3,
        "text": "Python (requests)",
        "anchor": "python-requests"
      },
      {
        "level": 1,
        "text": "Usage",
        "anchor": "usage"
      },
      {
        "level": 3,
        "text": "Go",
        "anchor": "go"
      },
      {
        "level": 2,
        "text": "Response",
        "anchor": "response"
      },
      {
        "level": 3,
        "text": "Success Response (200)",
        "anchor": "success-response-200"
      },
      {
        "level": 3,
        "text": "Response Schema",
        "anchor": "response-schema"
      },
      {
        "level": 3,
        "text": "Example Response",
        "anchor": "example-response"
      },
      {
        "level": 2,
        "text": "Supported Currencies by Network",
        "anchor": "supported-currencies-by-network"
      },
      {
        "level": 3,
        "text": "Ethereum (Chain ID: 1)",
        "anchor": "ethereum-chain-id-1"
      },
      {
        "level": 3,
        "text": "Polygon (Chain ID: 137)",
        "anchor": "polygon-chain-id-137"
      },
      {
        "level": 3,
        "text": "BSC (Chain ID: 56)",
        "anchor": "bsc-chain-id-56"
      },
      {
        "level": 2,
        "text": "Usage Examples",
        "anchor": "usage-examples"
      },
      {
        "level": 3,
        "text": "Currency Selection Interface",
        "anchor": "currency-selection-interface"
      },
      {
        "level": 3,
        "text": "Multi-Currency Price Fetching",
        "anchor": "multi-currency-price-fetching"
      },
      {
        "level": 3,
        "text": "Currency Validation",
        "anchor": "currency-validation"
      },
      {
        "level": 2,
        "text": "Error Responses",
        "anchor": "error-responses"
      },
      {
        "level": 3,
        "text": "400 Bad Request",
        "anchor": "400-bad-request"
      },
      {
        "level": 3,
        "text": "401 Unauthorized",
        "anchor": "401-unauthorized"
      },
      {
        "level": 3,
        "text": "404 Not Found",
        "anchor": "404-not-found"
      },
      {
        "level": 3,
        "text": "429 Too Many Requests",
        "anchor": "429-too-many-requests"
      },
      {
        "level": 3,
        "text": "500 Internal Server Error",
        "anchor": "500-internal-server-error"
      },
      {
        "level": 2,
        "text": "Best Practices",
        "anchor": "best-practices"
      },
      {
        "level": 3,
        "text": "1. Cache Currency Lists",
        "anchor": "1-cache-currency-lists"
      },
      {
        "level": 3,
        "text": "2. Handle Currency Fallbacks",
        "anchor": "2-handle-currency-fallbacks"
      },
      {
        "level": 3,
        "text": "3. Build Currency Conversion",
        "anchor": "3-build-currency-conversion"
      },
      {
        "level": 2,
        "text": "Use Cases",
        "anchor": "use-cases"
      },
      {
        "level": 3,
        "text": "Portfolio Valuation",
        "anchor": "portfolio-valuation"
      },
      {
        "level": 3,
        "text": "Multi-Currency Analytics",
        "anchor": "multi-currency-analytics"
      },
      {
        "level": 2,
        "text": "Related Endpoints",
        "anchor": "related-endpoints"
      },
      {
        "level": 2,
        "text": "Support",
        "anchor": "support"
      }
    ],
    "excerpt": "Get All Currencies Retrieve all available base currencies that can be used for price denomination in the 1inch Spot Price API. graph TD subgraph \"Currency System\" CLIENT[Client Request] --> API[Curren..."
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#get-all-currencies",
    "title": "get-all-currencies - Get All Currencies",
    "content": "Get All Currencies",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#get-all-currencies",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get All Currencies (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#endpoint",
    "title": "get-all-currencies - Endpoint",
    "content": "Endpoint",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#endpoint",
    "category": "1inch",
    "headings": [],
    "excerpt": "Endpoint (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#parameters",
    "title": "get-all-currencies - Parameters",
    "content": "Parameters",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameters (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#path-parameters",
    "title": "get-all-currencies - Path Parameters",
    "content": "Path Parameters",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#path-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Path Parameters (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#query-parameters",
    "title": "get-all-currencies - Query Parameters",
    "content": "Query Parameters",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#query-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Query Parameters (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#authentication",
    "title": "get-all-currencies - Authentication",
    "content": "Authentication",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#authentication",
    "category": "1inch",
    "headings": [],
    "excerpt": "Authentication (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#request-examples",
    "title": "get-all-currencies - Request Examples",
    "content": "Request Examples",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#request-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Request Examples (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#curl",
    "title": "get-all-currencies - cURL",
    "content": "cURL",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#curl",
    "category": "1inch",
    "headings": [],
    "excerpt": "cURL (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#javascript-axios",
    "title": "get-all-currencies - JavaScript (axios)",
    "content": "JavaScript (axios)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#javascript-axios",
    "category": "1inch",
    "headings": [],
    "excerpt": "JavaScript (axios) (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#javascript-fetch",
    "title": "get-all-currencies - JavaScript (fetch)",
    "content": "JavaScript (fetch)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#javascript-fetch",
    "category": "1inch",
    "headings": [],
    "excerpt": "JavaScript (fetch) (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#python-requests",
    "title": "get-all-currencies - Python (requests)",
    "content": "Python (requests)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#python-requests",
    "category": "1inch",
    "headings": [],
    "excerpt": "Python (requests) (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#usage",
    "title": "get-all-currencies - Usage",
    "content": "Usage",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#usage",
    "category": "1inch",
    "headings": [],
    "excerpt": "Usage (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#go",
    "title": "get-all-currencies - Go",
    "content": "Go",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#go",
    "category": "1inch",
    "headings": [],
    "excerpt": "Go (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#response",
    "title": "get-all-currencies - Response",
    "content": "Response",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#success-response-200",
    "title": "get-all-currencies - Success Response (200)",
    "content": "Success Response (200)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#success-response-200",
    "category": "1inch",
    "headings": [],
    "excerpt": "Success Response (200) (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#response-schema",
    "title": "get-all-currencies - Response Schema",
    "content": "Response Schema",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#response-schema",
    "category": "1inch",
    "headings": [],
    "excerpt": "Response Schema (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#example-response",
    "title": "get-all-currencies - Example Response",
    "content": "Example Response",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#example-response",
    "category": "1inch",
    "headings": [],
    "excerpt": "Example Response (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#supported-currencies-by-network",
    "title": "get-all-currencies - Supported Currencies by Network",
    "content": "Supported Currencies by Network",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#supported-currencies-by-network",
    "category": "1inch",
    "headings": [],
    "excerpt": "Supported Currencies by Network (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#ethereum-chain-id-1",
    "title": "get-all-currencies - Ethereum (Chain ID: 1)",
    "content": "Ethereum (Chain ID: 1)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#ethereum-chain-id-1",
    "category": "1inch",
    "headings": [],
    "excerpt": "Ethereum (Chain ID: 1) (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#polygon-chain-id-137",
    "title": "get-all-currencies - Polygon (Chain ID: 137)",
    "content": "Polygon (Chain ID: 137)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#polygon-chain-id-137",
    "category": "1inch",
    "headings": [],
    "excerpt": "Polygon (Chain ID: 137) (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#bsc-chain-id-56",
    "title": "get-all-currencies - BSC (Chain ID: 56)",
    "content": "BSC (Chain ID: 56)",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#bsc-chain-id-56",
    "category": "1inch",
    "headings": [],
    "excerpt": "BSC (Chain ID: 56) (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#usage-examples",
    "title": "get-all-currencies - Usage Examples",
    "content": "Usage Examples",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#usage-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Usage Examples (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#currency-selection-interface",
    "title": "get-all-currencies - Currency Selection Interface",
    "content": "Currency Selection Interface",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#currency-selection-interface",
    "category": "1inch",
    "headings": [],
    "excerpt": "Currency Selection Interface (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#multi-currency-price-fetching",
    "title": "get-all-currencies - Multi-Currency Price Fetching",
    "content": "Multi-Currency Price Fetching",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#multi-currency-price-fetching",
    "category": "1inch",
    "headings": [],
    "excerpt": "Multi-Currency Price Fetching (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#currency-validation",
    "title": "get-all-currencies - Currency Validation",
    "content": "Currency Validation",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#currency-validation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Currency Validation (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#error-responses",
    "title": "get-all-currencies - Error Responses",
    "content": "Error Responses",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#error-responses",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Responses (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#400-bad-request",
    "title": "get-all-currencies - 400 Bad Request",
    "content": "400 Bad Request",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#400-bad-request",
    "category": "1inch",
    "headings": [],
    "excerpt": "400 Bad Request (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#401-unauthorized",
    "title": "get-all-currencies - 401 Unauthorized",
    "content": "401 Unauthorized",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#401-unauthorized",
    "category": "1inch",
    "headings": [],
    "excerpt": "401 Unauthorized (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#404-not-found",
    "title": "get-all-currencies - 404 Not Found",
    "content": "404 Not Found",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#404-not-found",
    "category": "1inch",
    "headings": [],
    "excerpt": "404 Not Found (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#429-too-many-requests",
    "title": "get-all-currencies - 429 Too Many Requests",
    "content": "429 Too Many Requests",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#429-too-many-requests",
    "category": "1inch",
    "headings": [],
    "excerpt": "429 Too Many Requests (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#500-internal-server-error",
    "title": "get-all-currencies - 500 Internal Server Error",
    "content": "500 Internal Server Error",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#500-internal-server-error",
    "category": "1inch",
    "headings": [],
    "excerpt": "500 Internal Server Error (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#best-practices",
    "title": "get-all-currencies - Best Practices",
    "content": "Best Practices",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Best Practices (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#1-cache-currency-lists",
    "title": "get-all-currencies - 1. Cache Currency Lists",
    "content": "1. Cache Currency Lists",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#1-cache-currency-lists",
    "category": "1inch",
    "headings": [],
    "excerpt": "1. Cache Currency Lists (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#2-handle-currency-fallbacks",
    "title": "get-all-currencies - 2. Handle Currency Fallbacks",
    "content": "2. Handle Currency Fallbacks",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#2-handle-currency-fallbacks",
    "category": "1inch",
    "headings": [],
    "excerpt": "2. Handle Currency Fallbacks (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#3-build-currency-conversion",
    "title": "get-all-currencies - 3. Build Currency Conversion",
    "content": "3. Build Currency Conversion",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#3-build-currency-conversion",
    "category": "1inch",
    "headings": [],
    "excerpt": "3. Build Currency Conversion (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#use-cases",
    "title": "get-all-currencies - Use Cases",
    "content": "Use Cases",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#use-cases",
    "category": "1inch",
    "headings": [],
    "excerpt": "Use Cases (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#portfolio-valuation",
    "title": "get-all-currencies - Portfolio Valuation",
    "content": "Portfolio Valuation",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#portfolio-valuation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Portfolio Valuation (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#multi-currency-analytics",
    "title": "get-all-currencies - Multi-Currency Analytics",
    "content": "Multi-Currency Analytics",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#multi-currency-analytics",
    "category": "1inch",
    "headings": [],
    "excerpt": "Multi-Currency Analytics (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#related-endpoints",
    "title": "get-all-currencies - Related Endpoints",
    "content": "Related Endpoints",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#related-endpoints",
    "category": "1inch",
    "headings": [],
    "excerpt": "Related Endpoints (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/api-reference/get-all-currencies#support",
    "title": "get-all-currencies - Support",
    "content": "Support",
    "url": "/docs/1inch/Spot Price API/api-reference/get-all-currencies#support",
    "category": "1inch",
    "headings": [],
    "excerpt": "Support (from get-all-currencies)"
  },
  {
    "id": "1inch/Spot Price API/quickstart",
    "title": "quickstart",
    "content": "Quickstart Guide Get started with the 1inch Spot Price API in minutes. This guide will walk you through the basic setup and common usage patterns. Prerequisites API Key from 1inch Developer Portal Basic knowledge of REST APIs HTTP client (cURL, Postman, or your preferred programming language) Quick Setup 1. Obtain Your API Key Visit the 1inch Developer Portal Create an account or sign in Generate a new API key for the Spot Price API Copy and securely store your API key 2. Test Your Connection Use cURL to verify your API key works: curl -X GET \"https://api.1inch.dev/price/v1.1/1\" \\ -H \"Authorization: Bearer YOUR_API_KEY_HERE\" Expected Response: { \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\": \"3500.123456789\", \"0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7\": \"1.987654321\", \"...\" } Common Usage Patterns Get All Token Prices Retrieve prices for all whitelisted tokens on Ethereum: const axios = require('axios'); async function getAllPrices() { const response = await axios.get('https://api.1inch.dev/price/v1.1/1', { headers: { 'Authorization': 'Bearer YOUR_API_KEY_HERE' } }); console.log('All token prices:', response.data); return response.data; } getAllPrices(); Get Specific Token Price Get the price for a single token (e.g., WETH): async function getSingleTokenPrice() { const wethAddress = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'; const response = await axios.get( `https://api.1inch.dev/price/v1.1/1/${wethAddress}?currency=USD`, { headers: { 'Authorization': 'Bearer YOUR_API_KEY_HERE' } } ); console.log('WETH price:', response.data); return response.data; } getSingleTokenPrice(); Batch Price Requests Get prices for multiple specific tokens in one request: async function getBatchPrices() { const tokens = [ '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', // WETH '0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7', // USDC '0x6b175474e89094c44da98b954eedeac495271d0f' // DAI ]; const response = await axios.post('https://api.1inch.dev/price/v1.1/1', { tokens: tokens, currency: 'USD' }, { headers: { 'Authorization': 'Bearer YOUR_API_KEY_HERE', 'Content-Type': 'application/json' } }); console.log('Batch prices:', response.data); return response.data; } getBatchPrices(); Multi-Chain Price Fetching Get prices from different blockchain networks: async function getMultiChainPrices() { const chains = [ { id: 1, name: 'Ethereum' }, { id: 137, name: 'Polygon' }, { id: 56, name: 'BSC' } ]; const results = {}; for (const chain of chains) { try { const response = await axios.get(`https://api.1inch.dev/price/v1.1/${chain.id}`, { headers: { 'Authorization': 'Bearer YOUR_API_KEY_HERE' } }); results[chain.name] = response.data; } catch (error) { console.error(`Error fetching prices for ${chain.name}:`, error.message); } } return results; } getMultiChainPrices(); Complete Example: Portfolio Tracker Here's a complete example that tracks a portfolio value: const axios = require('axios'); class Portfolio { constructor(apiKey) { this.apiKey = apiKey; this.baseUrl = 'https://api.1inch.dev/price/v1.1'; this.holdings = new Map(); } // Add a token holding to the portfolio addHolding(tokenAddress, amount, chainId = 1) { const key = `${chainId}-${tokenAddress.toLowerCase()}`; this.holdings.set(key, { tokenAddress: tokenAddress.toLowerCase(), amount: parseFloat(amount), chainId }); } // Get current prices for all holdings async getCurrentPrices() { const pricesByChain = new Map(); // Group holdings by chain for (const [key, holding] of this.holdings) { if (!pricesByChain.has(holding.chainId)) { pricesByChain.set(holding.chainId, []); } pricesByChain.get(holding.chainId).push(holding.tokenAddress); } const allPrices = new Map(); // Fetch prices for each chain for (const [chainId, tokens] of pricesByChain) { try { const response = await axios.post(`${this.baseUrl}/${chainId}`, { tokens: tokens, currency: 'USD' }, { headers: { 'Authorization': `Bearer ${this.apiKey}`, 'Content-Type': 'application/json' } }); // Store prices with chain prefix for (const [address, price] of Object.entries(response.data)) { allPrices.set(`${chainId}-${address}`, parseFloat(price)); } } catch (error) { console.error(`Error fetching prices for chain ${chainId}:`, error.message); } } return allPrices; } // Calculate total portfolio value async getTotalValue() { const prices = await this.getCurrentPrices(); let totalValue = 0; for (const [key, holding] of this.holdings) { const price = prices.get(key); if (price) { const value = holding.amount * price; totalValue += value; console.log(`${holding.tokenAddress}: ${holding.amount} tokens @ $${price} = $${value.toFixed(2)}`); } else { console.warn(`No price found for ${holding.tokenAddress} on chain ${holding.chainId}`); } } return totalValue; } } // Usage example async function main() { const portfolio = new Portfolio('YOUR_API_KEY_HERE'); // Add some holdings (token address, amount, chain ID) portfolio.addHolding('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', 1.5, 1); // 1.5 WETH on Ethereum portfolio.addHolding('0xa0b86a33e6b2d4d51c7c3a9b78d2f8b9c4d5e6f7', 1000, 1); // 1000 USDC on Ethereum portfolio.addHolding('0x2791bca1f2de4661ed88a30c99a7a9449aa84174', 500, 137); // 500 USDC on Polygon const totalValue = await portfolio.getTotalValue(); console.log(`\\nTotal Portfolio Value: $${totalValue.toFixed(2)}`); } main().catch(console.error); Error Handling Best Practices Always implement proper error handling: async function robustPriceRequest(tokenAddress, chainId = 1, retries = 3) { for (let attempt = 1; attempt <= retries; attempt++) { try { const response = await axios.get( `https://api.1inch.dev/price/v1.1/${chainId}/${tokenAddress}`, { headers: { 'Authorization': 'Bearer YOUR_API_KEY_HERE' }, timeout: 5000 // 5 second timeout } ); return response.data; } catch (error) { console.warn(`Attempt ${attempt} failed:`, error.message); if (attempt === retries) { throw new Error(`Failed to fetch price after ${retries} attempts: ${error.message}`); } // Exponential backoff const delay = Math.pow(2, attempt) * 1000; await new Promise(resolve => setTimeout(resolve, delay)); } } } Rate Limiting Implement rate limiting to stay within API limits: class RateLimitedPriceClient { constructor(apiKey, requestsPerMinute = 100) { this.apiKey = apiKey; this.requestQueue = []; this.requestTimes = []; this.maxRequests = requestsPerMinute; // Process queue every second setInterval(() => this.processQueue(), 1000); } async getPrice(tokenAddress, chainId = 1) { return new Promise((resolve, reject) => { this.requestQueue.push({ tokenAddress, chainId, resolve, reject, timestamp: Date.now() }); }); } async processQueue() { if (this.requestQueue.length === 0) return; // Clean old request times (older than 1 minute) const oneMinuteAgo = Date.now() - 60000; this.requestTimes = this.requestTimes.filter(time => time > oneMinuteAgo); // Check if we can make more requests if (this.requestTimes.length >= this.maxRequests) { return; // Rate limit reached, wait for next cycle } const request = this.requestQueue.shift(); this.requestTimes.push(Date.now()); try { const response = await axios.get( `https://api.1inch.dev/price/v1.1/${request.chainId}/${request.tokenAddress}`, { headers: { 'Authorization': `Bearer ${this.apiKey}` } } ); request.resolve(response.data); } catch (error) { request.reject(error); } } } Environment Setup Create a .env file for your API configuration: # .env file ONEINCH_API_KEY=your_api_key_here DEFAULT_CHAIN_ID=1 CACHE_TTL=30000 // config.js require('dotenv').config(); module.exports = { apiKey: process.env.ONEINCH_API_KEY, defaultChainId: parseInt(process.env.DEFAULT_CHAIN_ID) || 1, cacheTtl: parseInt(process.env.CACHE_TTL) || 30000 }; Next Steps Now that you're familiar with the basics: Explore Advanced Features : Check out the API Reference for detailed endpoint documentation Implement Caching : Add Redis or in-memory caching for better performance Add Monitoring : Set up logging and monitoring for production use Scale Your Integration : Consider batch processing and connection pooling Troubleshooting Common Issues Invalid API Key Error (401) Verify your API key is correct Check that you're using the Bearer token format Ensure your API key has the necessary permissions Rate Limit Exceeded (429) Implement request throttling Consider upgrading your API plan Add retry logic with exponential backoff Token Not Found (404) Verify the token address is correct and checksummed Check if the token is whitelisted on the specified chain Ensure you're using the correct chain ID Network Timeout Implement connection timeouts Add retry logic for transient failures Consider using connection pooling Getting Help API Reference Documentation 1inch Developer Portal Community Discord",
    "url": "/docs/1inch/Spot Price API/quickstart",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Quickstart Guide",
        "anchor": "quickstart-guide"
      },
      {
        "level": 2,
        "text": "Prerequisites",
        "anchor": "prerequisites"
      },
      {
        "level": 2,
        "text": "Quick Setup",
        "anchor": "quick-setup"
      },
      {
        "level": 3,
        "text": "1. Obtain Your API Key",
        "anchor": "1-obtain-your-api-key"
      },
      {
        "level": 3,
        "text": "2. Test Your Connection",
        "anchor": "2-test-your-connection"
      },
      {
        "level": 2,
        "text": "Common Usage Patterns",
        "anchor": "common-usage-patterns"
      },
      {
        "level": 3,
        "text": "Get All Token Prices",
        "anchor": "get-all-token-prices"
      },
      {
        "level": 3,
        "text": "Get Specific Token Price",
        "anchor": "get-specific-token-price"
      },
      {
        "level": 3,
        "text": "Batch Price Requests",
        "anchor": "batch-price-requests"
      },
      {
        "level": 3,
        "text": "Multi-Chain Price Fetching",
        "anchor": "multi-chain-price-fetching"
      },
      {
        "level": 2,
        "text": "Complete Example: Portfolio Tracker",
        "anchor": "complete-example-portfolio-tracker"
      },
      {
        "level": 2,
        "text": "Error Handling Best Practices",
        "anchor": "error-handling-best-practices"
      },
      {
        "level": 2,
        "text": "Rate Limiting",
        "anchor": "rate-limiting"
      },
      {
        "level": 2,
        "text": "Environment Setup",
        "anchor": "environment-setup"
      },
      {
        "level": 1,
        "text": ".env file",
        "anchor": "env-file"
      },
      {
        "level": 2,
        "text": "Next Steps",
        "anchor": "next-steps"
      },
      {
        "level": 2,
        "text": "Troubleshooting",
        "anchor": "troubleshooting"
      },
      {
        "level": 3,
        "text": "Common Issues",
        "anchor": "common-issues"
      },
      {
        "level": 3,
        "text": "Getting Help",
        "anchor": "getting-help"
      }
    ],
    "excerpt": "Quickstart Guide Get started with the 1inch Spot Price API in minutes. This guide will walk you through the basic setup and common usage patterns. Prerequisites API Key from 1inch Developer Portal Bas..."
  },
  {
    "id": "1inch/Spot Price API/quickstart#quickstart-guide",
    "title": "quickstart - Quickstart Guide",
    "content": "Quickstart Guide",
    "url": "/docs/1inch/Spot Price API/quickstart#quickstart-guide",
    "category": "1inch",
    "headings": [],
    "excerpt": "Quickstart Guide (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#prerequisites",
    "title": "quickstart - Prerequisites",
    "content": "Prerequisites",
    "url": "/docs/1inch/Spot Price API/quickstart#prerequisites",
    "category": "1inch",
    "headings": [],
    "excerpt": "Prerequisites (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#quick-setup",
    "title": "quickstart - Quick Setup",
    "content": "Quick Setup",
    "url": "/docs/1inch/Spot Price API/quickstart#quick-setup",
    "category": "1inch",
    "headings": [],
    "excerpt": "Quick Setup (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#1-obtain-your-api-key",
    "title": "quickstart - 1. Obtain Your API Key",
    "content": "1. Obtain Your API Key",
    "url": "/docs/1inch/Spot Price API/quickstart#1-obtain-your-api-key",
    "category": "1inch",
    "headings": [],
    "excerpt": "1. Obtain Your API Key (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#2-test-your-connection",
    "title": "quickstart - 2. Test Your Connection",
    "content": "2. Test Your Connection",
    "url": "/docs/1inch/Spot Price API/quickstart#2-test-your-connection",
    "category": "1inch",
    "headings": [],
    "excerpt": "2. Test Your Connection (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#common-usage-patterns",
    "title": "quickstart - Common Usage Patterns",
    "content": "Common Usage Patterns",
    "url": "/docs/1inch/Spot Price API/quickstart#common-usage-patterns",
    "category": "1inch",
    "headings": [],
    "excerpt": "Common Usage Patterns (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#get-all-token-prices",
    "title": "quickstart - Get All Token Prices",
    "content": "Get All Token Prices",
    "url": "/docs/1inch/Spot Price API/quickstart#get-all-token-prices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get All Token Prices (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#get-specific-token-price",
    "title": "quickstart - Get Specific Token Price",
    "content": "Get Specific Token Price",
    "url": "/docs/1inch/Spot Price API/quickstart#get-specific-token-price",
    "category": "1inch",
    "headings": [],
    "excerpt": "Get Specific Token Price (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#batch-price-requests",
    "title": "quickstart - Batch Price Requests",
    "content": "Batch Price Requests",
    "url": "/docs/1inch/Spot Price API/quickstart#batch-price-requests",
    "category": "1inch",
    "headings": [],
    "excerpt": "Batch Price Requests (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#multi-chain-price-fetching",
    "title": "quickstart - Multi-Chain Price Fetching",
    "content": "Multi-Chain Price Fetching",
    "url": "/docs/1inch/Spot Price API/quickstart#multi-chain-price-fetching",
    "category": "1inch",
    "headings": [],
    "excerpt": "Multi-Chain Price Fetching (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#complete-example-portfolio-tracker",
    "title": "quickstart - Complete Example: Portfolio Tracker",
    "content": "Complete Example: Portfolio Tracker",
    "url": "/docs/1inch/Spot Price API/quickstart#complete-example-portfolio-tracker",
    "category": "1inch",
    "headings": [],
    "excerpt": "Complete Example: Portfolio Tracker (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#error-handling-best-practices",
    "title": "quickstart - Error Handling Best Practices",
    "content": "Error Handling Best Practices",
    "url": "/docs/1inch/Spot Price API/quickstart#error-handling-best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Handling Best Practices (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#rate-limiting",
    "title": "quickstart - Rate Limiting",
    "content": "Rate Limiting",
    "url": "/docs/1inch/Spot Price API/quickstart#rate-limiting",
    "category": "1inch",
    "headings": [],
    "excerpt": "Rate Limiting (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#environment-setup",
    "title": "quickstart - Environment Setup",
    "content": "Environment Setup",
    "url": "/docs/1inch/Spot Price API/quickstart#environment-setup",
    "category": "1inch",
    "headings": [],
    "excerpt": "Environment Setup (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#env-file",
    "title": "quickstart - .env file",
    "content": ".env file",
    "url": "/docs/1inch/Spot Price API/quickstart#env-file",
    "category": "1inch",
    "headings": [],
    "excerpt": ".env file (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#next-steps",
    "title": "quickstart - Next Steps",
    "content": "Next Steps",
    "url": "/docs/1inch/Spot Price API/quickstart#next-steps",
    "category": "1inch",
    "headings": [],
    "excerpt": "Next Steps (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#troubleshooting",
    "title": "quickstart - Troubleshooting",
    "content": "Troubleshooting",
    "url": "/docs/1inch/Spot Price API/quickstart#troubleshooting",
    "category": "1inch",
    "headings": [],
    "excerpt": "Troubleshooting (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#common-issues",
    "title": "quickstart - Common Issues",
    "content": "Common Issues",
    "url": "/docs/1inch/Spot Price API/quickstart#common-issues",
    "category": "1inch",
    "headings": [],
    "excerpt": "Common Issues (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/quickstart#getting-help",
    "title": "quickstart - Getting Help",
    "content": "Getting Help",
    "url": "/docs/1inch/Spot Price API/quickstart#getting-help",
    "category": "1inch",
    "headings": [],
    "excerpt": "Getting Help (from quickstart)"
  },
  {
    "id": "1inch/Spot Price API/README",
    "title": "README",
    "content": "1inch Spot Price API Documentation Welcome to the 1inch Spot Price API documentation. This API provides real-time cryptocurrency price data across multiple blockchain networks, aggregated from various decentralized exchanges. Quick Navigation Getting Started Overview - Complete API overview with features and architecture Quickstart Guide - Get up and running in minutes with examples API Reference Get All Prices - Retrieve prices for all whitelisted tokens Get Prices by Tokens - Get prices for specific tokens (single or batch) Get All Currencies - List available base currencies Key Features Multi-chain Support : Ethereum, Polygon, BSC, Arbitrum, and more Real-time Pricing : Low-latency price feeds from aggregated DEX sources Batch Requests : Query multiple tokens efficiently in single API calls Currency Flexibility : Prices in USD, EUR, ETH, BTC, and other currencies High Availability : Enterprise-grade infrastructure with 99.9% uptime Common Use Cases Use Case Best Endpoint Example Portfolio valuation Batch Prices Get prices for all holdings Single token lookup Single Price Current WETH price Market overview All Prices All Ethereum token prices Price alerts Batch Prices Monitor specific tokens Currency conversion Currencies Get available currencies Supported Networks Network Chain ID Native Token Status Ethereum 1 ETH Active Polygon 137 MATIC Active BSC 56 BNB Active Arbitrum 42161 ETH Active Optimism 10 ETH Active Avalanche 43114 AVAX Active Quick Start 1. Get Your API Key Sign up at the 1inch Developer Portal to obtain your API key. 2. Make Your First Request curl -X GET \"https://api.1inch.dev/price/v1.1/1\" \\ -H \"Authorization: Bearer YOUR_API_KEY\" 3. Integrate with Your Application const response = await fetch('https://api.1inch.dev/price/v1.1/1/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', { headers: { 'Authorization': 'Bearer YOUR_API_KEY' } }); const price = await response.json(); console.log('WETH Price:', price); Rate Limits Plan Requests/Min Daily Limit Batch Size Free 100 10,000 50 tokens Pro 1,000 100,000 200 tokens Enterprise Custom Custom Custom Documentation Structure docs/1inch/Spot Price API/ ‚îú‚îÄ‚îÄ README.md # This file - main navigation ‚îú‚îÄ‚îÄ overview.md # Complete API overview ‚îú‚îÄ‚îÄ quickstart.md # Getting started guide ‚îî‚îÄ‚îÄ api-reference/ ‚îú‚îÄ‚îÄ get-all-prices.md # Get all token prices ‚îú‚îÄ‚îÄ get-prices-by-tokens.md # Get specific token prices ‚îî‚îÄ‚îÄ get-all-currencies.md # Get available currencies Examples by Programming Language JavaScript/Node.js Portfolio tracker example Price monitoring system Batch price requests Python Basic price fetching Batch token prices Currency support Go Token price client Batch processing Error handling patterns cURL Command line examples API testing scripts Best Practices Performance Optimization Use Batch Requests : Query multiple tokens in single API calls Implement Caching : Cache responses for 30-60 seconds to reduce calls Handle Rate Limits : Implement exponential backoff for retry logic Error Handling Check Response Status : Always validate HTTP status codes Handle Missing Tokens : Not all tokens may be available Implement Fallbacks : Use backup currencies when preferred isn't available Security Protect API Keys : Never expose keys in client-side code Use Environment Variables : Store keys securely in production Monitor Usage : Track API usage to avoid unexpected charges Related APIs 1inch Orderbook API - Access limit order data 1edge Platform - Trading and analytics platform 1inch Fusion API - Advanced trading features Support and Community Documentation 1inch Official Docs Developer Portal API Status Page Community Discord Server Telegram Channel GitHub Repositories Support Channels Technical Issues : Developer Portal Support API Questions : Discord #developers Integration Help : Documentation Issues Recent Updates 2025-01-15 : Enhanced batch request limits for Pro tier users 2024-12-20 : Added support for Avalanche (Chain ID: 43114) 2024-11-30 : Improved price aggregation algorithm for better accuracy 2024-11-15 : New currency support: JPY, GBP for major trading pairs For the most up-to-date information, visit the 1inch Developer Portal or check the official documentation .",
    "url": "/docs/1inch/Spot Price API/README",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "1inch Spot Price API Documentation",
        "anchor": "1inch-spot-price-api-documentation"
      },
      {
        "level": 2,
        "text": "Quick Navigation",
        "anchor": "quick-navigation"
      },
      {
        "level": 3,
        "text": "Getting Started",
        "anchor": "getting-started"
      },
      {
        "level": 3,
        "text": "API Reference",
        "anchor": "api-reference"
      },
      {
        "level": 2,
        "text": "Key Features",
        "anchor": "key-features"
      },
      {
        "level": 2,
        "text": "Common Use Cases",
        "anchor": "common-use-cases"
      },
      {
        "level": 2,
        "text": "Supported Networks",
        "anchor": "supported-networks"
      },
      {
        "level": 2,
        "text": "Quick Start",
        "anchor": "quick-start"
      },
      {
        "level": 3,
        "text": "1. Get Your API Key",
        "anchor": "1-get-your-api-key"
      },
      {
        "level": 3,
        "text": "2. Make Your First Request",
        "anchor": "2-make-your-first-request"
      },
      {
        "level": 3,
        "text": "3. Integrate with Your Application",
        "anchor": "3-integrate-with-your-application"
      },
      {
        "level": 2,
        "text": "Rate Limits",
        "anchor": "rate-limits"
      },
      {
        "level": 2,
        "text": "Documentation Structure",
        "anchor": "documentation-structure"
      },
      {
        "level": 2,
        "text": "Examples by Programming Language",
        "anchor": "examples-by-programming-language"
      },
      {
        "level": 3,
        "text": "JavaScript/Node.js",
        "anchor": "javascriptnodejs"
      },
      {
        "level": 3,
        "text": "Python",
        "anchor": "python"
      },
      {
        "level": 3,
        "text": "Go",
        "anchor": "go"
      },
      {
        "level": 3,
        "text": "cURL",
        "anchor": "curl"
      },
      {
        "level": 2,
        "text": "Best Practices",
        "anchor": "best-practices"
      },
      {
        "level": 3,
        "text": "Performance Optimization",
        "anchor": "performance-optimization"
      },
      {
        "level": 3,
        "text": "Error Handling",
        "anchor": "error-handling"
      },
      {
        "level": 3,
        "text": "Security",
        "anchor": "security"
      },
      {
        "level": 2,
        "text": "Related APIs",
        "anchor": "related-apis"
      },
      {
        "level": 2,
        "text": "Support and Community",
        "anchor": "support-and-community"
      },
      {
        "level": 3,
        "text": "Documentation",
        "anchor": "documentation"
      },
      {
        "level": 3,
        "text": "Community",
        "anchor": "community"
      },
      {
        "level": 3,
        "text": "Support Channels",
        "anchor": "support-channels"
      },
      {
        "level": 2,
        "text": "Recent Updates",
        "anchor": "recent-updates"
      }
    ],
    "excerpt": "1inch Spot Price API Documentation Welcome to the 1inch Spot Price API documentation. This API provides real-time cryptocurrency price data across multiple blockchain networks, aggregated from various..."
  },
  {
    "id": "1inch/Spot Price API/README#1inch-spot-price-api-documentation",
    "title": "README - 1inch Spot Price API Documentation",
    "content": "1inch Spot Price API Documentation",
    "url": "/docs/1inch/Spot Price API/README#1inch-spot-price-api-documentation",
    "category": "1inch",
    "headings": [],
    "excerpt": "1inch Spot Price API Documentation (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#quick-navigation",
    "title": "README - Quick Navigation",
    "content": "Quick Navigation",
    "url": "/docs/1inch/Spot Price API/README#quick-navigation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Quick Navigation (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#getting-started",
    "title": "README - Getting Started",
    "content": "Getting Started",
    "url": "/docs/1inch/Spot Price API/README#getting-started",
    "category": "1inch",
    "headings": [],
    "excerpt": "Getting Started (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#api-reference",
    "title": "README - API Reference",
    "content": "API Reference",
    "url": "/docs/1inch/Spot Price API/README#api-reference",
    "category": "1inch",
    "headings": [],
    "excerpt": "API Reference (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#key-features",
    "title": "README - Key Features",
    "content": "Key Features",
    "url": "/docs/1inch/Spot Price API/README#key-features",
    "category": "1inch",
    "headings": [],
    "excerpt": "Key Features (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#common-use-cases",
    "title": "README - Common Use Cases",
    "content": "Common Use Cases",
    "url": "/docs/1inch/Spot Price API/README#common-use-cases",
    "category": "1inch",
    "headings": [],
    "excerpt": "Common Use Cases (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#supported-networks",
    "title": "README - Supported Networks",
    "content": "Supported Networks",
    "url": "/docs/1inch/Spot Price API/README#supported-networks",
    "category": "1inch",
    "headings": [],
    "excerpt": "Supported Networks (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#quick-start",
    "title": "README - Quick Start",
    "content": "Quick Start",
    "url": "/docs/1inch/Spot Price API/README#quick-start",
    "category": "1inch",
    "headings": [],
    "excerpt": "Quick Start (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#1-get-your-api-key",
    "title": "README - 1. Get Your API Key",
    "content": "1. Get Your API Key",
    "url": "/docs/1inch/Spot Price API/README#1-get-your-api-key",
    "category": "1inch",
    "headings": [],
    "excerpt": "1. Get Your API Key (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#2-make-your-first-request",
    "title": "README - 2. Make Your First Request",
    "content": "2. Make Your First Request",
    "url": "/docs/1inch/Spot Price API/README#2-make-your-first-request",
    "category": "1inch",
    "headings": [],
    "excerpt": "2. Make Your First Request (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#3-integrate-with-your-application",
    "title": "README - 3. Integrate with Your Application",
    "content": "3. Integrate with Your Application",
    "url": "/docs/1inch/Spot Price API/README#3-integrate-with-your-application",
    "category": "1inch",
    "headings": [],
    "excerpt": "3. Integrate with Your Application (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#rate-limits",
    "title": "README - Rate Limits",
    "content": "Rate Limits",
    "url": "/docs/1inch/Spot Price API/README#rate-limits",
    "category": "1inch",
    "headings": [],
    "excerpt": "Rate Limits (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#documentation-structure",
    "title": "README - Documentation Structure",
    "content": "Documentation Structure",
    "url": "/docs/1inch/Spot Price API/README#documentation-structure",
    "category": "1inch",
    "headings": [],
    "excerpt": "Documentation Structure (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#examples-by-programming-language",
    "title": "README - Examples by Programming Language",
    "content": "Examples by Programming Language",
    "url": "/docs/1inch/Spot Price API/README#examples-by-programming-language",
    "category": "1inch",
    "headings": [],
    "excerpt": "Examples by Programming Language (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#javascriptnodejs",
    "title": "README - JavaScript/Node.js",
    "content": "JavaScript/Node.js",
    "url": "/docs/1inch/Spot Price API/README#javascriptnodejs",
    "category": "1inch",
    "headings": [],
    "excerpt": "JavaScript/Node.js (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#python",
    "title": "README - Python",
    "content": "Python",
    "url": "/docs/1inch/Spot Price API/README#python",
    "category": "1inch",
    "headings": [],
    "excerpt": "Python (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#go",
    "title": "README - Go",
    "content": "Go",
    "url": "/docs/1inch/Spot Price API/README#go",
    "category": "1inch",
    "headings": [],
    "excerpt": "Go (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#curl",
    "title": "README - cURL",
    "content": "cURL",
    "url": "/docs/1inch/Spot Price API/README#curl",
    "category": "1inch",
    "headings": [],
    "excerpt": "cURL (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#best-practices",
    "title": "README - Best Practices",
    "content": "Best Practices",
    "url": "/docs/1inch/Spot Price API/README#best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Best Practices (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#performance-optimization",
    "title": "README - Performance Optimization",
    "content": "Performance Optimization",
    "url": "/docs/1inch/Spot Price API/README#performance-optimization",
    "category": "1inch",
    "headings": [],
    "excerpt": "Performance Optimization (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#error-handling",
    "title": "README - Error Handling",
    "content": "Error Handling",
    "url": "/docs/1inch/Spot Price API/README#error-handling",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Handling (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#security",
    "title": "README - Security",
    "content": "Security",
    "url": "/docs/1inch/Spot Price API/README#security",
    "category": "1inch",
    "headings": [],
    "excerpt": "Security (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#related-apis",
    "title": "README - Related APIs",
    "content": "Related APIs",
    "url": "/docs/1inch/Spot Price API/README#related-apis",
    "category": "1inch",
    "headings": [],
    "excerpt": "Related APIs (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#support-and-community",
    "title": "README - Support and Community",
    "content": "Support and Community",
    "url": "/docs/1inch/Spot Price API/README#support-and-community",
    "category": "1inch",
    "headings": [],
    "excerpt": "Support and Community (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#documentation",
    "title": "README - Documentation",
    "content": "Documentation",
    "url": "/docs/1inch/Spot Price API/README#documentation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Documentation (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#community",
    "title": "README - Community",
    "content": "Community",
    "url": "/docs/1inch/Spot Price API/README#community",
    "category": "1inch",
    "headings": [],
    "excerpt": "Community (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#support-channels",
    "title": "README - Support Channels",
    "content": "Support Channels",
    "url": "/docs/1inch/Spot Price API/README#support-channels",
    "category": "1inch",
    "headings": [],
    "excerpt": "Support Channels (from README)"
  },
  {
    "id": "1inch/Spot Price API/README#recent-updates",
    "title": "README - Recent Updates",
    "content": "Recent Updates",
    "url": "/docs/1inch/Spot Price API/README#recent-updates",
    "category": "1inch",
    "headings": [],
    "excerpt": "Recent Updates (from README)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order",
    "title": "create-order",
    "content": "Creating Limit Orders Order Creation Engine Complete guide to creating and configuring limit orders in the 1inch Limit Order Protocol v4. From basic orders to advanced strategies with extensions. %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% graph TD subgraph \"Order Creation Flow\" MAKER[Maker] --> BUILD[Build Order] BUILD --> SIGN[Sign Order] SIGN --> SUBMIT[Submit to Orderbook] end --- graph TD subgraph \"Order Components\" ORDER[Order Struct] --> MAKER_ASSET[Maker Asset] ORDER --> TAKER_ASSET[Taker Asset] ORDER --> AMOUNTS[Making/Taking Amounts] ORDER --> RECEIVER[Receiver Address] ORDER --> TRAITS[Maker Traits] ORDER --> EXTENSION[Extension Data] end --- graph TD subgraph \"Amount Calculations\" PARTIAL[Partial Fill] --> CALC_TAKING[calcTakingAmount] REVERSE[Reverse Calc] --> CALC_MAKING[calcMakingAmount] CALC_TAKING --> PROPORTION[Linear Proportion] CALC_MAKING --> PROPORTION end --- ## Overview > **Flexible Trading Engine** > The 1inch Limit Order Protocol enables creation of highly customizable orders that go far beyond traditional limit orders. Limit orders are a fundamental part of financial trading, allowing traders to buy or sell assets at specific prices or better. The 1inch limit order protocol implements smart contract logic to fill on-chain orders created off-chain, offering extreme flexibility for: - **Classic limit orders** with precise price execution - **Advanced order types** like Dutch auctions and range orders - **Non-ERC20 token trading** (NFTs, custom tokens) - **Dynamic exchange rates** calculated on-chain - **Conditional execution** with custom predicates - **Gas-efficient operations** with optimized storage --- ## Basic Order Features > **Standard Functionality** > Essential features available for all order types. | Feature | Description | Use Case | |---------|-------------|----------| | **Custom Receiver** | Specify receiving wallet different from maker | Multi-sig management | | **Partial Fills** | Allow orders to be filled in multiple transactions | Large order execution | | **Multiple Fills** | Enable repeated partial fills of same order | Market making | | **Expiration** | Set automatic order invalidation date | Time-based strategies | | **Private Orders** | Restrict filling to specific taker address | OTC trading | | **Conditional Execution** | Define validation predicates | Stop-loss, take-profit | | **Nonce Management** | Easy order cancellation system | Order lifecycle control | --- ## Advanced Order Features > **Cutting-Edge Capabilities** > Advanced features for sophisticated trading strategies. ### Non-ERC20 Token Support **Trade any asset type** using proxy contracts: - **ERC721 NFTs** with custom transfer logic - **ERC1155 multi-tokens** with batch operations - **Custom tokens** with non-standard interfaces ### Dynamic Pricing **On-chain rate calculations** for advanced strategies: - **Dutch Auctions** - Price decreases over time - **Range Orders** - Price changes based on fill volume - **Oracle-based pricing** - Dynamic rates from external data ### Smart Interactions **Execute custom code** during order processing: - **Pre-interactions** - Execute before asset transfer - **Post-interactions** - Execute after asset transfer - **Arbitrary logic** - Custom validation and processing --- ## Order Structure > **Order DNA** > The fundamental building blocks of every limit order. ```solidity struct Order { uint256 salt; // Order salt + extension hash address maker; // Order creator address address receiver; // Asset receiver address address makerAsset; // Token being sold address takerAsset; // Token being bought uint256 makingAmount; // Amount being sold uint256 takingAmount; // Amount being bought MakerTraits makerTraits; // Order configuration } Parameter Details Parameter Type Description salt uint256 Combined order salt (96 bits) + extension hash (160 bits) maker address The order creator's address receiver address Destination for taker assets (can differ from maker) makerAsset address Contract address of token being sold takerAsset address Contract address of token being bought makingAmount uint256 Quantity of maker tokens to sell takingAmount uint256 Quantity of taker tokens to receive makerTraits MakerTraits Bit-packed order configuration and metadata Unique Orders Each order requires a unique salt to prevent hash collisions. Orders with identical parameters must use different salts to remain distinct. MakerTraits Configuration Order DNA System MakerTraits is a sophisticated bit-packed uint256 that encodes order behavior, permissions, and metadata for gas-efficient storage. Bit Structure Overview Bit Position ‚îÇ Purpose ‚îÇ Type ‚îÇ Description ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 255 ‚îÇ NO_PARTIAL_FILLS_FLAG ‚îÇ Flag ‚îÇ Disable partial fills 254 ‚îÇ ALLOW_MULTIPLE_FILLS ‚îÇ Flag ‚îÇ Enable multiple fills 253 ‚îÇ (unused) ‚îÇ Reserved ‚îÇ Future expansion 252 ‚îÇ PRE_INTERACTION_CALL ‚îÇ Flag ‚îÇ Execute pre-hooks 251 ‚îÇ POST_INTERACTION_CALL ‚îÇ Flag ‚îÇ Execute post-hooks 250 ‚îÇ NEED_CHECK_EPOCH ‚îÇ Flag ‚îÇ Validate epoch manager 249 ‚îÇ HAS_EXTENSION_FLAG ‚îÇ Flag ‚îÇ Order has extensions 248 ‚îÇ USE_PERMIT2_FLAG ‚îÇ Flag ‚îÇ Use Permit2 authorization 247 ‚îÇ UNWRAP_WETH_FLAG ‚îÇ Flag ‚îÇ Unwrap WETH to ETH 200-246 ‚îÇ (reserved) ‚îÇ Reserved ‚îÇ Future flags 120-199 ‚îÇ Allowed Sender ‚îÇ uint80 ‚îÇ Last 10 bytes of address 80-119 ‚îÇ Expiration ‚îÇ uint40 ‚îÇ Timestamp deadline 40-79 ‚îÇ Nonce/Epoch ‚îÇ uint40 ‚îÇ Unique identifier 0-39 ‚îÇ Series ‚îÇ uint40 ‚îÇ Epoch series grouping Control Flags (High Bits) Bit Flag Name When Set When Clear Use Case 255 NO_PARTIAL_FILLS_FLAG Partial fills disabled Partial fills allowed All-or-nothing orders 254 ALLOW_MULTIPLE_FILLS_FLAG Multiple fills enabled Single fill only Market maker orders 252 PRE_INTERACTION_CALL_FLAG Pre-hooks executed No pre-execution DeFi integrations 251 POST_INTERACTION_CALL_FLAG Post-hooks executed No post-execution Automated workflows 250 NEED_CHECK_EPOCH_MANAGER_FLAG Epoch validation required No epoch checking Advanced invalidation 249 HAS_EXTENSION_FLAG Extensions included No extensions Custom functionality 248 USE_PERMIT2_FLAG Permit2 authorization Standard approvals Gasless interactions 247 UNWRAP_WETH_FLAG WETH ‚Üí ETH conversion Keep as WETH Native ETH delivery Data Fields (Low Bits) Bits Field Purpose Details 120-199 Allowed Sender Restrict order fills to specific address Last 10 bytes of address (80 bits) 80-119 Expiration Order deadline timestamp Unix timestamp (40 bits, max ~35k years) 40-79 Nonce/Epoch Unique order identifier For cancellation and tracking 0-39 Series Epoch series grouping Used with epoch manager SDK Usage Developer Tools Comprehensive TypeScript SDK for creating and managing orders. Core Calculation Functions Function Purpose Signature Use Case calcTakingAmount Calculate proportional taker amount (swapMakerAmount, orderMakerAmount, orderTakerAmount) => bigint Partial fills calcMakingAmount Calculate proportional maker amount (swapTakerAmount, orderMakerAmount, orderTakerAmount) => bigint Reverse calculations Amount Calculation Examples import { calcTakingAmount, calcMakingAmount } from \"@1inch/limit-order-sdk\"; // Partial fill calculation const orderMakerAmount = 100_000000n; // 100 USDT (6 decimals) const orderTakerAmount = 10_000000000000000000n; // 10 1INCH (18 decimals) const swapMakerAmount = 50_000000n; // Fill 50 USDT const requiredTakerAmount = calcTakingAmount( swapMakerAmount, // 50 USDT - amount being filled orderMakerAmount, // 100 USDT - total order size orderTakerAmount, // 10 1INCH - total taker amount ); // Result: 5_000000000000000000n (5 1INCH) // Reverse calculation const swapTakerAmount = 3_000000000000000000n; // Taker provides 3 1INCH const receivedMakerAmount = calcMakingAmount( swapTakerAmount, // 3 1INCH - taker input orderMakerAmount, // 100 USDT - total order size orderTakerAmount, // 10 1INCH - total taker amount ); // Result: 30_000000n (30 USDT) MakerTraits Methods Creation & Configuration import { MakerTraits, Address } from \"@1inch/limit-order-sdk\"; // Create default traits const traits = MakerTraits.default(); // Configure order behavior const configuredTraits = MakerTraits.default() .withAllowedSender(new Address(\"0x1234...\")) // Private order .withExpiration(BigInt(Math.floor(Date.now() / 1000)) + 3600n) // 1 hour .withNonce(42n) // Unique identifier .disablePartialFills() // All-or-nothing .allowMultipleFills() // Market maker mode .withExtension(); // Mark as having extensions Query Methods // Check order configuration if (traits.isPrivate()) { console.log(\"Order restricted to:\", traits.allowedSender()); } const deadline = traits.expiration(); if (deadline !== null) { console.log(`Expires: ${new Date(Number(deadline) * 1000)}`); } console.log(\"Partial fills allowed:\", traits.isPartialFillAllowed()); console.log(\"Multiple fills allowed:\", traits.isMultipleFillsAllowed()); Order Extensions Advanced Functionality Extensions enable gas-efficient advanced features without changing the core order structure. Extensions are modular components that add sophisticated functionality: Separated storage - Extensions stored separately from orders Hash validation - Extension hash embedded in order salt Conditional execution - Only processed when needed Gas optimization - Pay only for features you use Available Extensions Asset Transfer Extensions MakerAssetSuffix - Custom transfer logic for non-ERC20 tokens TakerAssetSuffix - Custom receive logic for non-standard assets Dynamic Pricing Extensions MakingAmountGetter - Calculate maker amount dynamically TakingAmountGetter - Calculate taker amount dynamically DutchAuctionCalculator - Time-based price decay RangeAmountCalculator - Volume-based price changes Execution Control Extensions Predicate - Conditional order validation PreInteractionData - Execute code before transfers PostInteractionData - Execute code after transfers Authorization Extensions MakerPermit - Gasless token approvals Extension Structure Extensions use dynamic length encoding: | Offsets (32 bytes) | Extension Data (variable) | Custom Data (variable) | Offset Encoding (bytes 0-31): Each 4-byte section contains end offset for corresponding extension Extensions packed sequentially after offset table Parameter Location (bytes) MakerAssetSuffix [0..3] TakerAssetSuffix [4..7] MakingAmountGetter [8..11] TakingAmountGetter [12..15] Predicate [16..19] MakerPermit [20..23] PreInteractionData [24..27] PostInteractionData [28..31] Non-ERC20 Token Trading Universal Asset Support Trade any token type using proxy contracts that adapt transfer signatures. Implementation Steps Deploy Proxy Contract - Implement transfer adapter Set Asset Address - Use proxy address in order Configure Extension - Add asset suffix with extra parameters Ensure Compatibility - Cannot use with Permit2 ERC721 Example contract ERC721Proxy is ImmutableOwner { error ERC721ProxyBadSelector(); constructor(address _immutableOwner) ImmutableOwner(_immutableOwner) { if (ERC721Proxy.func_60iHVgK.selector != IERC20.transferFrom.selector) revert ERC721ProxyBadSelector(); } /// @notice Proxy transfer method matching IERC20.transferFrom selector function func_60iHVgK( address from, address to, uint256 /* amount */, uint256 tokenId, IERC721 token ) external onlyImmutableOwner { token.transferFrom(from, to, tokenId); } } Order Configuration: Set makerAsset / takerAsset to proxy address Enable HAS_EXTENSION flag Include makerAssetSuffix / takerAssetSuffix with tokenId and token address Dynamic Pricing Smart Price Discovery Implement sophisticated pricing strategies with on-chain calculations. Getter Functions Dynamic pricing uses getter functions called during order execution: // Function signature for amount getters address.selector( <packed arguments>, requestedAmount, remainingMakingAmount, orderHash ) Parameters: requestedAmount - Amount being calculated for remainingMakingAmount - Unfilled order amount orderHash - Unique order identifier Dutch Auction Example // Time-based price decay const rangeAmountCalculator = await ethers.getContractFactory('RangeAmountCalculator'); const makingAmountGetter = rangeAmountCalculator.address + trim0x(cutLastArg(cutLastArg( rangeAmountCalculator.interface.encodeFunctionData( 'getRangeMakerAmount', [startPrice, endPrice, makingAmount, 0, 0] ) ))); Conditional Orders Smart Validation Execute orders only when specific conditions are met using predicate logic. Predicate Functions Function Purpose Usage eq(value, data) Equality check Exact value matching lt(value, data) Less than Minimum thresholds gt(value, data) Greater than Maximum thresholds and(offsets, data) Logical AND Multiple conditions or(offsets, data) Logical OR Alternative conditions not(data) Logical NOT Inverse conditions arbitraryStaticCall(target, data) Custom logic External validation Stop-Loss Example // Build condition: (daiPrice < 1000) OR (daiPrice > 2000) const priceCall = swap.interface.encodeFunctionData('arbitraryStaticCall', [ daiOracle.address, daiOracle.interface.encodeFunctionData('latestAnswer'), ]); const compareLt = swap.interface.encodeFunctionData('lt', [ether('1000'), priceCall]); const compareGt = swap.interface.encodeFunctionData('gt', [ether('2000'), priceCall]); const { offsets, data } = joinStaticCalls([compareLt, compareGt]); const predicate = swap.interface.encodeFunctionData('or', [offsets, data]); Interactions Execution Hooks Execute custom logic before, during, and after order fills. Interaction Types Type Timing Interface Purpose Pre-Interaction Before asset transfer IPreInteraction Setup, validation Taker Interaction During fill execution ITakerInteraction Custom taker logic Post-Interaction After asset transfer IPostInteraction Cleanup, notifications Execution Flow %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% sequenceDiagram participant P as Protocol participant M as Maker participant T as Taker P->>P: 1. Validate Order P->>M: 2. Pre-Interaction P->>T: 3. Transfer Maker Assets P->>T: 4. Taker Interaction P->>M: 5. Transfer Taker Assets P->>M: 6. Post-Interaction P->>P: 7. Emit OrderFilled Event Interface Definitions // Maker's pre-interaction function preInteraction( IOrderMixin.Order calldata order, bytes32 orderHash, address taker, uint256 makingAmount, uint256 takingAmount, uint256 remainingMakingAmount, bytes calldata extraData ) external; // Taker's interaction (can improve rate) function takerInteraction( IOrderMixin.Order calldata order, bytes32 orderHash, address taker, uint256 makingAmount, uint256 takingAmount, uint256 remainingMakingAmount, bytes calldata extraData ) external returns(uint256 offeredTakingAmount); Order Examples Practical Implementation Real-world examples for common order types. Simple Limit Order import { LimitOrder, MakerTraits, Address } from \"@1inch/limit-order-sdk\"; const simpleOrder = new LimitOrder({ salt: 42n, maker: new Address(\"0xmaker...\"), receiver: new Address(\"0xmaker...\"), // Same as maker makerAsset: new Address(\"0xUSDT...\"), takerAsset: new Address(\"0xWETH...\"), makingAmount: 1000_000000n, // 1000 USDT takingAmount: 500_000000000000000000n, // 0.5 ETH makerTraits: MakerTraits.default() .withExpiration(BigInt(Math.floor(Date.now() / 1000)) + 86400n) // 24 hours }); Private Market Maker Order const marketMakerOrder = new LimitOrder({ salt: 123n, maker: new Address(\"0xmarket_maker...\"), receiver: new Address(\"0xmarket_maker...\"), makerAsset: new Address(\"0xUSDC...\"), takerAsset: new Address(\"0xDAI...\"), makingAmount: 10000_000000n, // 10,000 USDC takingAmount: 10000_000000000000000000n, // 10,000 DAI makerTraits: MakerTraits.default() .withAllowedSender(new Address(\"0xtrusted_taker...\")) .allowPartialFills() .allowMultipleFills() }); Advanced Order with Extensions const advancedOrder = new LimitOrder({ salt: LimitOrder.buildSalt(extension, 456n), maker: new Address(\"0xadvanced_trader...\"), receiver: new Address(\"0xreceiver...\"), makerAsset: new Address(\"0xtoken1...\"), takerAsset: new Address(\"0xtoken2...\"), makingAmount: 5000_000000000000000000n, takingAmount: 2500_000000n, makerTraits: MakerTraits.default() .withExtension() .enablePreInteraction() .enablePostInteraction() .withNonce(789n) }); Best Practices Production Guidelines Essential practices for secure and efficient order creation. Security Validate addresses - Ensure all addresses are valid contracts/EOAs Check decimals - Verify token decimal places for amount calculations Set expiration - Always include reasonable expiration times Unique salts - Use different salts for orders with same parameters Test thoroughly - Validate orders on testnets before mainnet Gas Optimization Minimal extensions - Only use extensions when necessary Efficient traits - Configure only required MakerTraits flags Batch operations - Group multiple orders when possible Monitor costs - Track gas usage across different order types Error Handling Order validation - Check order structure before signing Extension verification - Validate extension hashes match salt Signature verification - Confirm signatures before submission Network conditions - Account for congestion and gas prices Next Steps Ready to Build You now have comprehensive knowledge of order creation in the 1inch Limit Order Protocol. Continue Learning Fill Orders - Learn how to execute orders Extensions Guide - Deep dive into advanced features SDK Reference - Complete API documentation Examples - Code samples for common patterns Start Building Set up environment - Install SDK and configure your project Create test orders - Practice on testnets first Implement strategies - Build your trading logic Monitor performance - Track success rates and costs",
    "url": "/docs/1inch/Limit Order Protocol/create-order",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Creating Limit Orders",
        "anchor": "creating-limit-orders"
      },
      {
        "level": 2,
        "text": "Overview",
        "anchor": "overview"
      },
      {
        "level": 2,
        "text": "Basic Order Features",
        "anchor": "basic-order-features"
      },
      {
        "level": 2,
        "text": "Advanced Order Features",
        "anchor": "advanced-order-features"
      },
      {
        "level": 3,
        "text": "Non-ERC20 Token Support",
        "anchor": "non-erc20-token-support"
      },
      {
        "level": 3,
        "text": "Dynamic Pricing",
        "anchor": "dynamic-pricing"
      },
      {
        "level": 3,
        "text": "Smart Interactions",
        "anchor": "smart-interactions"
      },
      {
        "level": 2,
        "text": "Order Structure",
        "anchor": "order-structure"
      },
      {
        "level": 3,
        "text": "Parameter Details",
        "anchor": "parameter-details"
      },
      {
        "level": 2,
        "text": "MakerTraits Configuration",
        "anchor": "makertraits-configuration"
      },
      {
        "level": 3,
        "text": "Bit Structure Overview",
        "anchor": "bit-structure-overview"
      },
      {
        "level": 3,
        "text": "Control Flags (High Bits)",
        "anchor": "control-flags-high-bits"
      },
      {
        "level": 3,
        "text": "Data Fields (Low Bits)",
        "anchor": "data-fields-low-bits"
      },
      {
        "level": 2,
        "text": "SDK Usage",
        "anchor": "sdk-usage"
      },
      {
        "level": 3,
        "text": "Core Calculation Functions",
        "anchor": "core-calculation-functions"
      },
      {
        "level": 4,
        "text": "Amount Calculation Examples",
        "anchor": "amount-calculation-examples"
      },
      {
        "level": 3,
        "text": "MakerTraits Methods",
        "anchor": "makertraits-methods"
      },
      {
        "level": 4,
        "text": "Creation & Configuration",
        "anchor": "creation-configuration"
      },
      {
        "level": 4,
        "text": "Query Methods",
        "anchor": "query-methods"
      },
      {
        "level": 2,
        "text": "Order Extensions",
        "anchor": "order-extensions"
      },
      {
        "level": 3,
        "text": "Available Extensions",
        "anchor": "available-extensions"
      },
      {
        "level": 4,
        "text": "Asset Transfer Extensions",
        "anchor": "asset-transfer-extensions"
      },
      {
        "level": 4,
        "text": "Dynamic Pricing Extensions",
        "anchor": "dynamic-pricing-extensions"
      },
      {
        "level": 4,
        "text": "Execution Control Extensions",
        "anchor": "execution-control-extensions"
      },
      {
        "level": 4,
        "text": "Authorization Extensions",
        "anchor": "authorization-extensions"
      },
      {
        "level": 3,
        "text": "Extension Structure",
        "anchor": "extension-structure"
      },
      {
        "level": 2,
        "text": "Non-ERC20 Token Trading",
        "anchor": "non-erc20-token-trading"
      },
      {
        "level": 3,
        "text": "Implementation Steps",
        "anchor": "implementation-steps"
      },
      {
        "level": 3,
        "text": "ERC721 Example",
        "anchor": "erc721-example"
      },
      {
        "level": 2,
        "text": "Dynamic Pricing",
        "anchor": "dynamic-pricing"
      },
      {
        "level": 3,
        "text": "Getter Functions",
        "anchor": "getter-functions"
      },
      {
        "level": 3,
        "text": "Dutch Auction Example",
        "anchor": "dutch-auction-example"
      },
      {
        "level": 2,
        "text": "Conditional Orders",
        "anchor": "conditional-orders"
      },
      {
        "level": 3,
        "text": "Predicate Functions",
        "anchor": "predicate-functions"
      },
      {
        "level": 3,
        "text": "Stop-Loss Example",
        "anchor": "stop-loss-example"
      },
      {
        "level": 2,
        "text": "Interactions",
        "anchor": "interactions"
      },
      {
        "level": 3,
        "text": "Interaction Types",
        "anchor": "interaction-types"
      },
      {
        "level": 3,
        "text": "Execution Flow",
        "anchor": "execution-flow"
      },
      {
        "level": 3,
        "text": "Interface Definitions",
        "anchor": "interface-definitions"
      },
      {
        "level": 2,
        "text": "Order Examples",
        "anchor": "order-examples"
      },
      {
        "level": 3,
        "text": "Simple Limit Order",
        "anchor": "simple-limit-order"
      },
      {
        "level": 3,
        "text": "Private Market Maker Order",
        "anchor": "private-market-maker-order"
      },
      {
        "level": 3,
        "text": "Advanced Order with Extensions",
        "anchor": "advanced-order-with-extensions"
      },
      {
        "level": 2,
        "text": "Best Practices",
        "anchor": "best-practices"
      },
      {
        "level": 3,
        "text": "Security",
        "anchor": "security"
      },
      {
        "level": 3,
        "text": "Gas Optimization",
        "anchor": "gas-optimization"
      },
      {
        "level": 3,
        "text": "Error Handling",
        "anchor": "error-handling"
      },
      {
        "level": 2,
        "text": "Next Steps",
        "anchor": "next-steps"
      },
      {
        "level": 3,
        "text": "Continue Learning",
        "anchor": "continue-learning"
      },
      {
        "level": 3,
        "text": "Start Building",
        "anchor": "start-building"
      }
    ],
    "excerpt": "Creating Limit Orders Order Creation Engine Complete guide to creating and configuring limit orders in the 1inch Limit Order Protocol v4. From basic orders to advanced strategies with extensions. %%{i..."
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#creating-limit-orders",
    "title": "create-order - Creating Limit Orders",
    "content": "Creating Limit Orders",
    "url": "/docs/1inch/Limit Order Protocol/create-order#creating-limit-orders",
    "category": "1inch",
    "headings": [],
    "excerpt": "Creating Limit Orders (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#overview",
    "title": "create-order - Overview",
    "content": "Overview",
    "url": "/docs/1inch/Limit Order Protocol/create-order#overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "Overview (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#basic-order-features",
    "title": "create-order - Basic Order Features",
    "content": "Basic Order Features",
    "url": "/docs/1inch/Limit Order Protocol/create-order#basic-order-features",
    "category": "1inch",
    "headings": [],
    "excerpt": "Basic Order Features (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#advanced-order-features",
    "title": "create-order - Advanced Order Features",
    "content": "Advanced Order Features",
    "url": "/docs/1inch/Limit Order Protocol/create-order#advanced-order-features",
    "category": "1inch",
    "headings": [],
    "excerpt": "Advanced Order Features (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#non-erc20-token-support",
    "title": "create-order - Non-ERC20 Token Support",
    "content": "Non-ERC20 Token Support",
    "url": "/docs/1inch/Limit Order Protocol/create-order#non-erc20-token-support",
    "category": "1inch",
    "headings": [],
    "excerpt": "Non-ERC20 Token Support (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#dynamic-pricing",
    "title": "create-order - Dynamic Pricing",
    "content": "Dynamic Pricing",
    "url": "/docs/1inch/Limit Order Protocol/create-order#dynamic-pricing",
    "category": "1inch",
    "headings": [],
    "excerpt": "Dynamic Pricing (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#smart-interactions",
    "title": "create-order - Smart Interactions",
    "content": "Smart Interactions",
    "url": "/docs/1inch/Limit Order Protocol/create-order#smart-interactions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Smart Interactions (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#order-structure",
    "title": "create-order - Order Structure",
    "content": "Order Structure",
    "url": "/docs/1inch/Limit Order Protocol/create-order#order-structure",
    "category": "1inch",
    "headings": [],
    "excerpt": "Order Structure (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#parameter-details",
    "title": "create-order - Parameter Details",
    "content": "Parameter Details",
    "url": "/docs/1inch/Limit Order Protocol/create-order#parameter-details",
    "category": "1inch",
    "headings": [],
    "excerpt": "Parameter Details (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#makertraits-configuration",
    "title": "create-order - MakerTraits Configuration",
    "content": "MakerTraits Configuration",
    "url": "/docs/1inch/Limit Order Protocol/create-order#makertraits-configuration",
    "category": "1inch",
    "headings": [],
    "excerpt": "MakerTraits Configuration (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#bit-structure-overview",
    "title": "create-order - Bit Structure Overview",
    "content": "Bit Structure Overview",
    "url": "/docs/1inch/Limit Order Protocol/create-order#bit-structure-overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "Bit Structure Overview (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#control-flags-high-bits",
    "title": "create-order - Control Flags (High Bits)",
    "content": "Control Flags (High Bits)",
    "url": "/docs/1inch/Limit Order Protocol/create-order#control-flags-high-bits",
    "category": "1inch",
    "headings": [],
    "excerpt": "Control Flags (High Bits) (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#data-fields-low-bits",
    "title": "create-order - Data Fields (Low Bits)",
    "content": "Data Fields (Low Bits)",
    "url": "/docs/1inch/Limit Order Protocol/create-order#data-fields-low-bits",
    "category": "1inch",
    "headings": [],
    "excerpt": "Data Fields (Low Bits) (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#sdk-usage",
    "title": "create-order - SDK Usage",
    "content": "SDK Usage",
    "url": "/docs/1inch/Limit Order Protocol/create-order#sdk-usage",
    "category": "1inch",
    "headings": [],
    "excerpt": "SDK Usage (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#core-calculation-functions",
    "title": "create-order - Core Calculation Functions",
    "content": "Core Calculation Functions",
    "url": "/docs/1inch/Limit Order Protocol/create-order#core-calculation-functions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Calculation Functions (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#makertraits-methods",
    "title": "create-order - MakerTraits Methods",
    "content": "MakerTraits Methods",
    "url": "/docs/1inch/Limit Order Protocol/create-order#makertraits-methods",
    "category": "1inch",
    "headings": [],
    "excerpt": "MakerTraits Methods (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#order-extensions",
    "title": "create-order - Order Extensions",
    "content": "Order Extensions",
    "url": "/docs/1inch/Limit Order Protocol/create-order#order-extensions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Order Extensions (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#available-extensions",
    "title": "create-order - Available Extensions",
    "content": "Available Extensions",
    "url": "/docs/1inch/Limit Order Protocol/create-order#available-extensions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Available Extensions (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#extension-structure",
    "title": "create-order - Extension Structure",
    "content": "Extension Structure",
    "url": "/docs/1inch/Limit Order Protocol/create-order#extension-structure",
    "category": "1inch",
    "headings": [],
    "excerpt": "Extension Structure (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#non-erc20-token-trading",
    "title": "create-order - Non-ERC20 Token Trading",
    "content": "Non-ERC20 Token Trading",
    "url": "/docs/1inch/Limit Order Protocol/create-order#non-erc20-token-trading",
    "category": "1inch",
    "headings": [],
    "excerpt": "Non-ERC20 Token Trading (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#implementation-steps",
    "title": "create-order - Implementation Steps",
    "content": "Implementation Steps",
    "url": "/docs/1inch/Limit Order Protocol/create-order#implementation-steps",
    "category": "1inch",
    "headings": [],
    "excerpt": "Implementation Steps (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#erc721-example",
    "title": "create-order - ERC721 Example",
    "content": "ERC721 Example",
    "url": "/docs/1inch/Limit Order Protocol/create-order#erc721-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "ERC721 Example (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#dynamic-pricing",
    "title": "create-order - Dynamic Pricing",
    "content": "Dynamic Pricing",
    "url": "/docs/1inch/Limit Order Protocol/create-order#dynamic-pricing",
    "category": "1inch",
    "headings": [],
    "excerpt": "Dynamic Pricing (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#getter-functions",
    "title": "create-order - Getter Functions",
    "content": "Getter Functions",
    "url": "/docs/1inch/Limit Order Protocol/create-order#getter-functions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Getter Functions (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#dutch-auction-example",
    "title": "create-order - Dutch Auction Example",
    "content": "Dutch Auction Example",
    "url": "/docs/1inch/Limit Order Protocol/create-order#dutch-auction-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Dutch Auction Example (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#conditional-orders",
    "title": "create-order - Conditional Orders",
    "content": "Conditional Orders",
    "url": "/docs/1inch/Limit Order Protocol/create-order#conditional-orders",
    "category": "1inch",
    "headings": [],
    "excerpt": "Conditional Orders (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#predicate-functions",
    "title": "create-order - Predicate Functions",
    "content": "Predicate Functions",
    "url": "/docs/1inch/Limit Order Protocol/create-order#predicate-functions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Predicate Functions (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#stop-loss-example",
    "title": "create-order - Stop-Loss Example",
    "content": "Stop-Loss Example",
    "url": "/docs/1inch/Limit Order Protocol/create-order#stop-loss-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Stop-Loss Example (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#interactions",
    "title": "create-order - Interactions",
    "content": "Interactions",
    "url": "/docs/1inch/Limit Order Protocol/create-order#interactions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Interactions (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#interaction-types",
    "title": "create-order - Interaction Types",
    "content": "Interaction Types",
    "url": "/docs/1inch/Limit Order Protocol/create-order#interaction-types",
    "category": "1inch",
    "headings": [],
    "excerpt": "Interaction Types (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#execution-flow",
    "title": "create-order - Execution Flow",
    "content": "Execution Flow",
    "url": "/docs/1inch/Limit Order Protocol/create-order#execution-flow",
    "category": "1inch",
    "headings": [],
    "excerpt": "Execution Flow (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#interface-definitions",
    "title": "create-order - Interface Definitions",
    "content": "Interface Definitions",
    "url": "/docs/1inch/Limit Order Protocol/create-order#interface-definitions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Interface Definitions (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#order-examples",
    "title": "create-order - Order Examples",
    "content": "Order Examples",
    "url": "/docs/1inch/Limit Order Protocol/create-order#order-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Order Examples (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#simple-limit-order",
    "title": "create-order - Simple Limit Order",
    "content": "Simple Limit Order",
    "url": "/docs/1inch/Limit Order Protocol/create-order#simple-limit-order",
    "category": "1inch",
    "headings": [],
    "excerpt": "Simple Limit Order (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#private-market-maker-order",
    "title": "create-order - Private Market Maker Order",
    "content": "Private Market Maker Order",
    "url": "/docs/1inch/Limit Order Protocol/create-order#private-market-maker-order",
    "category": "1inch",
    "headings": [],
    "excerpt": "Private Market Maker Order (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#advanced-order-with-extensions",
    "title": "create-order - Advanced Order with Extensions",
    "content": "Advanced Order with Extensions",
    "url": "/docs/1inch/Limit Order Protocol/create-order#advanced-order-with-extensions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Advanced Order with Extensions (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#best-practices",
    "title": "create-order - Best Practices",
    "content": "Best Practices",
    "url": "/docs/1inch/Limit Order Protocol/create-order#best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Best Practices (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#security",
    "title": "create-order - Security",
    "content": "Security",
    "url": "/docs/1inch/Limit Order Protocol/create-order#security",
    "category": "1inch",
    "headings": [],
    "excerpt": "Security (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#gas-optimization",
    "title": "create-order - Gas Optimization",
    "content": "Gas Optimization",
    "url": "/docs/1inch/Limit Order Protocol/create-order#gas-optimization",
    "category": "1inch",
    "headings": [],
    "excerpt": "Gas Optimization (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#error-handling",
    "title": "create-order - Error Handling",
    "content": "Error Handling",
    "url": "/docs/1inch/Limit Order Protocol/create-order#error-handling",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Handling (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#next-steps",
    "title": "create-order - Next Steps",
    "content": "Next Steps",
    "url": "/docs/1inch/Limit Order Protocol/create-order#next-steps",
    "category": "1inch",
    "headings": [],
    "excerpt": "Next Steps (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#continue-learning",
    "title": "create-order - Continue Learning",
    "content": "Continue Learning",
    "url": "/docs/1inch/Limit Order Protocol/create-order#continue-learning",
    "category": "1inch",
    "headings": [],
    "excerpt": "Continue Learning (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/create-order#start-building",
    "title": "create-order - Start Building",
    "content": "Start Building",
    "url": "/docs/1inch/Limit Order Protocol/create-order#start-building",
    "category": "1inch",
    "headings": [],
    "excerpt": "Start Building (from create-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview",
    "title": "overview",
    "content": "1inch Limit Order SDK Overview ** Comprehensive DeFi Trading Toolkit** The 1inch Limit Order SDK is a powerful JavaScript/TypeScript library designed for seamless interaction with the 1inch Limit Order Protocol v4. Build sophisticated trading applications with enterprise-grade tools and precision control. %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','primaryBorderColor':'#6c757d','lineColor':'#6c757d','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','gridColor':'#dee2e6','secondaryColor':'#e9ecef','tertiaryColor':'#f8f9fa'}}}%% graph TB subgraph \"SDK Architecture\" APP[Your Application] --> SDK[1inch SDK] SDK --> BUILDER[Order Builder] SDK --> SIGNER[EIP-712 Signer] SDK --> CONNECTOR[Web3 Connector] SDK --> HTTP[HTTP Client] end subgraph \"Order Types\" BUILDER --> LIMIT[Limit Order] BUILDER --> RFQ[RFQ Order] BUILDER --> FEE[Order with Fee] end subgraph \"External Integrations\" HTTP --> API[1inch API] CONNECTOR --> WALLET[Wallet Provider] CONNECTOR --> BLOCKCHAIN[Blockchain] end subgraph \"Data Flow\" CREATE[Create Order] --> SIGN[Sign Order] SIGN --> SUBMIT[Submit to API] SUBMIT --> EXECUTE[Execute on-chain] end Key Features Core Capabilities Feature Description Benefit Order Creation Build limit orders with customizable parameters Precise trade control EIP-712 Signing Cryptographic signing using Ethereum standards Maximum security Orderbook Integration Submit and query orders via 1inch API Global liquidity access TypeScript Support Full type definitions and IntelliSense Enhanced developer experience HTTP Flexibility Multiple connector options (Fetch, Axios) Adaptable architecture Advanced Features Gas Optimization : Efficient smart contract interactions Extensible Architecture : Plugin system for custom functionality Multi-Network Support : Deploy across multiple blockchains Security First : Battle-tested cryptographic implementations Real-time Monitoring : Order status tracking and updates Core Components ** Modular Architecture** The SDK is built with a modular design, allowing you to use only the components you need while maintaining full functionality. Order Types Order Type Purpose Performance Features LimitOrder Standard trading orders Moderate Full feature set RfqOrder Market maker optimization High performance Lightweight, gas-efficient LimitOrderWithFee Fee-integrated orders Moderate Built-in fee mechanisms Order Type Details üèõ LimitOrder : Complete feature support including partial fills, extensions, and multiple executions ** RfqOrder**: Streamlined for professional market makers with minimal gas overhead üí∏ LimitOrderWithFee : Sophisticated fee handling for integrators and protocols Configuration Traits Trait Type Scope Purpose Usage ** MakerTraits** Order creator Define order behavior and rules All order types ** TakerTraits** Order filler Set execution preferences Filling operations Trait Capabilities ** MakerTraits**: Expiration, nonces, partial fills, private orders, interactions ** TakerTraits**: Amount modes, unwrapping, permit handling, custom receivers API Integration Layer Component Level Description üíº Use Case ** Sdk** High-level Complete order management suite Application integration ** Api** Mid-level Direct orderbook API access Custom implementations ** HttpProviderConnector** Low-level Pluggable HTTP client system Infrastructure flexibility Use Cases & Applications ** Versatile Trading Solutions** The SDK enables a wide range of DeFi applications, from simple trading interfaces to sophisticated market-making operations. Primary Use Cases Use Case Description Target Users ‚≠ê Complexity üèõ DEX Integration Build decentralized exchanges with limit order functionality üë®‚Äç DApp developers Medium ü§ñ Trading Bots Create automated trading strategies with precise price control Quantitative traders Low üè™ Market Making Deploy efficient market-making strategies using RFQ orders üíº Professional traders üî¥ High ** Portfolio Management** Execute trades at specific price targets Asset managers Medium Advanced Applications ** Cross-chain Trading**: Leverage multiple networks for arbitrage opportunities ** Yield Optimization**: Automated rebalancing based on price triggers ** Dollar-Cost Averaging**: Systematic investment strategies üõ° Risk Management : Stop-loss and take-profit order automation Getting Started ** Quick Launch Sequence** Get up and running with the 1inch Limit Order SDK in minutes. Step 1: Installation # Install the SDK package bun add '@1inch/limit-order-sdk' Step 2: Learning Path Step Resource Focus ‚è± Time 1 Installation Guide Setup and dependencies 5 min 2 Integration Guide Create first order 15 min 3 Contract Documentation Protocol deep dive 30 min 4 Extensions Guide Advanced features 20 min Network Support ** Multi-Chain Compatibility** Deploy your applications across the entire 1inch ecosystem with seamless cross-chain support. Supported Networks Network Chain ID Type Status Ethereum 1 L1 Active Polygon 137 L2 Active BSC 56 Sidechain Active Arbitrum 42161 L2 Active Optimism 10 L2 Active Avalanche 43114 L1 Active Fantom 250 L1 Active ** Growing Ecosystem** New networks are continuously added based on community demand and protocol deployment. Authentication & API Access üõ° Secure API Integration Professional-grade authentication system ensures secure and reliable access to the 1inch ecosystem. Getting Your API Key ** Visit**: 1inch Developer Portal ** Register**: Create your developer account ** Generate**: Obtain authentication credentials ** Configure**: Integrate into your application Security Best Practices üîê Environment Variables : Store API keys securely üîÑ Key Rotation : Regularly update credentials ** Rate Limiting**: Respect API usage limits üõ° Error Handling : Implement robust error management Next Steps & Resources ** Launch Your Journey** Everything you need to become a 1inch Limit Order Protocol expert. Essential Reading Priority Resource Purpose üî• High Installation Guide Get started quickly üî• High Integration Guide Master order creation ** Medium** Maker Contract Understand internals ** Medium** Taker Contract Learn execution ** Low** Extensions Advanced customization Development Tools üìò TypeScript Definitions : Full IntelliSense support üß™ Test Framework : Comprehensive testing utilities ** Monitoring Tools**: Order tracking and analytics ** Debug Utilities**: Development and troubleshooting helpers Support & Community ** Documentation**: Comprehensive guides and references ** Discord**: Join the developer community üêõ GitHub : Report issues and contribute üìß Support : Professional developer assistance",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "1inch Limit Order SDK Overview",
        "anchor": "1inch-limit-order-sdk-overview"
      },
      {
        "level": 2,
        "text": "Key Features",
        "anchor": "key-features"
      },
      {
        "level": 3,
        "text": "Core Capabilities",
        "anchor": "core-capabilities"
      },
      {
        "level": 3,
        "text": "Advanced Features",
        "anchor": "advanced-features"
      },
      {
        "level": 2,
        "text": "Core Components",
        "anchor": "core-components"
      },
      {
        "level": 3,
        "text": "Order Types",
        "anchor": "order-types"
      },
      {
        "level": 4,
        "text": "Order Type Details",
        "anchor": "order-type-details"
      },
      {
        "level": 3,
        "text": "Configuration Traits",
        "anchor": "configuration-traits"
      },
      {
        "level": 4,
        "text": "Trait Capabilities",
        "anchor": "trait-capabilities"
      },
      {
        "level": 3,
        "text": "API Integration Layer",
        "anchor": "api-integration-layer"
      },
      {
        "level": 2,
        "text": "Use Cases & Applications",
        "anchor": "use-cases-applications"
      },
      {
        "level": 3,
        "text": "Primary Use Cases",
        "anchor": "primary-use-cases"
      },
      {
        "level": 3,
        "text": "Advanced Applications",
        "anchor": "advanced-applications"
      },
      {
        "level": 2,
        "text": "Getting Started",
        "anchor": "getting-started"
      },
      {
        "level": 3,
        "text": "Step 1: Installation",
        "anchor": "step-1-installation"
      },
      {
        "level": 1,
        "text": "Install the SDK package",
        "anchor": "install-the-sdk-package"
      },
      {
        "level": 3,
        "text": "Step 2: Learning Path",
        "anchor": "step-2-learning-path"
      },
      {
        "level": 2,
        "text": "Network Support",
        "anchor": "network-support"
      },
      {
        "level": 3,
        "text": "Supported Networks",
        "anchor": "supported-networks"
      },
      {
        "level": 2,
        "text": "Authentication & API Access",
        "anchor": "authentication-api-access"
      },
      {
        "level": 3,
        "text": "Getting Your API Key",
        "anchor": "getting-your-api-key"
      },
      {
        "level": 3,
        "text": "Security Best Practices",
        "anchor": "security-best-practices"
      },
      {
        "level": 2,
        "text": "Next Steps & Resources",
        "anchor": "next-steps-resources"
      },
      {
        "level": 3,
        "text": "Essential Reading",
        "anchor": "essential-reading"
      },
      {
        "level": 3,
        "text": "Development Tools",
        "anchor": "development-tools"
      },
      {
        "level": 3,
        "text": "Support & Community",
        "anchor": "support-community"
      }
    ],
    "excerpt": "1inch Limit Order SDK Overview ** Comprehensive DeFi Trading Toolkit** The 1inch Limit Order SDK is a powerful JavaScript/TypeScript library designed for seamless interaction with the 1inch Limit Orde..."
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#1inch-limit-order-sdk-overview",
    "title": "overview - 1inch Limit Order SDK Overview",
    "content": "1inch Limit Order SDK Overview",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#1inch-limit-order-sdk-overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "1inch Limit Order SDK Overview (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#key-features",
    "title": "overview - Key Features",
    "content": "Key Features",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#key-features",
    "category": "1inch",
    "headings": [],
    "excerpt": "Key Features (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#core-capabilities",
    "title": "overview - Core Capabilities",
    "content": "Core Capabilities",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#core-capabilities",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Capabilities (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#advanced-features",
    "title": "overview - Advanced Features",
    "content": "Advanced Features",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#advanced-features",
    "category": "1inch",
    "headings": [],
    "excerpt": "Advanced Features (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#core-components",
    "title": "overview - Core Components",
    "content": "Core Components",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#core-components",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Components (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#order-types",
    "title": "overview - Order Types",
    "content": "Order Types",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#order-types",
    "category": "1inch",
    "headings": [],
    "excerpt": "Order Types (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#configuration-traits",
    "title": "overview - Configuration Traits",
    "content": "Configuration Traits",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#configuration-traits",
    "category": "1inch",
    "headings": [],
    "excerpt": "Configuration Traits (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#api-integration-layer",
    "title": "overview - API Integration Layer",
    "content": "API Integration Layer",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#api-integration-layer",
    "category": "1inch",
    "headings": [],
    "excerpt": "API Integration Layer (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#use-cases-applications",
    "title": "overview - Use Cases & Applications",
    "content": "Use Cases & Applications",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#use-cases-applications",
    "category": "1inch",
    "headings": [],
    "excerpt": "Use Cases & Applications (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#primary-use-cases",
    "title": "overview - Primary Use Cases",
    "content": "Primary Use Cases",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#primary-use-cases",
    "category": "1inch",
    "headings": [],
    "excerpt": "Primary Use Cases (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#advanced-applications",
    "title": "overview - Advanced Applications",
    "content": "Advanced Applications",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#advanced-applications",
    "category": "1inch",
    "headings": [],
    "excerpt": "Advanced Applications (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#getting-started",
    "title": "overview - Getting Started",
    "content": "Getting Started",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#getting-started",
    "category": "1inch",
    "headings": [],
    "excerpt": "Getting Started (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#step-1-installation",
    "title": "overview - Step 1: Installation",
    "content": "Step 1: Installation",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#step-1-installation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Step 1: Installation (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#install-the-sdk-package",
    "title": "overview - Install the SDK package",
    "content": "Install the SDK package",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#install-the-sdk-package",
    "category": "1inch",
    "headings": [],
    "excerpt": "Install the SDK package (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#step-2-learning-path",
    "title": "overview - Step 2: Learning Path",
    "content": "Step 2: Learning Path",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#step-2-learning-path",
    "category": "1inch",
    "headings": [],
    "excerpt": "Step 2: Learning Path (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#network-support",
    "title": "overview - Network Support",
    "content": "Network Support",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#network-support",
    "category": "1inch",
    "headings": [],
    "excerpt": "Network Support (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#supported-networks",
    "title": "overview - Supported Networks",
    "content": "Supported Networks",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#supported-networks",
    "category": "1inch",
    "headings": [],
    "excerpt": "Supported Networks (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#authentication-api-access",
    "title": "overview - Authentication & API Access",
    "content": "Authentication & API Access",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#authentication-api-access",
    "category": "1inch",
    "headings": [],
    "excerpt": "Authentication & API Access (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#getting-your-api-key",
    "title": "overview - Getting Your API Key",
    "content": "Getting Your API Key",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#getting-your-api-key",
    "category": "1inch",
    "headings": [],
    "excerpt": "Getting Your API Key (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#security-best-practices",
    "title": "overview - Security Best Practices",
    "content": "Security Best Practices",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#security-best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Security Best Practices (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#next-steps-resources",
    "title": "overview - Next Steps & Resources",
    "content": "Next Steps & Resources",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#next-steps-resources",
    "category": "1inch",
    "headings": [],
    "excerpt": "Next Steps & Resources (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#essential-reading",
    "title": "overview - Essential Reading",
    "content": "Essential Reading",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#essential-reading",
    "category": "1inch",
    "headings": [],
    "excerpt": "Essential Reading (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#development-tools",
    "title": "overview - Development Tools",
    "content": "Development Tools",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#development-tools",
    "category": "1inch",
    "headings": [],
    "excerpt": "Development Tools (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/overview#support-community",
    "title": "overview - Support & Community",
    "content": "Support & Community",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/overview#support-community",
    "category": "1inch",
    "headings": [],
    "excerpt": "Support & Community (from overview)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions",
    "title": "extensions",
    "content": "Extensions ** Supercharge Your Orders** Extensions unlock advanced functionality for 1inch Limit Order Protocol, enabling custom behaviors, interactions, and sophisticated trading strategies. %%{init: {'theme':'base', 'themeVariables': {'primaryColor':'#f8f9fa','primaryTextColor':'#212529','primaryBorderColor':'#6c757d','lineColor':'#6c757d','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','gridColor':'#dee2e6','secondaryColor':'#e9ecef','tertiaryColor':'#f8f9fa'}}}%% graph TD subgraph \"Extension System Architecture\" ORDER[Base Order] --> EXT[Extension] EXT --> PRE[Pre-Interaction] EXT --> POST[Post-Interaction] EXT --> PRED[Predicate] EXT --> MAKER[Maker Amount Data] EXT --> TAKER[Taker Amount Data] EXT --> CUSTOM[Custom Data] end subgraph \"Order Execution Flow\" START[Order Fill Initiated] --> CHECK{Predicate Check} CHECK -->|Pass| PRE_EXEC[Execute Pre-Interaction] CHECK -->|Fail| REJECT[Reject Order] PRE_EXEC --> CALC[Calculate Dynamic Amounts] CALC --> FILL[Execute Order Fill] FILL --> POST_EXEC[Execute Post-Interaction] POST_EXEC --> COMPLETE[Order Completed] end Overview Extensions provide a powerful plugin system that allows developers to customize order behavior beyond standard parameters. Think of extensions as smart contract \"middleware\" that executes during order processing. Extension Capabilities Feature Description Use Case Pre/Post Interactions Execute custom logic before/after fills Complex trading strategies Dynamic Pricing Calculate amounts based on external data Oracle-based pricing Conditional Execution Orders execute only when conditions are met Automated trading triggers Custom Permissions Advanced authorization mechanisms Enterprise integrations Extension Class ** Core Extension Engine** The Extension class provides comprehensive functionality for encoding, decoding, and managing order extensions. Method Purpose Signature Usage decode Parse extension from bytes (bytes: string) => Extension Load existing extensions default Create empty extension () => Extension Start building extensions keccak256 Calculate extension hash () => bigint Verification and indexing isEmpty Check if extension is empty () => boolean Validation logic encode Convert to hex string () => string Blockchain submission Method Details decode üì• Parse Extension Data Reconstructs an Extension instance from raw blockchain bytes. const extension = Extension.decode(\"0x1234567890abcdef...\"); default ** Create Empty Extension** Generates a new Extension instance with no active components. const emptyExtension = Extension.default(); keccak256 üîí Generate Hash Computes cryptographic hash for verification and indexing purposes. const hash = extension.keccak256(); console.log(`Extension Hash: ${hash}`); isEmpty ** Validation Check** Determines if the extension contains any active components. if (extension.isEmpty()) { console.log(\"No extension functionality active\"); } encode ** Blockchain Ready** Converts extension to hex string format for blockchain submission. const encodedData = extension.encode(); // Result: \"0x1234567890abcdef...\" Extension Properties üß© Modular Components Extensions are composed of multiple specialized components, each serving a specific purpose in order execution. Core Extension Components Property Purpose Type Use Case üÜî EMPTY Default empty state ExtensionStruct Template for new extensions ** makerAssetSuffix** Additional maker asset data string Custom token handling ** takerAssetSuffix** Additional taker asset data string Custom token handling ** makingAmountData** Dynamic making amount calculation string Oracle-based pricing ** takingAmountData** Dynamic taking amount calculation string Oracle-based pricing ** predicate** Conditional execution logic string Automated triggers ** makerPermit** Maker authorization data string Gasless approvals üîÑ preInteraction Pre-execution hooks string Setup operations üèÅ postInteraction Post-execution hooks string Cleanup operations üé® customData Application-specific data string Custom functionality Property Details EMPTY ** Template Foundation** Provides the basic structure for building new extensions. const template = Extension.EMPTY; // Contains all properties initialized to empty strings makerAssetSuffix & takerAssetSuffix ** Token Enhancement** Additional data appended to token transfers for custom handling. // Example: Add fee calculation data extension.makerAssetSuffix = \"0x1234...\"; // Fee calculation bytes extension.takerAssetSuffix = \"0x5678...\"; // Slippage protection data makingAmountData & takingAmountData ** Dynamic Pricing** Enable real-time amount calculations based on external data sources. // Oracle-based pricing extension.makingAmountData = \"0xabcd...\"; // Price oracle contract call extension.takingAmountData = \"0xefgh...\"; // Slippage adjustment logic predicate üîí Conditional Logic Orders execute only when specified conditions are met. // Time-based execution extension.predicate = \"0x1111...\"; // \"Execute only after timestamp X\" // Price-based execution extension.predicate = \"0x2222...\"; // \"Execute only if ETH > $2000\" makerPermit ** Gasless Approvals** Include EIP-2612 permit data for seamless token authorization. // Gasless USDC approval extension.makerPermit = \"0x3333...\"; // Encoded permit signature preInteraction & postInteraction üé≠ Execution Hooks Custom logic that runs before and after order fills. // DeFi strategy integration extension.preInteraction = \"0x4444...\"; // Withdraw from yield farm extension.postInteraction = \"0x5555...\"; // Deposit to new strategy customData ** Unlimited Possibilities** Application-specific data for custom functionality. // Trading bot metadata extension.customData = \"0x6666...\"; // Strategy parameters, user preferences, etc. ExtensionBuilder Class ** Fluent Extension Creation** The ExtensionBuilder provides an intuitive, chainable interface for constructing sophisticated order extensions with ease. Builder Pattern Benefits ** Chainable Methods**: Fluent API for readable code ** Type Safety**: Full TypeScript support and validation üõ† Incremental Building : Add components step by step ** Easy Testing**: Clear separation of concerns Builder Methods Overview Method Purpose Parameters Chainable ** withMakerAssetSuffix** Add maker asset data suffix: string ** withTakerAssetSuffix** Add taker asset data suffix: string ** withMakingAmountData** Set dynamic making amount address: Address, data: string ** withTakingAmountData** Set dynamic taking amount address: Address, data: string ** withPredicate** Add conditional logic predicate: string ** withMakerPermit** Include permit data tokenFrom: Address, permitData: string üîÑ withPreInteraction Set pre-execution hook interaction: Interaction üèÅ withPostInteraction Set post-execution hook interaction: Interaction üé® withCustomData Add custom functionality data: string ‚ú® build Create final Extension - Final Detailed Method Documentation withMakerAssetSuffix ** Enhance Maker Asset** Appends custom data to maker asset transfers for specialized handling. const builder = new ExtensionBuilder().withMakerAssetSuffix( \"0x1234567890abcdef\", ); // Custom fee calculation data withTakerAssetSuffix ** Enhance Taker Asset** Appends custom data to taker asset transfers for specialized handling. const builder = new ExtensionBuilder().withTakerAssetSuffix( \"0xabcdef1234567890\", ); // Slippage protection data withMakingAmountData ** Dynamic Making Amount** Enables real-time calculation of making amounts via external contracts. import { Address } from \"@1inch/limit-order-sdk\"; const oracleAddress = new Address(\"0x1234...\"); // Price oracle contract const callData = \"0xabcd...\"; // Function call data const builder = new ExtensionBuilder().withMakingAmountData( oracleAddress, callData, ); Parameters: address : Contract address that will calculate the making amount data : Encoded function call data for the calculation withTakingAmountData ** Dynamic Taking Amount** Enables real-time calculation of taking amounts via external contracts. const slippageProtection = new Address(\"0x5678...\"); const protectionData = \"0xefgh...\"; const builder = new ExtensionBuilder().withTakingAmountData( slippageProtection, protectionData, ); Parameters: address : Contract address that will calculate the taking amount data : Encoded function call data for the calculation withPredicate üîí Conditional Execution Adds logic that must evaluate to true for order execution. // Time-based predicate: execute only after specific timestamp const timeBasedPredicate = \"0x111...\"; const builder = new ExtensionBuilder().withPredicate(timeBasedPredicate); withMakerPermit ** Gasless Authorization** Includes EIP-2612 permit for seamless token approvals. const usdcAddress = new Address(\"0xA0b86a33E6433c68844f6e3A93366Ea38e2a3F98\"); const permitSignature = \"0x2222...\"; // EIP-2612 permit data const builder = new ExtensionBuilder().withMakerPermit( usdcAddress, permitSignature, ); withPreInteraction & withPostInteraction üé≠ Execution Hooks Custom logic executed before and after order fills. import { Interaction } from \"@1inch/limit-order-sdk\"; // Withdraw from yield farm before trade const preHook = new Interaction({ target: new Address(\"0x3333...\"), // Yield farm contract data: \"0x4444...\", // Withdraw function call }); // Deposit proceeds to new strategy after trade const postHook = new Interaction({ target: new Address(\"0x5555...\"), // Strategy contract data: \"0x6666...\", // Deposit function call }); const builder = new ExtensionBuilder() .withPreInteraction(preHook) .withPostInteraction(postHook); withCustomData ** Unlimited Customization** Application-specific data for any custom functionality. // Trading bot strategy parameters const strategyParams = \"0x7777...\"; // Encoded strategy configuration const builder = new ExtensionBuilder().withCustomData(strategyParams); build üèÅ Finalize Extension Constructs the final Extension instance from all configured components. const extension = new ExtensionBuilder() .withMakerAssetSuffix(\"0x1111...\") .withPredicate(\"0x2222...\") .withPreInteraction(preHook) .build(); // Creates Extension instance Complete Example import { ExtensionBuilder, Address, Interaction } from \"@1inch/limit-order-sdk\"; // Build a sophisticated extension with multiple components const advancedExtension = new ExtensionBuilder() // Add fee calculation for maker asset .withMakerAssetSuffix(\"0x1234567890abcdef\") // Dynamic pricing via oracle .withMakingAmountData( new Address(\"0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\"), // Chainlink ETH/USD \"0x50d25bcd\", // latestRoundData() ) // Time-based execution .withPredicate(\"0x1111222233334444\") // Execute after 2024-12-01 // üîÑ Withdraw from Aave before trade .withPreInteraction( new Interaction({ target: new Address(\"0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9\"), data: \"0x69328dec...\", // withdraw(asset, amount, to) }), ) // üèÅ Deposit to Compound after trade .withPostInteraction( new Interaction({ target: new Address(\"0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643\"), data: \"0xa0712d68...\", // mint(mintAmount) }), ) // üé® Custom trading bot metadata .withCustomData(\"0x99887766554433221100\") .build(); // ‚ú® Create the extension console.log(\"Extension hash:\", advancedExtension.keccak256()); console.log(\"Encoded extension:\", advancedExtension.encode()); Extension Mastery Complete! You now understand how to leverage the full power of 1inch Limit Order Extensions. Next Steps üß™ Experiment : Try building simple extensions first ** Integrate**: Add extensions to your limit orders ** Monitor**: Track extension performance and gas usage ** Optimize**: Refine your extension logic for efficiency",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Extensions",
        "anchor": "extensions"
      },
      {
        "level": 2,
        "text": "Overview",
        "anchor": "overview"
      },
      {
        "level": 3,
        "text": "Extension Capabilities",
        "anchor": "extension-capabilities"
      },
      {
        "level": 2,
        "text": "Extension Class",
        "anchor": "extension-class"
      },
      {
        "level": 3,
        "text": "Method Details",
        "anchor": "method-details"
      },
      {
        "level": 4,
        "text": "decode",
        "anchor": "decode"
      },
      {
        "level": 4,
        "text": "default",
        "anchor": "default"
      },
      {
        "level": 4,
        "text": "keccak256",
        "anchor": "keccak256"
      },
      {
        "level": 4,
        "text": "isEmpty",
        "anchor": "isempty"
      },
      {
        "level": 4,
        "text": "encode",
        "anchor": "encode"
      },
      {
        "level": 2,
        "text": "Extension Properties",
        "anchor": "extension-properties"
      },
      {
        "level": 3,
        "text": "Core Extension Components",
        "anchor": "core-extension-components"
      },
      {
        "level": 3,
        "text": "Property Details",
        "anchor": "property-details"
      },
      {
        "level": 4,
        "text": "EMPTY",
        "anchor": "empty"
      },
      {
        "level": 4,
        "text": "makerAssetSuffix & takerAssetSuffix",
        "anchor": "makerassetsuffix-takerassetsuffix"
      },
      {
        "level": 4,
        "text": "makingAmountData & takingAmountData",
        "anchor": "makingamountdata-takingamountdata"
      },
      {
        "level": 4,
        "text": "predicate",
        "anchor": "predicate"
      },
      {
        "level": 4,
        "text": "makerPermit",
        "anchor": "makerpermit"
      },
      {
        "level": 4,
        "text": "preInteraction & postInteraction",
        "anchor": "preinteraction-postinteraction"
      },
      {
        "level": 4,
        "text": "customData",
        "anchor": "customdata"
      },
      {
        "level": 2,
        "text": "ExtensionBuilder Class",
        "anchor": "extensionbuilder-class"
      },
      {
        "level": 3,
        "text": "Builder Pattern Benefits",
        "anchor": "builder-pattern-benefits"
      },
      {
        "level": 3,
        "text": "Builder Methods Overview",
        "anchor": "builder-methods-overview"
      },
      {
        "level": 3,
        "text": "Detailed Method Documentation",
        "anchor": "detailed-method-documentation"
      },
      {
        "level": 4,
        "text": "withMakerAssetSuffix",
        "anchor": "withmakerassetsuffix"
      },
      {
        "level": 4,
        "text": "withTakerAssetSuffix",
        "anchor": "withtakerassetsuffix"
      },
      {
        "level": 4,
        "text": "withMakingAmountData",
        "anchor": "withmakingamountdata"
      },
      {
        "level": 4,
        "text": "withTakingAmountData",
        "anchor": "withtakingamountdata"
      },
      {
        "level": 4,
        "text": "withPredicate",
        "anchor": "withpredicate"
      },
      {
        "level": 4,
        "text": "withMakerPermit",
        "anchor": "withmakerpermit"
      },
      {
        "level": 4,
        "text": "withPreInteraction & withPostInteraction",
        "anchor": "withpreinteraction-withpostinteraction"
      },
      {
        "level": 4,
        "text": "withCustomData",
        "anchor": "withcustomdata"
      },
      {
        "level": 4,
        "text": "build",
        "anchor": "build"
      },
      {
        "level": 3,
        "text": "Complete Example",
        "anchor": "complete-example"
      },
      {
        "level": 2,
        "text": "Extension Mastery Complete!",
        "anchor": "extension-mastery-complete"
      },
      {
        "level": 3,
        "text": "Next Steps",
        "anchor": "next-steps"
      }
    ],
    "excerpt": "Extensions ** Supercharge Your Orders** Extensions unlock advanced functionality for 1inch Limit Order Protocol, enabling custom behaviors, interactions, and sophisticated trading strategies. %%{init:..."
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#extensions",
    "title": "extensions - Extensions",
    "content": "Extensions",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#extensions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Extensions (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#overview",
    "title": "extensions - Overview",
    "content": "Overview",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "Overview (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#extension-capabilities",
    "title": "extensions - Extension Capabilities",
    "content": "Extension Capabilities",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#extension-capabilities",
    "category": "1inch",
    "headings": [],
    "excerpt": "Extension Capabilities (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#extension-class",
    "title": "extensions - Extension Class",
    "content": "Extension Class",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#extension-class",
    "category": "1inch",
    "headings": [],
    "excerpt": "Extension Class (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#method-details",
    "title": "extensions - Method Details",
    "content": "Method Details",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#method-details",
    "category": "1inch",
    "headings": [],
    "excerpt": "Method Details (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#extension-properties",
    "title": "extensions - Extension Properties",
    "content": "Extension Properties",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#extension-properties",
    "category": "1inch",
    "headings": [],
    "excerpt": "Extension Properties (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#core-extension-components",
    "title": "extensions - Core Extension Components",
    "content": "Core Extension Components",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#core-extension-components",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Extension Components (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#property-details",
    "title": "extensions - Property Details",
    "content": "Property Details",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#property-details",
    "category": "1inch",
    "headings": [],
    "excerpt": "Property Details (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#extensionbuilder-class",
    "title": "extensions - ExtensionBuilder Class",
    "content": "ExtensionBuilder Class",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#extensionbuilder-class",
    "category": "1inch",
    "headings": [],
    "excerpt": "ExtensionBuilder Class (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#builder-pattern-benefits",
    "title": "extensions - Builder Pattern Benefits",
    "content": "Builder Pattern Benefits",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#builder-pattern-benefits",
    "category": "1inch",
    "headings": [],
    "excerpt": "Builder Pattern Benefits (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#builder-methods-overview",
    "title": "extensions - Builder Methods Overview",
    "content": "Builder Methods Overview",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#builder-methods-overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "Builder Methods Overview (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#detailed-method-documentation",
    "title": "extensions - Detailed Method Documentation",
    "content": "Detailed Method Documentation",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#detailed-method-documentation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Detailed Method Documentation (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#complete-example",
    "title": "extensions - Complete Example",
    "content": "Complete Example",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#complete-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Complete Example (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#extension-mastery-complete",
    "title": "extensions - Extension Mastery Complete!",
    "content": "Extension Mastery Complete!",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#extension-mastery-complete",
    "category": "1inch",
    "headings": [],
    "excerpt": "Extension Mastery Complete! (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/extensions#next-steps",
    "title": "extensions - Next Steps",
    "content": "Next Steps",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/extensions#next-steps",
    "category": "1inch",
    "headings": [],
    "excerpt": "Next Steps (from extensions)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration",
    "title": "integration",
    "content": "Limit Orders Integration Guide ** Complete Integration Walkthrough** Master the art of creating, signing, and managing limit orders with the 1inch Limit Order Protocol SDK. Build sophisticated trading applications with precision and control. Overview Limit orders revolutionize DeFi trading by allowing users to define exact price and amount parameters for token trades. Here's how the magic happens: Order Lifecycle Phase üìç Location Action Technology 1. Creation Off-chain Define trade parameters SDK 2. Signing üîê Off-chain Cryptographic authorization EIP-712 3. Sharing üì° API Broadcast to orderbook 1inch API 4. Execution ‚õì On-chain Smart contract fulfillment Protocol Key Benefits ** Precision**: Execute trades at exact target prices ** Efficiency**: Gas-optimized smart contract execution üîí Security : Cryptographically signed and verified ** Accessibility**: Available across multiple networks Creating and Signing a Limit Order ** Security First** Always use secure private key management in production. The example below is for demonstration purposes only. Complete Implementation Example import { Sdk, MakerTraits, Address, randBigInt, FetchProviderConnector, } from \"@1inch/limit-order-sdk\"; import { Wallet } from \"ethers\"; // Example private key (NEVER use in production!) const privateKey = \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\"; const maker = new Wallet(privateKey); // Initialize SDK with authentication const sdk = new Sdk({ authKey: \"YOUR_AUTH_KEY\", // Get from https://portal.1inch.dev/ networkId: 1, // Ethereum mainnet httpConnector: new FetchProviderConnector(), // HTTP client }); // Configure order expiration (optional but recommended) const expiresIn = 120n; // 2 minutes from now const expiration = BigInt(Math.floor(Date.now() / 1000)) + expiresIn; const UINT_40_MAX = (1n << 48n) - 1n; // Define order behavior traits const makerTraits = MakerTraits.default() .withExpiration(expiration) // Set expiration time .withNonce(randBigInt(UINT_40_MAX)); // üé≤ Unique identifier // Create the limit order const order = await sdk.createOrder( { makerAsset: new Address(\"0xdAC17F958D2ee523a2206206994597C13D831ec7\"), // USDT takerAsset: new Address(\"0x111111111117dc0aa78b770fa6a738034120c302\"), // 1INCH makingAmount: 100_000000n, // 100 USDT (6 decimals) takingAmount: 10_00000000000000000n, // 10 1INCH (18 decimals) maker: new Address(maker.address), // üë§ Order creator }, makerTraits, // Order configuration ); // Generate EIP-712 signature for verification const typedData = order.getTypedData(); const signature = await maker.signTypedData( typedData.domain, { Order: typedData.types.Order }, typedData.message, ); // Submit to 1inch Orderbook (optional) await sdk.submitOrder(order, signature); Step-by-Step Breakdown Step Purpose Details 1. SDK Setup Initialize connection Configure network, auth, and HTTP provider 2. Traits Config Define order behavior Set expiration, nonce, and other parameters 3. Order Creation Specify trade details Set tokens, amounts, and maker address 4. Signature Cryptographic proof EIP-712 signing for security 5. Submission Broadcast order Share with orderbook for matching Cryptographic Signing üîí EIP-712 Standard Orders use the EIP-712 structured data signing standard, ensuring cryptographic integrity and preventing unauthorized modifications. Security Guarantees The EIP-712 signature provides multiple layers of protection: ** Precision**: Order can only be filled with exact parameters specified üîê Authentication : Cryptographically proves maker authorization ‚õì Domain Binding : Tied to specific network and protocol version üö´ Replay Protection : Prevents cross-chain and cross-protocol attacks ** Developer Tip** The SDK handles all typed data construction automatically via order.getTypedData() . No manual EIP-712 implementation required! MakerTraits and Order Configuration ** Fine-Grained Control** MakerTraits provide granular control over order behavior, execution rules, and lifecycle management. Core Configuration Options Feature Description Method Default Partial Fills Allow order to be filled in chunks .withPartialFill() Enabled Multiple Fills Allow same order to be filled multiple times .allowMultipleFills() Disabled Expiration Set order deadline timestamp .withExpiration(timestamp) None Nonce Unique identifier for order .withNonce(value) Random Private Orders Restrict filling to specific address .withAllowedSender(address) Public Advanced Configuration Example import { MakerTraits, randBigInt } from \"@1inch/limit-order-sdk\"; const UINT_40_MAX = (1n << 48n) - 1n; const futureTimestamp = BigInt(Math.floor(Date.now() / 1000)) + 3600n; // 1 hour const advancedTraits = MakerTraits.default() .withPartialFill() // Allow partial execution .allowMultipleFills() // Allow multiple fills .withExpiration(futureTimestamp) // Set 1-hour deadline .withNonce(randBigInt(UINT_40_MAX)) // üé≤ Unique identifier .enablePreInteraction() // üîÑ Enable pre-execution hooks .enablePostInteraction(); // üîÑ Enable post-execution hooks Use Case Examples Standard Trading Order // Simple buy/sell order with expiration const standardTraits = MakerTraits.default() .withExpiration(expiration) .withNonce(randBigInt(UINT_40_MAX)); Market Maker Order // Professional market maker configuration const marketMakerTraits = MakerTraits.default() .allowMultipleFills() // Reusable order .withPartialFill() // Partial execution .withNonce(randBigInt(UINT_40_MAX)); Private Order // Restricted to specific taker const privateTraits = MakerTraits.default() .withAllowedSender(new Address(\"0x1234...\")) // Specific taker only .withExpiration(expiration) .withNonce(randBigInt(UINT_40_MAX)); Order Field Reference ** Essential Parameters** Understanding each field is crucial for creating precise and effective limit orders. Core Order Fields Field Type üí≠ Description üìè Format makerAsset Address Token being sold by maker ERC-20 contract address takerAsset Address Token expected from taker ERC-20 contract address makingAmount bigint Amount maker is offering Wei units (respect token decimals) takingAmount bigint Amount maker wants in return Wei units (respect token decimals) maker Address üë§ Order creator's wallet address Ethereum address Field Best Practices Amount Calculations // üßÆ Always account for token decimals const usdtAmount = 100n * 10n ** 6n; // 100 USDT (6 decimals) const inchAmount = 10n * 10n ** 18n; // 10 1INCH (18 decimals) Address Validation // Use Address wrapper for type safety import { Address } from \"@1inch/limit-order-sdk\"; const makerAsset = new Address(\"0xdAC17F958D2ee523a2206206994597C13D831ec7\"); // USDT const takerAsset = new Address(\"0x111111111117dc0aa78b770fa6a738034120c302\"); // 1INCH Orderbook Integration üì° Global Order Visibility Submit orders to the 1inch Orderbook API for maximum exposure to professional resolvers and market makers. Authentication Setup Before submitting orders, obtain your API key: ** Visit**: 1inch Developer Portal ** Register**: Create developer account ** Generate**: API authentication key ** Configure**: Add key to SDK initialization Submission Process // Submit order to global orderbook try { await sdk.submitOrder(order, signature); console.log(\" Order successfully submitted to orderbook!\"); } catch (error) { console.error(\" Submission failed:\", error.message); } Benefits of Orderbook Submission Advantage Description Impact ** Global Reach** Visible to all network participants Higher fill probability ** Fast Matching** Professional resolver network Quick execution ** Best Prices** Competitive market environment Optimal pricing ** Transparency** Public order visibility Market confidence Alternative Approaches ** Flexible Integration** Orderbook submission is optional. You can also: ** Direct Integration**: Embed orders in your own application ü§ù Private Sharing : Share orders with specific counterparties üì° Custom APIs : Build your own order distribution system Integration Complete! You now have the knowledge to create, sign, and manage sophisticated limit orders with the 1inch Protocol SDK. Next Steps üß™ Test Integration - Deploy on testnets first ** Explore Extensions** - Add custom functionality with Extensions ** Study Contracts** - Understand the underlying smart contracts ** Monitor Orders** - Implement order tracking and management",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Limit Orders Integration Guide",
        "anchor": "limit-orders-integration-guide"
      },
      {
        "level": 2,
        "text": "Overview",
        "anchor": "overview"
      },
      {
        "level": 3,
        "text": "Order Lifecycle",
        "anchor": "order-lifecycle"
      },
      {
        "level": 3,
        "text": "Key Benefits",
        "anchor": "key-benefits"
      },
      {
        "level": 2,
        "text": "Creating and Signing a Limit Order",
        "anchor": "creating-and-signing-a-limit-order"
      },
      {
        "level": 3,
        "text": "Complete Implementation Example",
        "anchor": "complete-implementation-example"
      },
      {
        "level": 3,
        "text": "Step-by-Step Breakdown",
        "anchor": "step-by-step-breakdown"
      },
      {
        "level": 2,
        "text": "Cryptographic Signing",
        "anchor": "cryptographic-signing"
      },
      {
        "level": 3,
        "text": "Security Guarantees",
        "anchor": "security-guarantees"
      },
      {
        "level": 2,
        "text": "MakerTraits and Order Configuration",
        "anchor": "makertraits-and-order-configuration"
      },
      {
        "level": 3,
        "text": "Core Configuration Options",
        "anchor": "core-configuration-options"
      },
      {
        "level": 3,
        "text": "Advanced Configuration Example",
        "anchor": "advanced-configuration-example"
      },
      {
        "level": 3,
        "text": "Use Case Examples",
        "anchor": "use-case-examples"
      },
      {
        "level": 4,
        "text": "Standard Trading Order",
        "anchor": "standard-trading-order"
      },
      {
        "level": 4,
        "text": "Market Maker Order",
        "anchor": "market-maker-order"
      },
      {
        "level": 4,
        "text": "Private Order",
        "anchor": "private-order"
      },
      {
        "level": 2,
        "text": "Order Field Reference",
        "anchor": "order-field-reference"
      },
      {
        "level": 3,
        "text": "Core Order Fields",
        "anchor": "core-order-fields"
      },
      {
        "level": 3,
        "text": "Field Best Practices",
        "anchor": "field-best-practices"
      },
      {
        "level": 4,
        "text": "Amount Calculations",
        "anchor": "amount-calculations"
      },
      {
        "level": 4,
        "text": "Address Validation",
        "anchor": "address-validation"
      },
      {
        "level": 2,
        "text": "Orderbook Integration",
        "anchor": "orderbook-integration"
      },
      {
        "level": 3,
        "text": "Authentication Setup",
        "anchor": "authentication-setup"
      },
      {
        "level": 3,
        "text": "Submission Process",
        "anchor": "submission-process"
      },
      {
        "level": 3,
        "text": "Benefits of Orderbook Submission",
        "anchor": "benefits-of-orderbook-submission"
      },
      {
        "level": 3,
        "text": "Alternative Approaches",
        "anchor": "alternative-approaches"
      },
      {
        "level": 2,
        "text": "Integration Complete!",
        "anchor": "integration-complete"
      },
      {
        "level": 3,
        "text": "Next Steps",
        "anchor": "next-steps"
      }
    ],
    "excerpt": "Limit Orders Integration Guide ** Complete Integration Walkthrough** Master the art of creating, signing, and managing limit orders with the 1inch Limit Order Protocol SDK. Build sophisticated trading..."
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#limit-orders-integration-guide",
    "title": "integration - Limit Orders Integration Guide",
    "content": "Limit Orders Integration Guide",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#limit-orders-integration-guide",
    "category": "1inch",
    "headings": [],
    "excerpt": "Limit Orders Integration Guide (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#overview",
    "title": "integration - Overview",
    "content": "Overview",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "Overview (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#order-lifecycle",
    "title": "integration - Order Lifecycle",
    "content": "Order Lifecycle",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#order-lifecycle",
    "category": "1inch",
    "headings": [],
    "excerpt": "Order Lifecycle (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#key-benefits",
    "title": "integration - Key Benefits",
    "content": "Key Benefits",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#key-benefits",
    "category": "1inch",
    "headings": [],
    "excerpt": "Key Benefits (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#creating-and-signing-a-limit-order",
    "title": "integration - Creating and Signing a Limit Order",
    "content": "Creating and Signing a Limit Order",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#creating-and-signing-a-limit-order",
    "category": "1inch",
    "headings": [],
    "excerpt": "Creating and Signing a Limit Order (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#complete-implementation-example",
    "title": "integration - Complete Implementation Example",
    "content": "Complete Implementation Example",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#complete-implementation-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Complete Implementation Example (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#step-by-step-breakdown",
    "title": "integration - Step-by-Step Breakdown",
    "content": "Step-by-Step Breakdown",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#step-by-step-breakdown",
    "category": "1inch",
    "headings": [],
    "excerpt": "Step-by-Step Breakdown (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#cryptographic-signing",
    "title": "integration - Cryptographic Signing",
    "content": "Cryptographic Signing",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#cryptographic-signing",
    "category": "1inch",
    "headings": [],
    "excerpt": "Cryptographic Signing (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#security-guarantees",
    "title": "integration - Security Guarantees",
    "content": "Security Guarantees",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#security-guarantees",
    "category": "1inch",
    "headings": [],
    "excerpt": "Security Guarantees (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#makertraits-and-order-configuration",
    "title": "integration - MakerTraits and Order Configuration",
    "content": "MakerTraits and Order Configuration",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#makertraits-and-order-configuration",
    "category": "1inch",
    "headings": [],
    "excerpt": "MakerTraits and Order Configuration (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#core-configuration-options",
    "title": "integration - Core Configuration Options",
    "content": "Core Configuration Options",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#core-configuration-options",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Configuration Options (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#advanced-configuration-example",
    "title": "integration - Advanced Configuration Example",
    "content": "Advanced Configuration Example",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#advanced-configuration-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Advanced Configuration Example (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#use-case-examples",
    "title": "integration - Use Case Examples",
    "content": "Use Case Examples",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#use-case-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Use Case Examples (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#order-field-reference",
    "title": "integration - Order Field Reference",
    "content": "Order Field Reference",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#order-field-reference",
    "category": "1inch",
    "headings": [],
    "excerpt": "Order Field Reference (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#core-order-fields",
    "title": "integration - Core Order Fields",
    "content": "Core Order Fields",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#core-order-fields",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Order Fields (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#field-best-practices",
    "title": "integration - Field Best Practices",
    "content": "Field Best Practices",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#field-best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Field Best Practices (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#orderbook-integration",
    "title": "integration - Orderbook Integration",
    "content": "Orderbook Integration",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#orderbook-integration",
    "category": "1inch",
    "headings": [],
    "excerpt": "Orderbook Integration (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#authentication-setup",
    "title": "integration - Authentication Setup",
    "content": "Authentication Setup",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#authentication-setup",
    "category": "1inch",
    "headings": [],
    "excerpt": "Authentication Setup (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#submission-process",
    "title": "integration - Submission Process",
    "content": "Submission Process",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#submission-process",
    "category": "1inch",
    "headings": [],
    "excerpt": "Submission Process (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#benefits-of-orderbook-submission",
    "title": "integration - Benefits of Orderbook Submission",
    "content": "Benefits of Orderbook Submission",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#benefits-of-orderbook-submission",
    "category": "1inch",
    "headings": [],
    "excerpt": "Benefits of Orderbook Submission (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#alternative-approaches",
    "title": "integration - Alternative Approaches",
    "content": "Alternative Approaches",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#alternative-approaches",
    "category": "1inch",
    "headings": [],
    "excerpt": "Alternative Approaches (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#integration-complete",
    "title": "integration - Integration Complete!",
    "content": "Integration Complete!",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#integration-complete",
    "category": "1inch",
    "headings": [],
    "excerpt": "Integration Complete! (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/integration#next-steps",
    "title": "integration - Next Steps",
    "content": "Next Steps",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/integration#next-steps",
    "category": "1inch",
    "headings": [],
    "excerpt": "Next Steps (from integration)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install",
    "title": "install",
    "content": "1inch Limit Order Protocol v4 SDK Installation Quick Start Guide This guide covers installation and basic setup of the 1inch Limit Order Protocol SDK for integration into your applications. Installation Install the SDK using your preferred package manager: Using Bun bun add '@1inch/limit-order-sdk' Documentation Hub Resource Description Link Limit Order Integration Creating and managing limit orders Integration Guide Contract Interactions Taker contract methods and usage Taker Contract Maker Contract Maker contract functionality Maker Contract SDK Overview Complete feature overview SDK Overview Quick Usage Examples Order Creation ** Security Warning** The private key shown below is for testing purposes only. NEVER use it in production! import { LimitOrder, MakerTraits, Address, Sdk, randBigInt, FetchProviderConnector, } from \"@1inch/limit-order-sdk\"; import { Wallet } from \"ethers\"; // Test private key - DO NOT use in production! const privateKey = \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\"; const apiKey = \"...\"; // Get from https://portal.1inch.dev/ const maker = new Wallet(privateKey); const expiresIn = 120n; // 2 minutes const expiration = BigInt(Math.floor(Date.now() / 1000)) + expiresIn; const UINT_40_MAX = (1n << 48n) - 1n; // Configure order traits const makerTraits = MakerTraits.default() .withExpiration(expiration) .withNonce(randBigInt(UINT_40_MAX)); // Initialize SDK const sdk = new Sdk({ authKey: apiKey, networkId: 1, httpConnector: new FetchProviderConnector(), }); // Create order const order = await sdk.createOrder( { makerAsset: new Address(\"0xdac17f958d2ee523a2206206994597c13d831ec7\"), // USDT takerAsset: new Address(\"0x111111111117dc0aa78b770fa6a738034120c302\"), // 1INCH makingAmount: 100_000000n, // 100 USDT (6 decimals) takingAmount: 10_00000000000000000n, // 10 1INCH (18 decimals) maker: new Address(maker.address), // salt?: bigint (optional) // receiver?: Address (optional) }, makerTraits, ); // Sign the order const typedData = order.getTypedData(); const signature = await maker.signTypedData( typedData.domain, { Order: typedData.types.Order }, typedData.message, ); // Submit to orderbook await sdk.submitOrder(order, signature); RFQ Order Creation ** Pro Tip** RfqOrder is a lightweight, gas-efficient version of LimitOrder optimized for market makers. It doesn't support multiple fills and extensions but offers superior performance. import { RfqOrder, Address, randBigInt } from \"@1inch/limit-order-sdk\"; import { UINT_40_MAX } from \"@1inch/byte-utils\"; import { Wallet } from \"ethers\"; // Test private key - DO NOT use in production! const privateKey = \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\"; const maker = new Wallet(privateKey); const expiresIn = 120n; // 2 minutes const expiration = BigInt(Math.floor(Date.now() / 1000)) + expiresIn; // Create RFQ order const order = new RfqOrder( { makerAsset: new Address(\"0xdac17f958d2ee523a2206206994597c13d831ec7\"), // USDT takerAsset: new Address(\"0x111111111117dc0aa78b770fa6a738034120c302\"), // 1INCH makingAmount: 100_000000n, // 100 USDT (6 decimals) takingAmount: 10_00000000000000000n, // 10 1INCH (18 decimals) maker: new Address(maker.address), }, { allowedSender: new Address(\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\"), // Specific taker only expiration, nonce: randBigInt(UINT_40_MAX), }, ); // Sign the RFQ order const typedData = order.getTypedData(); const signature = await maker.signTypedData( typedData.domain, { Order: typedData.types.Order }, typedData.message, ); RFQ vs Standard Orders Comparison Feature Standard Orders RFQ Orders Gas Efficiency Moderate High Partial Fills Supported Not supported Multiple Fills Supported Not supported Extensions Supported Not supported Market Making Good Excellent API Usage ** Flexible HTTP Connectors** The SDK supports multiple HTTP providers including Fetch API (built-in) and Axios (external package). Basic API Setup import {Api, FetchProviderConnector, LimitOrder, HttpProviderConnector} from '@1inch/limit-order-sdk' const chainId = 1 // Ethereum mainnet const api = new Api({ networkId: chainId, authKey: 'your_api_key', // Get from https://portal.1inch.dev/ httpConnector: new FetchProviderConnector() // Built-in connector }) // Submit order to orderbook const order = ... // üëÜ See order creation examples above const signature = '0x...' await api.submitOrder(order, signature) // Get order by hash const orderHash = order.getOrderHash(chainId) const orderInfo = await api.getOrderByHash(orderHash) // Get all orders by maker address const orders = await api.getOrdersByMaker(order.maker) Using Axios HTTP Provider ** Additional Installation Required** The axios package must be installed separately for this connector. # Install axios first bun add axios import { Api, LimitOrder } from \"@1inch/limit-order-sdk\"; import { AxiosProviderConnector } from \"@1inch/limit-order-sdk/axios\"; const api = new Api({ networkId: 1, // Ethereum mainnet authKey: \"your_api_key\", // Get from https://portal.1inch.dev/ httpConnector: new AxiosProviderConnector(), // Axios-based connector }); HTTP Connector Comparison Connector Dependencies Setup Performance FetchProviderConnector Built-in Simple Native AxiosProviderConnector Requires axios Extra step Feature-rich Testing ** Quality Assurance** The SDK includes comprehensive test suites to ensure reliability and correctness of your integrations. Unit Tests Setup Dependencies # Install all required packages bun install Run Unit Tests # Execute the complete unit test suite bun test Integration Tests ** Advanced Testing** Integration tests use Foundry fork nodes to simulate real blockchain transactions in a controlled environment. Setup Dependencies # Install SDK dependencies and Foundry contracts bun install && forge install Run Integration Tests # Execute full integration test suite bun test:integration Test Coverage Overview Test Type Purpose Location Speed Unit Tests Component validation /tests/unit/ Fast Integration Tests End-to-end workflows /tests/integration/ Moderate ** Development Tip** Run unit tests during development for quick feedback, and integration tests before deployment to ensure full compatibility. Next Steps Installation Complete! You're ready to start building with the 1inch Limit Order SDK. What's Next? ** Read the Integration Guide** - Learn order creation and management ** Explore SDK Features** - Review the complete SDK overview ** Understand Contracts** - Study maker and taker contracts ** Build Extensions** - Add custom functionality Need Help? Documentation : Comprehensive guides and API references 1inch Portal : Get API keys and access developer resources Community : Join the 1inch developer community for support",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "1inch Limit Order Protocol v4 SDK Installation",
        "anchor": "1inch-limit-order-protocol-v4-sdk-installation"
      },
      {
        "level": 2,
        "text": "Installation",
        "anchor": "installation"
      },
      {
        "level": 3,
        "text": "Using Bun",
        "anchor": "using-bun"
      },
      {
        "level": 2,
        "text": "Documentation Hub",
        "anchor": "documentation-hub"
      },
      {
        "level": 2,
        "text": "Quick Usage Examples",
        "anchor": "quick-usage-examples"
      },
      {
        "level": 3,
        "text": "Order Creation",
        "anchor": "order-creation"
      },
      {
        "level": 3,
        "text": "RFQ Order Creation",
        "anchor": "rfq-order-creation"
      },
      {
        "level": 4,
        "text": "RFQ vs Standard Orders Comparison",
        "anchor": "rfq-vs-standard-orders-comparison"
      },
      {
        "level": 2,
        "text": "API Usage",
        "anchor": "api-usage"
      },
      {
        "level": 3,
        "text": "Basic API Setup",
        "anchor": "basic-api-setup"
      },
      {
        "level": 3,
        "text": "Using Axios HTTP Provider",
        "anchor": "using-axios-http-provider"
      },
      {
        "level": 1,
        "text": "Install axios first",
        "anchor": "install-axios-first"
      },
      {
        "level": 4,
        "text": "HTTP Connector Comparison",
        "anchor": "http-connector-comparison"
      },
      {
        "level": 2,
        "text": "Testing",
        "anchor": "testing"
      },
      {
        "level": 3,
        "text": "Unit Tests",
        "anchor": "unit-tests"
      },
      {
        "level": 4,
        "text": "Setup Dependencies",
        "anchor": "setup-dependencies"
      },
      {
        "level": 1,
        "text": "Install all required packages",
        "anchor": "install-all-required-packages"
      },
      {
        "level": 4,
        "text": "Run Unit Tests",
        "anchor": "run-unit-tests"
      },
      {
        "level": 1,
        "text": "Execute the complete unit test suite",
        "anchor": "execute-the-complete-unit-test-suite"
      },
      {
        "level": 3,
        "text": "Integration Tests",
        "anchor": "integration-tests"
      },
      {
        "level": 4,
        "text": "Setup Dependencies",
        "anchor": "setup-dependencies"
      },
      {
        "level": 1,
        "text": "Install SDK dependencies and Foundry contracts",
        "anchor": "install-sdk-dependencies-and-foundry-contracts"
      },
      {
        "level": 4,
        "text": "Run Integration Tests",
        "anchor": "run-integration-tests"
      },
      {
        "level": 1,
        "text": "Execute full integration test suite",
        "anchor": "execute-full-integration-test-suite"
      },
      {
        "level": 3,
        "text": "Test Coverage Overview",
        "anchor": "test-coverage-overview"
      },
      {
        "level": 2,
        "text": "Next Steps",
        "anchor": "next-steps"
      },
      {
        "level": 3,
        "text": "What's Next?",
        "anchor": "whats-next"
      },
      {
        "level": 3,
        "text": "Need Help?",
        "anchor": "need-help"
      }
    ],
    "excerpt": "1inch Limit Order Protocol v4 SDK Installation Quick Start Guide This guide covers installation and basic setup of the 1inch Limit Order Protocol SDK for integration into your applications. Installati..."
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#1inch-limit-order-protocol-v4-sdk-installation",
    "title": "install - 1inch Limit Order Protocol v4 SDK Installation",
    "content": "1inch Limit Order Protocol v4 SDK Installation",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#1inch-limit-order-protocol-v4-sdk-installation",
    "category": "1inch",
    "headings": [],
    "excerpt": "1inch Limit Order Protocol v4 SDK Installation (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#installation",
    "title": "install - Installation",
    "content": "Installation",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#installation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Installation (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#using-bun",
    "title": "install - Using Bun",
    "content": "Using Bun",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#using-bun",
    "category": "1inch",
    "headings": [],
    "excerpt": "Using Bun (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#documentation-hub",
    "title": "install - Documentation Hub",
    "content": "Documentation Hub",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#documentation-hub",
    "category": "1inch",
    "headings": [],
    "excerpt": "Documentation Hub (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#quick-usage-examples",
    "title": "install - Quick Usage Examples",
    "content": "Quick Usage Examples",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#quick-usage-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Quick Usage Examples (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#order-creation",
    "title": "install - Order Creation",
    "content": "Order Creation",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#order-creation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Order Creation (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#rfq-order-creation",
    "title": "install - RFQ Order Creation",
    "content": "RFQ Order Creation",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#rfq-order-creation",
    "category": "1inch",
    "headings": [],
    "excerpt": "RFQ Order Creation (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#api-usage",
    "title": "install - API Usage",
    "content": "API Usage",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#api-usage",
    "category": "1inch",
    "headings": [],
    "excerpt": "API Usage (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#basic-api-setup",
    "title": "install - Basic API Setup",
    "content": "Basic API Setup",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#basic-api-setup",
    "category": "1inch",
    "headings": [],
    "excerpt": "Basic API Setup (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#using-axios-http-provider",
    "title": "install - Using Axios HTTP Provider",
    "content": "Using Axios HTTP Provider",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#using-axios-http-provider",
    "category": "1inch",
    "headings": [],
    "excerpt": "Using Axios HTTP Provider (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#install-axios-first",
    "title": "install - Install axios first",
    "content": "Install axios first",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#install-axios-first",
    "category": "1inch",
    "headings": [],
    "excerpt": "Install axios first (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#testing",
    "title": "install - Testing",
    "content": "Testing",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#testing",
    "category": "1inch",
    "headings": [],
    "excerpt": "Testing (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#unit-tests",
    "title": "install - Unit Tests",
    "content": "Unit Tests",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#unit-tests",
    "category": "1inch",
    "headings": [],
    "excerpt": "Unit Tests (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#install-all-required-packages",
    "title": "install - Install all required packages",
    "content": "Install all required packages",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#install-all-required-packages",
    "category": "1inch",
    "headings": [],
    "excerpt": "Install all required packages (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#execute-the-complete-unit-test-suite",
    "title": "install - Execute the complete unit test suite",
    "content": "Execute the complete unit test suite",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#execute-the-complete-unit-test-suite",
    "category": "1inch",
    "headings": [],
    "excerpt": "Execute the complete unit test suite (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#integration-tests",
    "title": "install - Integration Tests",
    "content": "Integration Tests",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#integration-tests",
    "category": "1inch",
    "headings": [],
    "excerpt": "Integration Tests (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#install-sdk-dependencies-and-foundry-contracts",
    "title": "install - Install SDK dependencies and Foundry contracts",
    "content": "Install SDK dependencies and Foundry contracts",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#install-sdk-dependencies-and-foundry-contracts",
    "category": "1inch",
    "headings": [],
    "excerpt": "Install SDK dependencies and Foundry contracts (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#execute-full-integration-test-suite",
    "title": "install - Execute full integration test suite",
    "content": "Execute full integration test suite",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#execute-full-integration-test-suite",
    "category": "1inch",
    "headings": [],
    "excerpt": "Execute full integration test suite (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#test-coverage-overview",
    "title": "install - Test Coverage Overview",
    "content": "Test Coverage Overview",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#test-coverage-overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "Test Coverage Overview (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#next-steps",
    "title": "install - Next Steps",
    "content": "Next Steps",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#next-steps",
    "category": "1inch",
    "headings": [],
    "excerpt": "Next Steps (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#whats-next",
    "title": "install - What's Next?",
    "content": "What's Next?",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#whats-next",
    "category": "1inch",
    "headings": [],
    "excerpt": "What's Next? (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/Limit Order SDK/install#need-help",
    "title": "install - Need Help?",
    "content": "Need Help?",
    "url": "/docs/1inch/Limit Order Protocol/Limit Order SDK/install#need-help",
    "category": "1inch",
    "headings": [],
    "excerpt": "Need Help? (from install)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order",
    "title": "fill-order",
    "content": "Filling Limit Orders Order Execution Engine Master the art of filling limit orders in the 1inch Limit Order Protocol v4. From simple fills to complex contract interactions with advanced features. %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% sequenceDiagram participant T as Taker participant SDK as 1inch SDK participant BC as Blockchain participant M as Maker T->>SDK: Query Available Orders SDK->>T: Return Order List T->>T: Select Order to Fill T->>SDK: Generate Fill Calldata SDK->>T: Return Optimized Calldata T->>BC: Submit Transaction BC->>BC: Validate Order Signature BC->>BC: Check Predicate (if exists) BC->>BC: Execute Pre-Interaction BC->>BC: Transfer Tokens BC->>BC: Execute Post-Interaction BC->>M: Transfer Taker Tokens BC->>T: Transfer Maker Tokens BC->>SDK: Emit OrderFilled Event Overview Execution Mastery Learn to efficiently execute limit orders with various filling strategies optimized for different scenarios. Order filling in the 1inch Limit Order Protocol is designed for maximum flexibility and gas efficiency. The protocol provides multiple execution methods tailored for different use cases: Simple fills for basic EOA orders Contract fills for smart contract makers Extended fills with advanced features Optimized gas consumption for each scenario Fill Function Overview Method Selection Guide Choose the optimal filling method based on order type and required features. Available Fill Methods Scenario Order Type Extensions Method Best For Simple Fill EOA Order None fillOrder Basic trading Contract Fill Contract Order None fillContractOrder Smart contract makers Extended Fill EOA Order Has Extensions/Interactions fillOrderArgs Complex strategies Extended Contract Fill Contract Order Has Extensions/Interactions fillContractOrderArgs Enterprise integrations Decision Tree Is the order maker a contract? ‚îú‚îÄ No (EOA) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ Has extensions/interactions? ‚îÇ ‚îú‚îÄ No ‚Üí fillOrder ( Most efficient) ‚îÇ ‚îî‚îÄ Yes ‚Üí fillOrderArgs (üé≠ Full features) ‚îî‚îÄ Yes (Contract) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ Has extensions/interactions? ‚îú‚îÄ No ‚Üí fillContractOrder (üè¢ Contract optimized) ‚îî‚îÄ Yes ‚Üí fillContractOrderArgs ( Enterprise) Core Fill Methods Optimized Execution Each method is optimized for specific use cases, ensuring minimal gas consumption and maximum reliability. fillOrder Lightning Fast Fills Optimized for simple EOA orders without extensions or taker interactions. function fillOrder( IOrderMixin.Order calldata order, bytes32 r, bytes32 vs, uint256 amount, TakerTraits takerTraits ) public payable returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash) Gas Optimization : Most efficient method for standard order fills. SDK Usage import { LimitOrderContract, TakerTraits } from \"@1inch/limit-order-sdk\"; const contract = new LimitOrderContract(); // Simple order fill - maximum gas efficiency const calldata = contract.getFillOrderCalldata( order, // LimitOrderV4Struct signature, // \"0x...\" - EIP-712 signature takerTraits, // TakerTraits configuration fillAmount, // bigint - amount to fill ); // Use calldata in transaction await wallet.sendTransaction({ to: LIMIT_ORDER_PROTOCOL_ADDRESS, data: calldata, value: 0, }); fillContractOrder Smart Contract Integration Specialized for orders where the maker is a smart contract using EIP-1271 signatures. function fillContractOrder( IOrderMixin.Order calldata order, bytes calldata signature, uint256 amount, TakerTraits takerTraits ) public returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash) Security : Handles EIP-1271 signature validation for contract makers. SDK Usage // Contract maker order (e.g., DAO treasury, automated strategy) const calldata = contract.getFillContractOrderCalldata( contractOrder, // Order where maker is a contract signature, // Contract signature (EIP-1271) takerTraits, // Execution preferences fillAmount, // Fill amount ); fillOrderArgs Advanced Functionality Full-featured filling with extensions and taker interactions. function fillOrderArgs( IOrderMixin.Order calldata order, bytes32 r, bytes32 vs, uint256 amount, TakerTraits takerTraits, bytes calldata args ) public payable returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash) Power : Supports all protocol features including: Extensions (predicates, interactions, custom logic) Dynamic amount calculations Pre/post execution hooks Custom taker behaviors SDK Usage // Advanced order with extensions/interactions const advancedTraits = TakerTraits.default() .setAmountMode(AmountMode.maker) .enableNativeUnwrap() .setExtension(orderExtension) .setInteraction(takerInteraction); const calldata = contract.getFillOrderArgsCalldata( order, signature, advancedTraits, // Rich configuration fillAmount, ); fillContractOrderArgs Enterprise Grade Maximum functionality for contract makers with full feature support. function fillContractOrderArgs( IOrderMixin.Order calldata order, bytes calldata signature, uint256 amount, TakerTraits takerTraits, bytes calldata args ) public returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash) Use Cases : Institutional trading systems Advanced trading bots DAO treasury management Cross-protocol integrations Function Parameters Parameter Reference Detailed explanation of all function parameters and their usage. Core Parameters Parameter Type Description order Order The order structure to be filled r bytes32 R-component of EIP-712 signature (EOA orders) vs bytes32 VS-component of EIP-712 signature (EOA orders) signature bytes EIP-1271 signature for contract orders amount uint256 Amount to fill (interpretation depends on TakerTraits) takerTraits TakerTraits Taker's configuration for the fill args bytes Extension data, taker interaction, and target address Return Values Return Value Type Description makingAmount uint256 Actual amount the maker provided takingAmount uint256 Actual amount the taker received orderHash bytes32 Hash of the filled order TakerTraits Configuration Taker DNA System TakerTraits encodes all taker preferences and execution parameters in a single uint256 for gas efficiency. Bit Structure Overview Bit Position ‚îÇ Purpose ‚îÇ Type ‚îÇ Description ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 255 ‚îÇ MAKER_AMOUNT_FLAG ‚îÇ Flag ‚îÇ Amount type selection 254 ‚îÇ UNWRAP_WETH_FLAG ‚îÇ Flag ‚îÇ WETH unwrapping 253 ‚îÇ SKIP_ORDER_PERMIT_FLAG ‚îÇ Flag ‚îÇ Skip maker permit 252 ‚îÇ USE_PERMIT2_FLAG ‚îÇ Flag ‚îÇ Use Permit2 251 ‚îÇ ARGS_HAS_TARGET ‚îÇ Flag ‚îÇ Custom receiver 224-247 ‚îÇ ARGS_EXTENSION_LENGTH ‚îÇ uint24 ‚îÇ Extension data length 200-223 ‚îÇ ARGS_INTERACTION_LENGTH‚îÇ uint24 ‚îÇ Interaction data length 0-184 ‚îÇ THRESHOLD ‚îÇ uint184 ‚îÇ Amount threshold Control Flags Bit Flag Name When Set When Clear Use Case 255 MAKER_AMOUNT_FLAG Amount = making amount Amount = taking amount Specify fill type 254 UNWRAP_WETH_FLAG Unwrap WETH to ETH Keep as WETH Native ETH delivery 253 SKIP_ORDER_PERMIT_FLAG Skip maker permit Execute permit Gas optimization 252 USE_PERMIT2_FLAG Use Permit2 Standard approval Advanced authorization 251 ARGS_HAS_TARGET Custom receiver Use msg.sender Redirect assets Data Fields Bits Field Purpose Details 224-247 Extension Length Size of extension data in args Up to 16MB of data 200-223 Interaction Length Size of interaction data in args Up to 16MB of data 0-184 Threshold Price protection mechanism Slippage protection TakerTraits SDK Methods Developer Interface Comprehensive SDK for configuring taker behavior with a fluent API. Creation & Configuration import { TakerTraits, AmountMode, Address } from \"@1inch/limit-order-sdk\"; // Create default traits const traits = TakerTraits.default(); // Configure fill behavior const configuredTraits = TakerTraits.default() .setAmountMode(AmountMode.maker) // Treat amount as making amount .enableNativeUnwrap() // Convert WETH to ETH .setReceiver(new Address(\"0x1234...\")) // Custom recipient .setAmountThreshold(1000000n) // Slippage protection .setExtension(orderExtension) // Order extensions .setInteraction(takerInteraction); // Taker interaction Core Methods Method Purpose Signature Effect setAmountMode Define amount interpretation (mode: AmountMode) => this Maker vs taker amount enableNativeUnwrap Enable WETH unwrapping () => this Convert WETH to ETH setReceiver Set custom recipient (receiver: Address) => this Redirect maker assets setAmountThreshold Set price protection (threshold: bigint) => this Slippage protection setExtension Include extensions (ext: Extension) => this Advanced features setInteraction Add taker interaction (interaction: Interaction) => this Custom logic Amount Modes Mode Description Amount Interpretation AmountMode.taker Taker amount mode amount = taking amount, making amount calculated AmountMode.maker Maker amount mode amount = making amount, taking amount calculated Threshold Protection The threshold mechanism provides slippage protection: For Taker Amount Mode (flag = 0): threshold ‚â§ amount √ó (makingAmount / takingAmount) For Maker Amount Mode (flag = 1): threshold ‚â• amount √ó (takingAmount / makingAmount) Args Structure Extended Parameters The args parameter contains optional data for advanced fills. Args Components The args calldata is structured based on TakerTraits flags: | Target (20 bytes) | Extension Data (variable) | Interaction Data (variable) | Component Inclusion: Target : Included if ARGS_HAS_TARGET flag is set Extension : Length specified in ARGS_EXTENSION_LENGTH Interaction : Length specified in ARGS_INTERACTION_LENGTH Args Usage Example // Configure complex args structure const traits = TakerTraits.default() .setReceiver(new Address(\"0xcustom_receiver...\")) // Include target .setExtension(orderExtension) // Include extension .setInteraction(takerInteraction); // Include interaction const { trait, args } = traits.encode(); // Use in fill call const calldata = contract.getFillOrderArgsCalldata( order, signature, { asBigInt: () => trait }, // TakerTraits as bigint fillAmount, ); Fill Examples Master Class Implementation Real-world examples showcasing different filling scenarios. Simple Order Fill import { LimitOrderContract, TakerTraits, AmountMode } from \"@1inch/limit-order-sdk\"; class OrderFiller { private contract = new LimitOrderContract(); async fillSimpleOrder(order: LimitOrderV4Struct, signature: string) { // Simple, gas-efficient fill const traits = TakerTraits.default() .setAmountMode(AmountMode.maker); const calldata = this.contract.getFillOrderCalldata( order, signature, traits, order.makingAmount / 2n, // Fill 50% ); return calldata; } } Fill with WETH Unwrapping async fillWithUnwrapping(order: LimitOrderV4Struct, signature: string) { // Fill with WETH unwrapping const traits = TakerTraits.default() .setAmountMode(AmountMode.taker) .enableNativeUnwrap(); // Convert WETH to ETH const calldata = this.contract.getFillOrderArgsCalldata( order, signature, traits, order.takingAmount, ); return calldata; } Contract Order Fill async fillContractOrder(order: LimitOrderV4Struct, signature: string) { // Contract maker with custom receiver const traits = TakerTraits.default() .setReceiver(new Address(\"0x1234...\")); // Custom recipient const calldata = this.contract.getFillContractOrderCalldata( order, signature, traits, order.makingAmount, ); return calldata; } Advanced Fill with Slippage Protection async fillWithSlippageProtection( order: LimitOrderV4Struct, signature: string, maxSlippage: number ) { // Fill with price protection const expectedTakingAmount = order.takingAmount; const minReceived = expectedTakingAmount * BigInt(100 - maxSlippage) / 100n; const traits = TakerTraits.default() .setAmountMode(AmountMode.maker) .setAmountThreshold(minReceived); // Minimum acceptable amount const calldata = this.contract.getFillOrderArgsCalldata( order, signature, traits, order.makingAmount, ); return calldata; } Performance Comparison Method Benchmarks Choose the optimal method for your performance requirements. Method ‚õΩ Gas Cost Speed Features üß© Complexity ** fillOrder** Lowest Fastest üî¥ Basic Simple üè¢ fillContractOrder Low Fast üî¥ Basic Medium üé≠ fillOrderArgs Medium Medium Full Medium ** fillContractOrderArgs** üî¥ Highest üî¥ Slowest Full üî¥ Complex Gas Usage Guidelines fillOrder : ~150,000 gas for simple fills fillContractOrder : ~180,000 gas (EIP-1271 overhead) fillOrderArgs : ~200,000+ gas (depends on extensions) fillContractOrderArgs : ~250,000+ gas (full feature set) Order Cancellation Order Lifecycle Management Multiple strategies for invalidating orders based on different scenarios. Automatic Cancellation Expiration-Based Orders automatically become invalid after their expiration timestamp: // Order expires automatically const traits = MakerTraits.default() .withExpiration(BigInt(Math.floor(Date.now() / 1000)) + 3600n); // 1 hour Error : OrderExpired when attempting to fill expired orders. Predicate-Based Orders become invalid when their predicate evaluates to false: // Order becomes invalid when condition fails const predicate = buildStopLossPredicate(stopPrice); Error : PredicateIsNotTrue when predicate validation fails. Manual Cancellation Cancel by Order Hash Direct cancellation using order hash and traits: function cancelOrder( bytes32 orderHash, MakerTraits makerTraits ) external Important : Use correct makerTraits that match the original order, or cancellation will have no effect. Invalidator Selection : BitInvalidator : Used when partial OR multiple fills are disabled RemainingInvalidator : Used when both partial AND multiple fills are enabled Mass Cancellation by Epoch Cancel multiple orders simultaneously using epoch management: function increaseEpoch(uint256 series) external function advanceEpoch(uint256 series, uint256 amount) external Requirements : Orders must have NEED_CHECK_EPOCH_MANAGER flag set Partial and multiple fills must be allowed Orders must match the current epoch for the series Use Cases : Emergency order cancellation Strategy rotation Risk management Error Handling Troubleshooting Guide Common errors and their solutions. Common Fill Errors Error Cause Solution OrderExpired Order past expiration Use unexpired orders InvalidatedOrder Order manually cancelled Check order status BitInvalidatedOrder Nonce-based cancellation Verify order validity PredicateIsNotTrue Predicate condition failed Check predicate logic WrongSeriesNonce Epoch mismatch Update to current epoch InsufficientBalance Insufficient maker balance Check maker funds InsufficientAllowance Insufficient approval Increase allowance Best Practices Pre-Fill Validation // Validate order before attempting fill async function validateOrder(order: LimitOrderV4Struct): Promise<boolean> { // Check expiration if (order.makerTraits.expiration() !== null) { const now = BigInt(Math.floor(Date.now() / 1000)); if (order.makerTraits.expiration()! < now) { throw new Error(\"Order expired\"); } } // Check maker balance const balance = await tokenContract.balanceOf(order.maker); if (balance < order.makingAmount) { throw new Error(\"Insufficient maker balance\"); } // Check allowance const allowance = await tokenContract.allowance( order.maker, LIMIT_ORDER_PROTOCOL_ADDRESS ); if (allowance < order.makingAmount) { throw new Error(\"Insufficient allowance\"); } return true; } Gas Estimation // Estimate gas before execution async function estimateFillGas( order: LimitOrderV4Struct, signature: string, traits: TakerTraits, amount: bigint ): Promise<bigint> { const calldata = contract.getFillOrderCalldata(order, signature, traits, amount); return await provider.estimateGas({ to: LIMIT_ORDER_PROTOCOL_ADDRESS, data: calldata, }); } Advanced Features Expert Techniques Leverage advanced protocol features for sophisticated trading strategies. Taker Interactions Implement custom logic during order execution: interface ITakerInteraction { function takerInteraction( IOrderMixin.Order calldata order, bytes32 orderHash, address taker, uint256 makingAmount, uint256 takingAmount, uint256 remainingMakingAmount, bytes calldata extraData ) external returns(uint256 offeredTakingAmount); } Benefits : Rate improvement opportunities Custom validation logic Integration with external protocols Dynamic fee calculation Batch Filling Fill multiple orders in a single transaction: // Pseudo-code for batch filling async function batchFillOrders(orders: OrderFillData[]) { const calls = orders.map(({ order, signature, traits, amount }) => contract.getFillOrderCalldata(order, signature, traits, amount) ); // Use multicall or custom batch contract return await batchContract.multiCall(calls); } MEV Protection Implement MEV protection strategies: // Private mempool submission async function fillOrderPrivately(order: LimitOrderV4Struct) { const calldata = contract.getFillOrderCalldata(/* ... */); // Submit via Flashbots or other private pools return await flashbotsProvider.sendBundle([{ to: LIMIT_ORDER_PROTOCOL_ADDRESS, data: calldata, }]); } Integration Examples Real-World Integrations Production-ready patterns for different platforms. Trading Bot Integration class LimitOrderBot { private contract = new LimitOrderContract(); async monitorAndFill() { const profitableOrders = await this.findProfitableOrders(); for (const order of profitableOrders) { try { await this.fillOrderSafely(order); } catch (error) { console.error(`Fill failed: ${error.message}`); } } } private async fillOrderSafely(order: OrderData) { // Implement safety checks, gas estimation, profit calculation const traits = TakerTraits.default() .setAmountMode(AmountMode.maker) .setAmountThreshold(this.calculateMinProfit(order)); const calldata = this.contract.getFillOrderCalldata( order.order, order.signature, traits, order.fillAmount ); return await this.executeWithRetry(calldata); } } DEX Aggregator Integration class DEXAggregator { async getBestPrice(tokenIn: Address, tokenOut: Address, amountIn: bigint) { const [limitOrderPrice, ammPrice] = await Promise.all([ this.getLimitOrderPrice(tokenIn, tokenOut, amountIn), this.getAMMPrice(tokenIn, tokenOut, amountIn) ]); return limitOrderPrice > ammPrice ? this.buildLimitOrderFill(tokenIn, tokenOut, amountIn) : this.buildAMMSwap(tokenIn, tokenOut, amountIn); } } Best Practices Production Guidelines Essential practices for secure and efficient order filling. Security Validate signatures before submission Check order expiration and validity Verify maker balances and allowances Implement slippage protection with thresholds Monitor for MEV attacks and front-running Performance Choose optimal fill method for your use case Batch multiple fills when possible Estimate gas costs before execution Monitor network congestion for timing Cache order data to reduce RPC calls Error Recovery Implement retry logic for failed transactions Handle network failures gracefully Log errors for debugging Monitor success rates and optimize Plan for edge cases and exceptional conditions Next Steps Ready to Execute You now have comprehensive mastery of order execution in the 1inch Limit Order Protocol. Continue Learning Create Orders - Learn order creation strategies Extensions Guide - Advanced protocol features SDK Reference - Complete API documentation Examples - Production code samples Start Building Test Integration - Try different fill scenarios on testnets Optimize Gas - Benchmark different methods for your use case Build Tools - Create utilities for your specific trading strategies Monitor Performance - Track execution success rates and costs",
    "url": "/docs/1inch/Limit Order Protocol/fill-order",
    "category": "1inch",
    "headings": [
      {
        "level": 1,
        "text": "Filling Limit Orders",
        "anchor": "filling-limit-orders"
      },
      {
        "level": 2,
        "text": "Overview",
        "anchor": "overview"
      },
      {
        "level": 2,
        "text": "Fill Function Overview",
        "anchor": "fill-function-overview"
      },
      {
        "level": 3,
        "text": "Available Fill Methods",
        "anchor": "available-fill-methods"
      },
      {
        "level": 3,
        "text": "Decision Tree",
        "anchor": "decision-tree"
      },
      {
        "level": 2,
        "text": "Core Fill Methods",
        "anchor": "core-fill-methods"
      },
      {
        "level": 3,
        "text": "fillOrder",
        "anchor": "fillorder"
      },
      {
        "level": 4,
        "text": "SDK Usage",
        "anchor": "sdk-usage"
      },
      {
        "level": 3,
        "text": "fillContractOrder",
        "anchor": "fillcontractorder"
      },
      {
        "level": 4,
        "text": "SDK Usage",
        "anchor": "sdk-usage"
      },
      {
        "level": 3,
        "text": "fillOrderArgs",
        "anchor": "fillorderargs"
      },
      {
        "level": 4,
        "text": "SDK Usage",
        "anchor": "sdk-usage"
      },
      {
        "level": 3,
        "text": "fillContractOrderArgs",
        "anchor": "fillcontractorderargs"
      },
      {
        "level": 2,
        "text": "Function Parameters",
        "anchor": "function-parameters"
      },
      {
        "level": 3,
        "text": "Core Parameters",
        "anchor": "core-parameters"
      },
      {
        "level": 3,
        "text": "Return Values",
        "anchor": "return-values"
      },
      {
        "level": 2,
        "text": "TakerTraits Configuration",
        "anchor": "takertraits-configuration"
      },
      {
        "level": 3,
        "text": "Bit Structure Overview",
        "anchor": "bit-structure-overview"
      },
      {
        "level": 3,
        "text": "Control Flags",
        "anchor": "control-flags"
      },
      {
        "level": 3,
        "text": "Data Fields",
        "anchor": "data-fields"
      },
      {
        "level": 2,
        "text": "TakerTraits SDK Methods",
        "anchor": "takertraits-sdk-methods"
      },
      {
        "level": 3,
        "text": "Creation & Configuration",
        "anchor": "creation-configuration"
      },
      {
        "level": 3,
        "text": "Core Methods",
        "anchor": "core-methods"
      },
      {
        "level": 3,
        "text": "Amount Modes",
        "anchor": "amount-modes"
      },
      {
        "level": 3,
        "text": "Threshold Protection",
        "anchor": "threshold-protection"
      },
      {
        "level": 2,
        "text": "Args Structure",
        "anchor": "args-structure"
      },
      {
        "level": 3,
        "text": "Args Components",
        "anchor": "args-components"
      },
      {
        "level": 3,
        "text": "Args Usage Example",
        "anchor": "args-usage-example"
      },
      {
        "level": 2,
        "text": "Fill Examples",
        "anchor": "fill-examples"
      },
      {
        "level": 3,
        "text": "Simple Order Fill",
        "anchor": "simple-order-fill"
      },
      {
        "level": 3,
        "text": "Fill with WETH Unwrapping",
        "anchor": "fill-with-weth-unwrapping"
      },
      {
        "level": 3,
        "text": "Contract Order Fill",
        "anchor": "contract-order-fill"
      },
      {
        "level": 3,
        "text": "Advanced Fill with Slippage Protection",
        "anchor": "advanced-fill-with-slippage-protection"
      },
      {
        "level": 2,
        "text": "Performance Comparison",
        "anchor": "performance-comparison"
      },
      {
        "level": 3,
        "text": "Gas Usage Guidelines",
        "anchor": "gas-usage-guidelines"
      },
      {
        "level": 2,
        "text": "Order Cancellation",
        "anchor": "order-cancellation"
      },
      {
        "level": 3,
        "text": "Automatic Cancellation",
        "anchor": "automatic-cancellation"
      },
      {
        "level": 4,
        "text": "Expiration-Based",
        "anchor": "expiration-based"
      },
      {
        "level": 4,
        "text": "Predicate-Based",
        "anchor": "predicate-based"
      },
      {
        "level": 3,
        "text": "Manual Cancellation",
        "anchor": "manual-cancellation"
      },
      {
        "level": 4,
        "text": "Cancel by Order Hash",
        "anchor": "cancel-by-order-hash"
      },
      {
        "level": 4,
        "text": "Mass Cancellation by Epoch",
        "anchor": "mass-cancellation-by-epoch"
      },
      {
        "level": 2,
        "text": "Error Handling",
        "anchor": "error-handling"
      },
      {
        "level": 3,
        "text": "Common Fill Errors",
        "anchor": "common-fill-errors"
      },
      {
        "level": 3,
        "text": "Best Practices",
        "anchor": "best-practices"
      },
      {
        "level": 4,
        "text": "Pre-Fill Validation",
        "anchor": "pre-fill-validation"
      },
      {
        "level": 4,
        "text": "Gas Estimation",
        "anchor": "gas-estimation"
      },
      {
        "level": 2,
        "text": "Advanced Features",
        "anchor": "advanced-features"
      },
      {
        "level": 3,
        "text": "Taker Interactions",
        "anchor": "taker-interactions"
      },
      {
        "level": 3,
        "text": "Batch Filling",
        "anchor": "batch-filling"
      },
      {
        "level": 3,
        "text": "MEV Protection",
        "anchor": "mev-protection"
      },
      {
        "level": 2,
        "text": "Integration Examples",
        "anchor": "integration-examples"
      },
      {
        "level": 3,
        "text": "Trading Bot Integration",
        "anchor": "trading-bot-integration"
      },
      {
        "level": 3,
        "text": "DEX Aggregator Integration",
        "anchor": "dex-aggregator-integration"
      },
      {
        "level": 2,
        "text": "Best Practices",
        "anchor": "best-practices"
      },
      {
        "level": 3,
        "text": "Security",
        "anchor": "security"
      },
      {
        "level": 3,
        "text": "Performance",
        "anchor": "performance"
      },
      {
        "level": 3,
        "text": "Error Recovery",
        "anchor": "error-recovery"
      },
      {
        "level": 2,
        "text": "Next Steps",
        "anchor": "next-steps"
      },
      {
        "level": 3,
        "text": "Continue Learning",
        "anchor": "continue-learning"
      },
      {
        "level": 3,
        "text": "Start Building",
        "anchor": "start-building"
      }
    ],
    "excerpt": "Filling Limit Orders Order Execution Engine Master the art of filling limit orders in the 1inch Limit Order Protocol v4. From simple fills to complex contract interactions with advanced features. %%{i..."
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#filling-limit-orders",
    "title": "fill-order - Filling Limit Orders",
    "content": "Filling Limit Orders",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#filling-limit-orders",
    "category": "1inch",
    "headings": [],
    "excerpt": "Filling Limit Orders (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#overview",
    "title": "fill-order - Overview",
    "content": "Overview",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "Overview (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#fill-function-overview",
    "title": "fill-order - Fill Function Overview",
    "content": "Fill Function Overview",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#fill-function-overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "Fill Function Overview (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#available-fill-methods",
    "title": "fill-order - Available Fill Methods",
    "content": "Available Fill Methods",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#available-fill-methods",
    "category": "1inch",
    "headings": [],
    "excerpt": "Available Fill Methods (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#decision-tree",
    "title": "fill-order - Decision Tree",
    "content": "Decision Tree",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#decision-tree",
    "category": "1inch",
    "headings": [],
    "excerpt": "Decision Tree (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#core-fill-methods",
    "title": "fill-order - Core Fill Methods",
    "content": "Core Fill Methods",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#core-fill-methods",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Fill Methods (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#fillorder",
    "title": "fill-order - fillOrder",
    "content": "fillOrder",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#fillorder",
    "category": "1inch",
    "headings": [],
    "excerpt": "fillOrder (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#fillcontractorder",
    "title": "fill-order - fillContractOrder",
    "content": "fillContractOrder",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#fillcontractorder",
    "category": "1inch",
    "headings": [],
    "excerpt": "fillContractOrder (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#fillorderargs",
    "title": "fill-order - fillOrderArgs",
    "content": "fillOrderArgs",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#fillorderargs",
    "category": "1inch",
    "headings": [],
    "excerpt": "fillOrderArgs (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#fillcontractorderargs",
    "title": "fill-order - fillContractOrderArgs",
    "content": "fillContractOrderArgs",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#fillcontractorderargs",
    "category": "1inch",
    "headings": [],
    "excerpt": "fillContractOrderArgs (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#function-parameters",
    "title": "fill-order - Function Parameters",
    "content": "Function Parameters",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#function-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Function Parameters (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#core-parameters",
    "title": "fill-order - Core Parameters",
    "content": "Core Parameters",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#core-parameters",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Parameters (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#return-values",
    "title": "fill-order - Return Values",
    "content": "Return Values",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#return-values",
    "category": "1inch",
    "headings": [],
    "excerpt": "Return Values (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#takertraits-configuration",
    "title": "fill-order - TakerTraits Configuration",
    "content": "TakerTraits Configuration",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#takertraits-configuration",
    "category": "1inch",
    "headings": [],
    "excerpt": "TakerTraits Configuration (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#bit-structure-overview",
    "title": "fill-order - Bit Structure Overview",
    "content": "Bit Structure Overview",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#bit-structure-overview",
    "category": "1inch",
    "headings": [],
    "excerpt": "Bit Structure Overview (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#control-flags",
    "title": "fill-order - Control Flags",
    "content": "Control Flags",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#control-flags",
    "category": "1inch",
    "headings": [],
    "excerpt": "Control Flags (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#data-fields",
    "title": "fill-order - Data Fields",
    "content": "Data Fields",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#data-fields",
    "category": "1inch",
    "headings": [],
    "excerpt": "Data Fields (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#takertraits-sdk-methods",
    "title": "fill-order - TakerTraits SDK Methods",
    "content": "TakerTraits SDK Methods",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#takertraits-sdk-methods",
    "category": "1inch",
    "headings": [],
    "excerpt": "TakerTraits SDK Methods (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#creation-configuration",
    "title": "fill-order - Creation & Configuration",
    "content": "Creation & Configuration",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#creation-configuration",
    "category": "1inch",
    "headings": [],
    "excerpt": "Creation & Configuration (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#core-methods",
    "title": "fill-order - Core Methods",
    "content": "Core Methods",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#core-methods",
    "category": "1inch",
    "headings": [],
    "excerpt": "Core Methods (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#amount-modes",
    "title": "fill-order - Amount Modes",
    "content": "Amount Modes",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#amount-modes",
    "category": "1inch",
    "headings": [],
    "excerpt": "Amount Modes (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#threshold-protection",
    "title": "fill-order - Threshold Protection",
    "content": "Threshold Protection",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#threshold-protection",
    "category": "1inch",
    "headings": [],
    "excerpt": "Threshold Protection (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#args-structure",
    "title": "fill-order - Args Structure",
    "content": "Args Structure",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#args-structure",
    "category": "1inch",
    "headings": [],
    "excerpt": "Args Structure (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#args-components",
    "title": "fill-order - Args Components",
    "content": "Args Components",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#args-components",
    "category": "1inch",
    "headings": [],
    "excerpt": "Args Components (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#args-usage-example",
    "title": "fill-order - Args Usage Example",
    "content": "Args Usage Example",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#args-usage-example",
    "category": "1inch",
    "headings": [],
    "excerpt": "Args Usage Example (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#fill-examples",
    "title": "fill-order - Fill Examples",
    "content": "Fill Examples",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#fill-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Fill Examples (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#simple-order-fill",
    "title": "fill-order - Simple Order Fill",
    "content": "Simple Order Fill",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#simple-order-fill",
    "category": "1inch",
    "headings": [],
    "excerpt": "Simple Order Fill (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#fill-with-weth-unwrapping",
    "title": "fill-order - Fill with WETH Unwrapping",
    "content": "Fill with WETH Unwrapping",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#fill-with-weth-unwrapping",
    "category": "1inch",
    "headings": [],
    "excerpt": "Fill with WETH Unwrapping (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#contract-order-fill",
    "title": "fill-order - Contract Order Fill",
    "content": "Contract Order Fill",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#contract-order-fill",
    "category": "1inch",
    "headings": [],
    "excerpt": "Contract Order Fill (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#advanced-fill-with-slippage-protection",
    "title": "fill-order - Advanced Fill with Slippage Protection",
    "content": "Advanced Fill with Slippage Protection",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#advanced-fill-with-slippage-protection",
    "category": "1inch",
    "headings": [],
    "excerpt": "Advanced Fill with Slippage Protection (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#performance-comparison",
    "title": "fill-order - Performance Comparison",
    "content": "Performance Comparison",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#performance-comparison",
    "category": "1inch",
    "headings": [],
    "excerpt": "Performance Comparison (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#gas-usage-guidelines",
    "title": "fill-order - Gas Usage Guidelines",
    "content": "Gas Usage Guidelines",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#gas-usage-guidelines",
    "category": "1inch",
    "headings": [],
    "excerpt": "Gas Usage Guidelines (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#order-cancellation",
    "title": "fill-order - Order Cancellation",
    "content": "Order Cancellation",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#order-cancellation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Order Cancellation (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#automatic-cancellation",
    "title": "fill-order - Automatic Cancellation",
    "content": "Automatic Cancellation",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#automatic-cancellation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Automatic Cancellation (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#manual-cancellation",
    "title": "fill-order - Manual Cancellation",
    "content": "Manual Cancellation",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#manual-cancellation",
    "category": "1inch",
    "headings": [],
    "excerpt": "Manual Cancellation (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#error-handling",
    "title": "fill-order - Error Handling",
    "content": "Error Handling",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#error-handling",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Handling (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#common-fill-errors",
    "title": "fill-order - Common Fill Errors",
    "content": "Common Fill Errors",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#common-fill-errors",
    "category": "1inch",
    "headings": [],
    "excerpt": "Common Fill Errors (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#best-practices",
    "title": "fill-order - Best Practices",
    "content": "Best Practices",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Best Practices (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#advanced-features",
    "title": "fill-order - Advanced Features",
    "content": "Advanced Features",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#advanced-features",
    "category": "1inch",
    "headings": [],
    "excerpt": "Advanced Features (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#taker-interactions",
    "title": "fill-order - Taker Interactions",
    "content": "Taker Interactions",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#taker-interactions",
    "category": "1inch",
    "headings": [],
    "excerpt": "Taker Interactions (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#batch-filling",
    "title": "fill-order - Batch Filling",
    "content": "Batch Filling",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#batch-filling",
    "category": "1inch",
    "headings": [],
    "excerpt": "Batch Filling (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#mev-protection",
    "title": "fill-order - MEV Protection",
    "content": "MEV Protection",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#mev-protection",
    "category": "1inch",
    "headings": [],
    "excerpt": "MEV Protection (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#integration-examples",
    "title": "fill-order - Integration Examples",
    "content": "Integration Examples",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#integration-examples",
    "category": "1inch",
    "headings": [],
    "excerpt": "Integration Examples (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#trading-bot-integration",
    "title": "fill-order - Trading Bot Integration",
    "content": "Trading Bot Integration",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#trading-bot-integration",
    "category": "1inch",
    "headings": [],
    "excerpt": "Trading Bot Integration (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#dex-aggregator-integration",
    "title": "fill-order - DEX Aggregator Integration",
    "content": "DEX Aggregator Integration",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#dex-aggregator-integration",
    "category": "1inch",
    "headings": [],
    "excerpt": "DEX Aggregator Integration (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#best-practices",
    "title": "fill-order - Best Practices",
    "content": "Best Practices",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#best-practices",
    "category": "1inch",
    "headings": [],
    "excerpt": "Best Practices (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#security",
    "title": "fill-order - Security",
    "content": "Security",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#security",
    "category": "1inch",
    "headings": [],
    "excerpt": "Security (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#performance",
    "title": "fill-order - Performance",
    "content": "Performance",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#performance",
    "category": "1inch",
    "headings": [],
    "excerpt": "Performance (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#error-recovery",
    "title": "fill-order - Error Recovery",
    "content": "Error Recovery",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#error-recovery",
    "category": "1inch",
    "headings": [],
    "excerpt": "Error Recovery (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#next-steps",
    "title": "fill-order - Next Steps",
    "content": "Next Steps",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#next-steps",
    "category": "1inch",
    "headings": [],
    "excerpt": "Next Steps (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#continue-learning",
    "title": "fill-order - Continue Learning",
    "content": "Continue Learning",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#continue-learning",
    "category": "1inch",
    "headings": [],
    "excerpt": "Continue Learning (from fill-order)"
  },
  {
    "id": "1inch/Limit Order Protocol/fill-order#start-building",
    "title": "fill-order - Start Building",
    "content": "Start Building",
    "url": "/docs/1inch/Limit Order Protocol/fill-order#start-building",
    "category": "1inch",
    "headings": [],
    "excerpt": "Start Building (from fill-order)"
  },
  {
    "id": "1edge/storage",
    "title": "storage",
    "content": "Storage Services Documentation Dual-Storage Architecture : High-performance data persistence using specialized SQLite services for trading data and market data with ACID compliance. 1edge employs a dual-storage architecture with specialized services for different data types: the main Storage Service for trading data and the OHLC Storage Service for market data. Both services use SQLite for high-performance, ACID-compliant data persistence. Service Purpose Database Type Status Storage Service Trading data (orders, positions, strategies) SQLite (main) OHLC Storage Service Market data (candles, price feeds) SQLite (per-symbol) Caching Layer In-memory acceleration Memory + TTL Performance Optimization WAL mode, prepared statements Built-in Architecture Overview %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% graph TB subgraph \"Application Layer\" API[API Server] Collector[Collector Service] OrderRegistry[Order Registry] Strategies[Strategy Engine] end subgraph \"Storage Services\" MainStorage[Storage Service] OHLCStorage[OHLC Storage Service] end subgraph \"Data Persistence\" MainDB[(main: 1edge.db)] OHLCDB1[(BTCUSDT.db)] OHLCDB2[(ETHUSDT.db)] OHLCDB3[(symbol.db...)] end subgraph \"Caching Layer\" MemoryCache[Memory Cache<br/>5s/20s Candles] TokenCache[Token Decimals Cache] MarketCache[Market Data Cache] end API --> MainStorage OrderRegistry --> MainStorage Strategies --> MainStorage Collector --> OHLCStorage MainStorage --> MainDB OHLCStorage --> OHLCDB1 OHLCStorage --> OHLCDB2 OHLCStorage --> OHLCDB3 OHLCStorage --> MemoryCache MainStorage --> TokenCache MainStorage --> MarketCache Storage Service ( back/services/storage.ts ) The main Storage Service handles all trading-related data including orders, positions, strategies, and market data caching. Data Type Storage Method Performance Status Orders SQLite tables + JSON serialization Ultra-fast queries Positions Structured tables Optimized lookups Strategies JSON configuration storage Flexible schema Market Data Cache TTL-based memory cache Sub-millisecond access Core Features Feature Implementation Benefit Status Unified Trading Data Orders, positions, strategies, events Single source of truth Performance Optimization Pre-compiled statements, indexes Ultra-fast queries Object Serialization Raw JSON storage Data integrity Market Data Caching TTL-based ticker/token cache Sub-ms access SQLite Optimizations WAL mode, memory mapping Concurrent access Database Schema Orders Table CREATE TABLE orders ( id TEXT PRIMARY KEY, order_hash TEXT UNIQUE, strategy_id TEXT, type TEXT NOT NULL, status TEXT NOT NULL, maker_asset TEXT NOT NULL, taker_asset TEXT NOT NULL, making_amount TEXT NOT NULL, taking_amount TEXT NOT NULL, maker TEXT NOT NULL, receiver TEXT, salt TEXT, signature TEXT, size TEXT NOT NULL, remaining_size TEXT NOT NULL, trigger_count INTEGER DEFAULT 0, next_trigger_value TEXT, trigger_price REAL, filled_amount TEXT DEFAULT '0', created_at INTEGER NOT NULL, executed_at INTEGER, cancelled_at INTEGER, tx_hash TEXT, network INTEGER NOT NULL, expiry INTEGER, user_signed_payload TEXT, one_inch_order_hashes TEXT, raw_data TEXT NOT NULL -- Complete Order object as JSON ); Positions Table CREATE TABLE positions ( id TEXT PRIMARY KEY, strategy_id TEXT NOT NULL, symbol TEXT NOT NULL, side TEXT NOT NULL, entry_price REAL NOT NULL, current_price REAL, size TEXT NOT NULL, size_usd REAL NOT NULL, pnl REAL, pnl_percent REAL, opened_at INTEGER NOT NULL, closed_at INTEGER ); Strategies Table CREATE TABLE strategies ( id TEXT PRIMARY KEY, name TEXT NOT NULL, type TEXT NOT NULL, status TEXT NOT NULL, network INTEGER NOT NULL, enabled INTEGER NOT NULL, config TEXT NOT NULL, -- Complete Strategy object as JSON started_at INTEGER, paused_at INTEGER, stopped_at INTEGER, order_count INTEGER DEFAULT 0, filled_count INTEGER DEFAULT 0, total_volume TEXT DEFAULT '0', pnl REAL DEFAULT 0, pnl_percent REAL DEFAULT 0 ); Performance Optimizations %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% graph LR subgraph \"Query Optimization\" PrepStmt[Prepared Statements] Indexes[Strategic Indexes] BatchOps[Batch Operations] end subgraph \"SQLite Tuning\" WAL[WAL Mode] MemMap[Memory Mapping] CacheSize[10MB Cache] end subgraph \"Application Level\" Serialize[JSON Serialization] TTLCache[TTL-based Caching] AsyncOps[Async Operations] end PrepStmt --> Indexes Indexes --> BatchOps WAL --> MemMap MemMap --> CacheSize Serialize --> TTLCache TTLCache --> AsyncOps Key Operations Order Management // Save complete order with full serialization await saveOrder(order: Order): Promise<void> // Retrieve orders with various filters await getActiveOrders(): Promise<Order[]> await getOrdersByMaker(address: string): Promise<Order[]> await getOrdersByStrategy(strategyId: string): Promise<Order[]> await getPendingOrders(): Promise<Order[]> Position Tracking // Position lifecycle management await savePosition(position: Position): Promise<void> await getOpenPositions(strategyId?: string): Promise<Position[]> await getPosition(id: string): Promise<Position | null> Strategy Management // Strategy CRUD operations await saveStrategy(strategy: Strategy): Promise<void> await getActiveStrategies(): Promise<Strategy[]> await getAllStrategies(): Promise<Strategy[]> Caching System // Market data caching with TTL await cacheTicker(symbol: string, data: TickerFeed, ttl?: number): Promise<void> await getCachedTicker(symbol: string): Promise<TickerFeed | null> // Token metadata caching await cacheTokenDecimals(chainId: number, address: string, decimals: number): Promise<void> await getCachedTokenDecimals(chainId: number, address: string): Promise<number | null> OHLC Storage Service ( back/services/ohlcStorage.ts ) Specialized service for high-performance OHLC (candlestick) data storage and real-time market data processing. Capability Implementation Performance Status Multi-Timeframe Storage 5s, 20s (cache) + 1m, 5m, 30m (DB) Optimized access patterns Real-time Processing Live price feed integration <1ms per update Historical Data 14-day automatic backfill Batch API optimization Per-Symbol Databases Isolated SQLite files Parallel access Architecture %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% graph TB subgraph \"Data Ingestion\" RT[Real-time Prices] Hist[Historical Data] CCXT[CCXT API] end subgraph \"Processing Engine\" Agg[Price Aggregation] TF[Timeframe Processing] Batch[Batch Historical Fetch] end subgraph \"Storage Tiers\" Cache[Memory Cache<br/>5s, 20s candles] DB[SQLite Databases<br/>1m, 5m, 30m candles] end subgraph \"Per-Symbol Databases\" BTC[(BTCUSDT.db)] ETH[(ETHUSDT.db)] More[(Other pairs...)] end RT --> Agg Hist --> Batch CCXT --> Batch Agg --> TF Batch --> TF TF --> Cache TF --> DB DB --> BTC DB --> ETH DB --> More Key Features üïê Multi-Timeframe Support Timeframe Storage Type Size Limit Purpose Status 5s, 20s Memory cache 720/180 candles Ultra-fast access 1m, 5m, 30m SQLite database Unlimited Persistent storage Smart Construction 1m ‚Üí higher TFs Efficient Space optimization Real-time Updates Live price feeds Continuous Current candles Historical Data Management Feature Specification Implementation Status Automatic Backfill 14 days on startup CCXT + Binance API Batch API Calls 1000-candle chunks Rate-limited requests Efficient Storage 1m base data only Local TF construction Data Validation OHLC + sanity checks Integrity verification Per-Symbol Databases Each trading pair gets its own SQLite database for optimal performance: Database Tables Purpose Status BTCUSDT.db candles_1m, candles_5m, candles_30m BTC/USDT data ETHUSDT.db candles_1m, candles_5m, candles_30m ETH/USDT data Symbol.db Standardized schema Per-pair isolation -- Example: BTCUSDT.db CREATE TABLE candles_1m ( timestamp INTEGER PRIMARY KEY, open REAL NOT NULL, high REAL NOT NULL, low REAL NOT NULL, close REAL NOT NULL, volume REAL NOT NULL, created_at INTEGER DEFAULT (strftime('%s', 'now') * 1000) ); CREATE TABLE candles_5m ( timestamp INTEGER PRIMARY KEY, open REAL NOT NULL, high REAL NOT NULL, low REAL NOT NULL, close REAL NOT NULL, volume REAL NOT NULL, created_at INTEGER DEFAULT (strftime('%s', 'now') * 1000) ); CREATE TABLE candles_30m ( timestamp INTEGER PRIMARY KEY, open REAL NOT NULL, high REAL NOT NULL, low REAL NOT NULL, close REAL NOT NULL, volume REAL NOT NULL, created_at INTEGER DEFAULT (strftime('%s', 'now') * 1000) ); Data Flow Real-time Price Processing %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% sequenceDiagram participant P as Price Feed participant O as OHLC Service participant C as Cache participant D as Database participant Q as Save Queue P->>O: Price Update (symbol, price, volume) O->>O: Calculate candle timestamps for all timeframes loop For each timeframe (5s, 20s, 1m, 5m, 30m) O->>O: Update or create candle alt Short timeframe (5s, 20s) O->>C: Store in memory cache C->>C: Maintain size limit (720/180 candles) else Long timeframe (1m, 5m, 30m) O->>Q: Add to async save queue Q->>D: Batch write to SQLite (non-blocking) end end Historical Data Retrieval %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% sequenceDiagram participant S as Startup participant O as OHLC Service participant B as Binance API participant D as Database S->>O: runDataSanityCheck(symbols[]) loop For each symbol O->>O: Check existing data (7+ days) alt Missing data O->>B: fetchHistoricalDataBatch(symbol, '1m', start, end) loop Batch processing (1000 candles each) B->>B: Fetch OHLCV data B-->>O: Return batch O->>O: Wait 250ms (rate limiting) end O->>O: Convert CCXT format to internal O->>D: Store 1-minute candles O->>O: Construct 5m/30m from 1m data O->>D: Store higher timeframes else Data exists O->>O: Skip symbol end end Symbol Format Conversion The service handles conversion between internal symbol formats and CCXT exchange formats: Format Type Example Usage Status Internal Format binance:spot:BTCUSDT 1edge system CCXT Format BTC/USDT Exchange APIs Pair Mapping BTCUSDT ‚Üí BTC/USDT Automatic conversion // Internal format: \"binance:spot:BTCUSDT\" // CCXT format: \"BTC/USDT\" private getCCXTSymbol(symbol: Symbol): string { const pair = this.getPairFromSymbol(symbol); const pairMappings: Record<string, string> = { 'BTCUSDT': 'BTC/USDT', 'ETHUSDT': 'ETH/USDT', 'USDCUSDT': 'USDC/USDT', '1INCHUSDT': '1INCH/USDT', 'AAVEUSDT': 'AAVE/USDT' }; return pairMappings[pair] || pair; } Cache Management Memory-based caching for ultra-fast access to short timeframes: Timeframe Cache Size Duration Purpose Status 5s 720 candles 1 hour Ultra-fast queries 20s 180 candles 1 hour Real-time display Size Management Automatic Ring buffer Memory efficiency // Cache configuration private readonly CACHE_LIMITS = { [OHLCTimeframe.S5]: 720, // 1 hour of 5s candles [OHLCTimeframe.S20]: 180, // 1 hour of 20s candles }; // Automatic size management if (cache.candles.length > cache.maxSize) { cache.candles.shift(); // Remove oldest candle } Async Save Queue System Non-blocking database writes with queue management: Component Purpose Performance Status Price Updates Trigger queue population Real-time Save Queues Buffer writes per timeframe Non-blocking Async Writers Background database writes Parallel processing SQLite DBs Persistent storage ACID compliance %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% graph LR subgraph \"Price Updates\" P1[Price Update 1] P2[Price Update 2] P3[Price Update N] end subgraph \"Save Queues\" Q1[1m Queue] Q5[5m Queue] Q30[30m Queue] end subgraph \"Async Writers\" W1[1m Writer] W5[5m Writer] W30[30m Writer] end subgraph \"SQLite DBs\" DB1[(BTCUSDT.db)] DB2[(ETHUSDT.db)] end P1 --> Q1 P1 --> Q5 P1 --> Q30 P2 --> Q1 P2 --> Q5 P2 --> Q30 P3 --> Q1 P3 --> Q5 P3 --> Q30 Q1 --> W1 Q5 --> W5 Q30 --> W30 W1 --> DB1 W1 --> DB2 W5 --> DB1 W5 --> DB2 W30 --> DB1 W30 --> DB2 API Integration Data Retrieval // Get candles with flexible filtering async getCandles( symbol: Symbol, timeframe: OHLCTimeframe, startTime?: number, endTime?: number, limit?: number ): Promise<OHLCCandle[]> // Get storage statistics async getDataStats(symbol: Symbol): Promise<Record<string, any>> Real-time Processing // Process live price updates async processPriceUpdate( symbol: Symbol, price: number, volume: number = 0 ): Promise<void> // Historical data sanity check (startup) async runDataSanityCheck(symbols: Symbol[]): Promise<void> Data Integrity and Validation OHLC Relationship Validation // Verify candle logic expect(candle.high).toBeGreaterThanOrEqual(Math.max(candle.open, candle.close)); expect(candle.low).toBeLessThanOrEqual(Math.min(candle.open, candle.close)); expect(candle.volume).toBeGreaterThanOrEqual(0); Historical Data Completeness Requirement Specification Status Minimum Data 7 days Automatic Backfill 14 days when missing Data Volume ~20,160 1m candles per symbol Validation Price ranges, OHLC, timestamps Error Handling Error Type Recovery Strategy Status Partial Failures Continue with available data Rate Limit Recovery Exponential backoff Database Locks Queue-based resolution Data Corruption Auto-reconstruction Performance Characteristics Storage Service Metric Performance Target Status Order Queries <1ms Prepared statements Batch Operations 1000+ records/tx High throughput Cache Hit Rate >95% Frequently accessed Database Size ~100MB per 1M orders Efficient storage OHLC Storage Service Metric Performance Specification Status Real-time Updates <1ms per update Ultra-fast processing Historical Fetch ~10s per symbol 14 days backfill Memory Usage ~50MB per symbol Cached timeframes Database Size ~10MB per symbol/year Efficient storage System-wide Performance Metric Capability Notes Status Concurrent Operations 100+ simultaneous r/w WAL mode enables Data Retention Unlimited Disk space dependent Startup Time 30-60 seconds Historical data dependent Recovery Time <5 seconds Crash recovery Monitoring and Maintenance Health Checks Check Type Frequency Purpose Status Data Completeness Regular Expected vs actual records Storage Usage Continuous Disk space monitoring Query Performance Real-time Slow query detection Cache Efficiency Continuous Hit/miss ratio tracking Maintenance Tasks Task Schedule Purpose Status Index Optimization Regular ANALYZE and VACUUM Data Archival Scheduled Cleanup and compression Cache Warming Startup Preload frequent data Backup Procedures Automated SQLite backups Troubleshooting Issue Diagnosis Solution Status Database Locks Long-running transactions Kill/optimize queries Memory Growth Cache size monitoring Cleanup procedures Slow Queries Query plan analysis Add indexes Data Inconsistency Integrity checks Rebuild if needed",
    "url": "/docs/1edge/storage",
    "category": "1edge",
    "headings": [
      {
        "level": 1,
        "text": "Storage Services Documentation",
        "anchor": "storage-services-documentation"
      },
      {
        "level": 2,
        "text": "Architecture Overview",
        "anchor": "architecture-overview"
      },
      {
        "level": 2,
        "text": "Storage Service (`back/services/storage.ts`)",
        "anchor": "storage-service-backservicesstoragets"
      },
      {
        "level": 3,
        "text": "Core Features",
        "anchor": "core-features"
      },
      {
        "level": 3,
        "text": "Database Schema",
        "anchor": "database-schema"
      },
      {
        "level": 4,
        "text": "Orders Table",
        "anchor": "orders-table"
      },
      {
        "level": 4,
        "text": "Positions Table",
        "anchor": "positions-table"
      },
      {
        "level": 4,
        "text": "Strategies Table",
        "anchor": "strategies-table"
      },
      {
        "level": 3,
        "text": "Performance Optimizations",
        "anchor": "performance-optimizations"
      },
      {
        "level": 3,
        "text": "Key Operations",
        "anchor": "key-operations"
      },
      {
        "level": 4,
        "text": "Order Management",
        "anchor": "order-management"
      },
      {
        "level": 4,
        "text": "Position Tracking",
        "anchor": "position-tracking"
      },
      {
        "level": 4,
        "text": "Strategy Management",
        "anchor": "strategy-management"
      },
      {
        "level": 4,
        "text": "Caching System",
        "anchor": "caching-system"
      },
      {
        "level": 2,
        "text": "OHLC Storage Service (`back/services/ohlcStorage.ts`)",
        "anchor": "ohlc-storage-service-backservicesohlcstoragets"
      },
      {
        "level": 3,
        "text": "Architecture",
        "anchor": "architecture"
      },
      {
        "level": 3,
        "text": "Key Features",
        "anchor": "key-features"
      },
      {
        "level": 4,
        "text": "üïê Multi-Timeframe Support",
        "anchor": "multi-timeframe-support"
      },
      {
        "level": 4,
        "text": "Historical Data Management",
        "anchor": "historical-data-management"
      },
      {
        "level": 4,
        "text": "Per-Symbol Databases",
        "anchor": "per-symbol-databases"
      },
      {
        "level": 3,
        "text": "Data Flow",
        "anchor": "data-flow"
      },
      {
        "level": 4,
        "text": "Real-time Price Processing",
        "anchor": "real-time-price-processing"
      },
      {
        "level": 4,
        "text": "Historical Data Retrieval",
        "anchor": "historical-data-retrieval"
      },
      {
        "level": 3,
        "text": "Symbol Format Conversion",
        "anchor": "symbol-format-conversion"
      },
      {
        "level": 3,
        "text": "Cache Management",
        "anchor": "cache-management"
      },
      {
        "level": 3,
        "text": "Async Save Queue System",
        "anchor": "async-save-queue-system"
      },
      {
        "level": 3,
        "text": "API Integration",
        "anchor": "api-integration"
      },
      {
        "level": 4,
        "text": "Data Retrieval",
        "anchor": "data-retrieval"
      },
      {
        "level": 4,
        "text": "Real-time Processing",
        "anchor": "real-time-processing"
      },
      {
        "level": 2,
        "text": "Data Integrity and Validation",
        "anchor": "data-integrity-and-validation"
      },
      {
        "level": 3,
        "text": "OHLC Relationship Validation",
        "anchor": "ohlc-relationship-validation"
      },
      {
        "level": 3,
        "text": "Historical Data Completeness",
        "anchor": "historical-data-completeness"
      },
      {
        "level": 3,
        "text": "Error Handling",
        "anchor": "error-handling"
      },
      {
        "level": 2,
        "text": "Performance Characteristics",
        "anchor": "performance-characteristics"
      },
      {
        "level": 3,
        "text": "Storage Service",
        "anchor": "storage-service"
      },
      {
        "level": 3,
        "text": "OHLC Storage Service",
        "anchor": "ohlc-storage-service"
      },
      {
        "level": 3,
        "text": "System-wide Performance",
        "anchor": "system-wide-performance"
      },
      {
        "level": 2,
        "text": "Monitoring and Maintenance",
        "anchor": "monitoring-and-maintenance"
      },
      {
        "level": 3,
        "text": "Health Checks",
        "anchor": "health-checks"
      },
      {
        "level": 3,
        "text": "Maintenance Tasks",
        "anchor": "maintenance-tasks"
      },
      {
        "level": 3,
        "text": "Troubleshooting",
        "anchor": "troubleshooting"
      }
    ],
    "excerpt": "Storage Services Documentation Dual-Storage Architecture : High-performance data persistence using specialized SQLite services for trading data and market data with ACID compliance. 1edge employs a du..."
  },
  {
    "id": "1edge/storage#storage-services-documentation",
    "title": "storage - Storage Services Documentation",
    "content": "Storage Services Documentation",
    "url": "/docs/1edge/storage#storage-services-documentation",
    "category": "1edge",
    "headings": [],
    "excerpt": "Storage Services Documentation (from storage)"
  },
  {
    "id": "1edge/storage#architecture-overview",
    "title": "storage - Architecture Overview",
    "content": "Architecture Overview",
    "url": "/docs/1edge/storage#architecture-overview",
    "category": "1edge",
    "headings": [],
    "excerpt": "Architecture Overview (from storage)"
  },
  {
    "id": "1edge/storage#storage-service-backservicesstoragets",
    "title": "storage - Storage Service (`back/services/storage.ts`)",
    "content": "Storage Service (`back/services/storage.ts`)",
    "url": "/docs/1edge/storage#storage-service-backservicesstoragets",
    "category": "1edge",
    "headings": [],
    "excerpt": "Storage Service (`back/services/storage.ts`) (from storage)"
  },
  {
    "id": "1edge/storage#core-features",
    "title": "storage - Core Features",
    "content": "Core Features",
    "url": "/docs/1edge/storage#core-features",
    "category": "1edge",
    "headings": [],
    "excerpt": "Core Features (from storage)"
  },
  {
    "id": "1edge/storage#database-schema",
    "title": "storage - Database Schema",
    "content": "Database Schema",
    "url": "/docs/1edge/storage#database-schema",
    "category": "1edge",
    "headings": [],
    "excerpt": "Database Schema (from storage)"
  },
  {
    "id": "1edge/storage#performance-optimizations",
    "title": "storage - Performance Optimizations",
    "content": "Performance Optimizations",
    "url": "/docs/1edge/storage#performance-optimizations",
    "category": "1edge",
    "headings": [],
    "excerpt": "Performance Optimizations (from storage)"
  },
  {
    "id": "1edge/storage#key-operations",
    "title": "storage - Key Operations",
    "content": "Key Operations",
    "url": "/docs/1edge/storage#key-operations",
    "category": "1edge",
    "headings": [],
    "excerpt": "Key Operations (from storage)"
  },
  {
    "id": "1edge/storage#ohlc-storage-service-backservicesohlcstoragets",
    "title": "storage - OHLC Storage Service (`back/services/ohlcStorage.ts`)",
    "content": "OHLC Storage Service (`back/services/ohlcStorage.ts`)",
    "url": "/docs/1edge/storage#ohlc-storage-service-backservicesohlcstoragets",
    "category": "1edge",
    "headings": [],
    "excerpt": "OHLC Storage Service (`back/services/ohlcStorage.ts`) (from storage)"
  },
  {
    "id": "1edge/storage#architecture",
    "title": "storage - Architecture",
    "content": "Architecture",
    "url": "/docs/1edge/storage#architecture",
    "category": "1edge",
    "headings": [],
    "excerpt": "Architecture (from storage)"
  },
  {
    "id": "1edge/storage#key-features",
    "title": "storage - Key Features",
    "content": "Key Features",
    "url": "/docs/1edge/storage#key-features",
    "category": "1edge",
    "headings": [],
    "excerpt": "Key Features (from storage)"
  },
  {
    "id": "1edge/storage#data-flow",
    "title": "storage - Data Flow",
    "content": "Data Flow",
    "url": "/docs/1edge/storage#data-flow",
    "category": "1edge",
    "headings": [],
    "excerpt": "Data Flow (from storage)"
  },
  {
    "id": "1edge/storage#symbol-format-conversion",
    "title": "storage - Symbol Format Conversion",
    "content": "Symbol Format Conversion",
    "url": "/docs/1edge/storage#symbol-format-conversion",
    "category": "1edge",
    "headings": [],
    "excerpt": "Symbol Format Conversion (from storage)"
  },
  {
    "id": "1edge/storage#cache-management",
    "title": "storage - Cache Management",
    "content": "Cache Management",
    "url": "/docs/1edge/storage#cache-management",
    "category": "1edge",
    "headings": [],
    "excerpt": "Cache Management (from storage)"
  },
  {
    "id": "1edge/storage#async-save-queue-system",
    "title": "storage - Async Save Queue System",
    "content": "Async Save Queue System",
    "url": "/docs/1edge/storage#async-save-queue-system",
    "category": "1edge",
    "headings": [],
    "excerpt": "Async Save Queue System (from storage)"
  },
  {
    "id": "1edge/storage#api-integration",
    "title": "storage - API Integration",
    "content": "API Integration",
    "url": "/docs/1edge/storage#api-integration",
    "category": "1edge",
    "headings": [],
    "excerpt": "API Integration (from storage)"
  },
  {
    "id": "1edge/storage#data-integrity-and-validation",
    "title": "storage - Data Integrity and Validation",
    "content": "Data Integrity and Validation",
    "url": "/docs/1edge/storage#data-integrity-and-validation",
    "category": "1edge",
    "headings": [],
    "excerpt": "Data Integrity and Validation (from storage)"
  },
  {
    "id": "1edge/storage#ohlc-relationship-validation",
    "title": "storage - OHLC Relationship Validation",
    "content": "OHLC Relationship Validation",
    "url": "/docs/1edge/storage#ohlc-relationship-validation",
    "category": "1edge",
    "headings": [],
    "excerpt": "OHLC Relationship Validation (from storage)"
  },
  {
    "id": "1edge/storage#historical-data-completeness",
    "title": "storage - Historical Data Completeness",
    "content": "Historical Data Completeness",
    "url": "/docs/1edge/storage#historical-data-completeness",
    "category": "1edge",
    "headings": [],
    "excerpt": "Historical Data Completeness (from storage)"
  },
  {
    "id": "1edge/storage#error-handling",
    "title": "storage - Error Handling",
    "content": "Error Handling",
    "url": "/docs/1edge/storage#error-handling",
    "category": "1edge",
    "headings": [],
    "excerpt": "Error Handling (from storage)"
  },
  {
    "id": "1edge/storage#performance-characteristics",
    "title": "storage - Performance Characteristics",
    "content": "Performance Characteristics",
    "url": "/docs/1edge/storage#performance-characteristics",
    "category": "1edge",
    "headings": [],
    "excerpt": "Performance Characteristics (from storage)"
  },
  {
    "id": "1edge/storage#storage-service",
    "title": "storage - Storage Service",
    "content": "Storage Service",
    "url": "/docs/1edge/storage#storage-service",
    "category": "1edge",
    "headings": [],
    "excerpt": "Storage Service (from storage)"
  },
  {
    "id": "1edge/storage#ohlc-storage-service",
    "title": "storage - OHLC Storage Service",
    "content": "OHLC Storage Service",
    "url": "/docs/1edge/storage#ohlc-storage-service",
    "category": "1edge",
    "headings": [],
    "excerpt": "OHLC Storage Service (from storage)"
  },
  {
    "id": "1edge/storage#system-wide-performance",
    "title": "storage - System-wide Performance",
    "content": "System-wide Performance",
    "url": "/docs/1edge/storage#system-wide-performance",
    "category": "1edge",
    "headings": [],
    "excerpt": "System-wide Performance (from storage)"
  },
  {
    "id": "1edge/storage#monitoring-and-maintenance",
    "title": "storage - Monitoring and Maintenance",
    "content": "Monitoring and Maintenance",
    "url": "/docs/1edge/storage#monitoring-and-maintenance",
    "category": "1edge",
    "headings": [],
    "excerpt": "Monitoring and Maintenance (from storage)"
  },
  {
    "id": "1edge/storage#health-checks",
    "title": "storage - Health Checks",
    "content": "Health Checks",
    "url": "/docs/1edge/storage#health-checks",
    "category": "1edge",
    "headings": [],
    "excerpt": "Health Checks (from storage)"
  },
  {
    "id": "1edge/storage#maintenance-tasks",
    "title": "storage - Maintenance Tasks",
    "content": "Maintenance Tasks",
    "url": "/docs/1edge/storage#maintenance-tasks",
    "category": "1edge",
    "headings": [],
    "excerpt": "Maintenance Tasks (from storage)"
  },
  {
    "id": "1edge/storage#troubleshooting",
    "title": "storage - Troubleshooting",
    "content": "Troubleshooting",
    "url": "/docs/1edge/storage#troubleshooting",
    "category": "1edge",
    "headings": [],
    "excerpt": "Troubleshooting (from storage)"
  },
  {
    "id": "1edge/architecture",
    "title": "architecture",
    "content": "1edge Architecture Technical overview of the 1edge trading platform architecture, services, and integrations. Project Overview 1edge is a trading platform built on 1inch's Limit Order Protocol (LOP) that enables users to create order types and implement automated market making strategies. The platform combines on-chain smart contracts with off-chain keeper infrastructure. Architecture Overview Technology Stack Component Technology Runtime Bun (JavaScript/TypeScript runtime and package manager) Backend TypeScript with microservices architecture Frontend Next.js 15 with React 19, ShadCN UI, and Tailwind CSS Database SQLite with Bun's native SQLite support Market Data CCXT for computing high frequency index prices Smart Contracts Hardhat development environment 1inch Integration Official 1inch Limit Order SDK v4 Monorepo Structure Directory Purpose common/ Shared types, constants, and utilities back/ Backend services front/ Frontend application contracts/ Smart contracts (Hardhat project) docs/ Documentation scripts/ Build and utility scripts data/ Local database and cache files Backend Architecture The backend implements a microservices architecture with isolated services communicating via HTTP and WebSocket protocols. Core Services Service File Purpose Port Collector collector.ts Price data aggregation from exchanges 40008 Order Registry orderRegistry.ts Order lifecycle management 40009 API Server apiServer.ts RESTful API for frontend 40005 WebSocket Server websocketServer.ts Real-time price streaming 40007 Status Checker statusChecker.ts Health monitoring 40011 Collector Service Aggregates price data from multiple exchanges via CCXT Updates weighted averages for configured ticker symbols Caches market data with configurable TTL Performs technical analysis on OHLCV data Order Registry Service The Order Registry is the core service responsible for all order lifecycle management and execution. It operates as an isolated HTTP service. Standalone HTTP service for order management and execution Integrates with 1inch Limit Order SDK for order creation Manages complete order lifecycle (creation, monitoring, execution) Supports multiple order types (TWAP, Range, Iceberg, Stop-Limit, DCA) Automatic watcher recovery on service restart EVM signature verification for order authentication Isolated from main API server for DDOS protection API Server RESTful API for frontend communication Proxies order requests to OrderRegistry service Real-time market data endpoints CORS support for development and production Request/response validation and error handling WebSocket Server Real-time price streaming to frontend clients WebSocket connection management Live market data broadcasting Status Checker Service Health monitoring for all services including OrderRegistry Latency tracking and performance metrics Service availability reporting Supporting Infrastructure Service Purpose Storage Service SQLite database abstraction with order, position, strategy, and market data management Config Service Configuration management with environment variable overrides Market Data Service CCXT integration and price feed aggregation Analysis Service Technical indicator calculations using the technical-indicators library Data Flow %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% graph TD UI[Application] subgraph \"1edge Backend\" J[API Server] E[Order Registry] W[Watchers] B[Collector Service] L[WebSocket Server] C[Storage Service] end subgraph \"1inch Backend\" G[1inch Orderbook API] end subgraph \"On-chain\" DS[DelegateSafe] H[1inch Limit Order Protocol] end %% External A[Exchanges] %% Frontend connections UI --> J L --> UI %% Backend internal connections A -->|CCXT| B B --> C J -->|Proxy| E E --> W L --> C %% 1inch integrations W --> G %% On-chain connections W --> DS DS --> H H --> G Frontend Architecture The frontend is built with Next.js 15 and React 19. Key Components Component Purpose Status StatusPanel Service health monitoring Active FeedsPanel Market data display Active OrdersPanel Order management and tracking Active DocsLayout Documentation interface Active UI Framework Component Technology Base Next.js 15 with React 19 Components ShadCN UI (Radix UI primitives + Tailwind) Icons Lucide React Forms React Hook Form with Zod validation Charts Recharts for data visualization Theming CSS variables with dark/light mode support Smart Contracts Integration Integration with 1inch's Limit Order Protocol v4. 1inch Limit Order Protocol The platform integrates with 1inch's Limit Order Protocol v4: Feature Implementation Status Order Creation Using the 1inch SDK to create properly formatted orders Active Order Signing EIP-712 signature generation for gasless order creation Active Order Submission Direct submission to 1inch orderbook Active Event Monitoring Real-time tracking of order fills and cancellations Active Multi-Network Support Network Chain ID Status Ethereum Mainnet 1 Supported Polygon 137 Supported BSC 56 Supported Arbitrum 42161 Supported Optimism 10 Supported Avalanche 43114 Supported Base 8453 Supported Order Registry Architecture The Order Registry operates as an isolated HTTP service. Service Isolation Benefits Benefit Description Status DDOS Protection Order processing isolated from main API server attacks Implemented Independent Scaling Can be deployed and scaled separately from other services Implemented Fault Tolerance API server failures don't affect ongoing order monitoring Implemented Service Recovery Automatic restoration of order watchers on service restart Implemented HTTP API Endpoints Method Endpoint Purpose Status GET /ping Health check Active GET /orders Get all orders (optional ?maker=address filter) Active GET /orders/{id} Get specific order Active POST /orders Create new order (with EVM signature verification) Active PUT /orders/{id} Modify existing order (cancel + create new) Active POST /orders/{id}/cancel Cancel order Active Order Lifecycle Management %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% sequenceDiagram participant Client participant OrderRegistry participant Database participant Watcher participant OneInch Client->>OrderRegistry: POST /orders (with signature) OrderRegistry->>OrderRegistry: Verify EVM signature OrderRegistry->>Database: Store order OrderRegistry->>Watcher: Initialize watcher OrderRegistry->>Client: Order created (200) loop Every 5 seconds Watcher->>Watcher: Check trigger conditions alt Trigger condition met Watcher->>OneInch: Create limit order OneInch->>Watcher: Order submitted Watcher->>Database: Log execution end end OneInch->>OrderRegistry: Order filled event OrderRegistry->>Database: Update order status OrderRegistry->>Watcher: Stop monitoring Order Watchers Each order type implements the OrderWatcher interface: interface OrderWatcher { shouldTrigger(order: Order): Promise<boolean>; trigger(order: Order, makerAmount: string, takerAmount: string): Promise<void>; updateNextTrigger?(order: Order): void; } Supported Order Types Order Type Purpose Status TWAP Time-weighted average price execution Active Stop-Limit Price trigger with limit execution Active Range Orders Grid-style orders within price ranges Active DCA Dollar-cost averaging with intervals Active Chase-Limit Trailing limit order Active Iceberg Large order concealment with partial reveals Planned Grid Trading Market making grid strategy Planned Momentum Reversal RSI and moving average based strategy Planned Breakout Breakout detection strategy Planned Advanced Order Types The platform supports multiple advanced order types designed to minimize market impact and optimize execution. TWAP (Time-Weighted Average Price) Feature Description Status Purpose Execute large orders over time to minimize market impact Active Implementation Split orders into smaller chunks over specified intervals Active Configuration Total amount, time window, interval count, price limits Active Range Orders Feature Description Status Purpose Single-sided grid orders for specific price ranges Active Implementation Create multiple limit orders at different price levels Active Configuration Price range, grid levels, amount per level, buy/sell side Active Iceberg Orders Feature Description Status Purpose Hide large order size by revealing only small portions Planned Implementation Dynamically refresh visible portions as orders fill Planned Configuration Total amount, visible amount, refresh threshold Planned Market Making Strategies Strategy Description Status Grid Trading Market making grid strategy Planned Momentum Reversion Grid with RSI and moving average adjustments Planned Breakout Breakout detection strategy Planned Technical Indicators & Analysis Real-time technical analysis using the technical-indicators library. Supported Indicators Indicator Purpose Status RSI Relative Strength Index - Momentum oscillator Active EMA/SMA Moving Averages - Trend following indicators Active MACD Moving Average Convergence Divergence - Trend change identification Active Bollinger Bands Volatility and support/resistance levels Active ATR Average True Range - Volatility measurement Active Custom Indicators Extensible framework for additional indicators Development Real-Time Analysis Market data is continuously analyzed using the technical-indicators library Results are cached and updated based on new price data Indicator values are used for strategy trigger conditions Configuration Management Environment-based configuration with hierarchical overrides. Environment Variables Variable Purpose Port/Value Status API_PORT API Server port 40005 Required NEXT_PORT Frontend port 40006 Required WEBSOCKET_PORT WebSocket server port 40007 Required COLLECTOR_PORT Collector service port 40008 Required ORDER_REGISTRY_PORT Order Registry port 40009 Required STATUS_CHECKER_PORT Status checker port 40011 Required DB_PATH Database file path ./data/1edge.db Required ONE_INCH_API_KEY 1inch API authentication User provided Required KEEPER_PK Keeper private key User provided Required LOG_LEVEL Logging verbosity INFO Optional Network RPC Configuration Network Variable Status Ethereum ETH_RPC_URL Required Polygon POLYGON_RPC_URL Required BSC BSC_RPC_URL Required Arbitrum ARBITRUM_RPC_URL Required Optimism OPTIMISM_RPC_URL Required Avalanche AVALANCHE_RPC_URL Required Base BASE_RPC_URL Required Configuration Files File Purpose Status back/default-config.json Default service configurations Active config.json (optional) User overrides for default configuration Optional Environment variables take precedence over configuration files, enabling flexible deployment scenarios. Security Considerations Security measures protecting user funds, private keys, and system integrity. Private Key Management Security Measure Implementation Status Environment Storage Keeper private keys stored as environment variables Implemented No Logging Private keys never logged or exposed in API responses Implemented Session Keys Delegation patterns for enhanced security Future Enhancement API Security Security Measure Implementation Status CORS Configuration Proper CORS setup for frontend access Implemented Input Validation Request validation and sanitization Implemented Rate Limiting Protection against abuse Planned Error Handling Secure error responses without information leakage Implemented Smart Contract Security Security Measure Implementation Status Audited Contracts Integration with audited 1inch contracts Implemented Order Validation EVM signature verification for all orders Implemented Gas Monitoring Gas price monitoring and limits Planned Development Workflow Development workflow with Bun runtime. Setup Commands Command Purpose Status bun run install:all Install all project dependencies Available bun run start:all Start all services in production mode Available bun run dev:back Start backend services in development Available bun run dev:front Start frontend development server Available Build & Quality Scripts Command Purpose Status bun run build Build all components Available bun run lint Code linting and formatting Available bun run typecheck TypeScript validation Available bun run pre-commit Full validation pipeline Available Testing Framework Component Testing Framework Status Backend Bun's built-in test runner Development Frontend Next.js testing integration Development Contracts Hardhat testing framework Development Deployment Architecture Scalable deployment architecture designed for high availability and performance. Production Services Service Deployment Method Status Backend Services Containerized microservices Planned Frontend Static site deployment (Vercel/Netlify) Ready Database Persistent SQLite or PostgreSQL Ready Monitoring Service health and performance tracking Planned Scaling Considerations Aspect Implementation Status Service Scaling Horizontal scaling of individual services Planned Load Balancing Load balancing for API endpoints Planned Database Database replication and backup strategies Planned CDN CDN for frontend assets Planned Integration Points Integration with DeFi infrastructure and market data providers. 1inch Ecosystem Integration Purpose Status Limit Order Protocol Core order execution Active Orderbook API Order submission and querying Active Price Oracle Price validation and triggers Planned Exchange APIs Integration Purpose Status CCXT Multi-exchange market data aggregation Active WebSocket Streams Real-time price updates Future Enhancement REST APIs Historical data and order book data Active Blockchains Integration Purpose Status JSON-RPC Direct blockchain interaction Active Event Monitoring Real-time contract event tracking Active Gas Optimization Dynamic gas price adjustment Planned This architecture provides a foundation for DeFi trading strategies while maintaining security and performance standards. The modular design enables independent scaling and development of each component while ensuring integration across the platform.",
    "url": "/docs/1edge/architecture",
    "category": "1edge",
    "headings": [
      {
        "level": 1,
        "text": "1edge Architecture",
        "anchor": "1edge-architecture"
      },
      {
        "level": 2,
        "text": "Project Overview",
        "anchor": "project-overview"
      },
      {
        "level": 2,
        "text": "Architecture Overview",
        "anchor": "architecture-overview"
      },
      {
        "level": 3,
        "text": "Technology Stack",
        "anchor": "technology-stack"
      },
      {
        "level": 3,
        "text": "Monorepo Structure",
        "anchor": "monorepo-structure"
      },
      {
        "level": 2,
        "text": "Backend Architecture",
        "anchor": "backend-architecture"
      },
      {
        "level": 3,
        "text": "Core Services",
        "anchor": "core-services"
      },
      {
        "level": 4,
        "text": "Collector Service",
        "anchor": "collector-service"
      },
      {
        "level": 4,
        "text": "Order Registry Service",
        "anchor": "order-registry-service"
      },
      {
        "level": 4,
        "text": "API Server",
        "anchor": "api-server"
      },
      {
        "level": 4,
        "text": "WebSocket Server",
        "anchor": "websocket-server"
      },
      {
        "level": 4,
        "text": "Status Checker Service",
        "anchor": "status-checker-service"
      },
      {
        "level": 3,
        "text": "Supporting Infrastructure",
        "anchor": "supporting-infrastructure"
      },
      {
        "level": 3,
        "text": "Data Flow",
        "anchor": "data-flow"
      },
      {
        "level": 2,
        "text": "Frontend Architecture",
        "anchor": "frontend-architecture"
      },
      {
        "level": 3,
        "text": "Key Components",
        "anchor": "key-components"
      },
      {
        "level": 3,
        "text": "UI Framework",
        "anchor": "ui-framework"
      },
      {
        "level": 2,
        "text": "Smart Contracts Integration",
        "anchor": "smart-contracts-integration"
      },
      {
        "level": 3,
        "text": "1inch Limit Order Protocol",
        "anchor": "1inch-limit-order-protocol"
      },
      {
        "level": 3,
        "text": "Multi-Network Support",
        "anchor": "multi-network-support"
      },
      {
        "level": 2,
        "text": "Order Registry Architecture",
        "anchor": "order-registry-architecture"
      },
      {
        "level": 3,
        "text": "Service Isolation Benefits",
        "anchor": "service-isolation-benefits"
      },
      {
        "level": 3,
        "text": "HTTP API Endpoints",
        "anchor": "http-api-endpoints"
      },
      {
        "level": 3,
        "text": "Order Lifecycle Management",
        "anchor": "order-lifecycle-management"
      },
      {
        "level": 3,
        "text": "Order Watchers",
        "anchor": "order-watchers"
      },
      {
        "level": 3,
        "text": "Supported Order Types",
        "anchor": "supported-order-types"
      },
      {
        "level": 2,
        "text": "Advanced Order Types",
        "anchor": "advanced-order-types"
      },
      {
        "level": 3,
        "text": "TWAP (Time-Weighted Average Price)",
        "anchor": "twap-time-weighted-average-price"
      },
      {
        "level": 3,
        "text": "Range Orders",
        "anchor": "range-orders"
      },
      {
        "level": 3,
        "text": "Iceberg Orders",
        "anchor": "iceberg-orders"
      },
      {
        "level": 3,
        "text": "Market Making Strategies",
        "anchor": "market-making-strategies"
      },
      {
        "level": 2,
        "text": "Technical Indicators & Analysis",
        "anchor": "technical-indicators-analysis"
      },
      {
        "level": 3,
        "text": "Supported Indicators",
        "anchor": "supported-indicators"
      },
      {
        "level": 3,
        "text": "Real-Time Analysis",
        "anchor": "real-time-analysis"
      },
      {
        "level": 2,
        "text": "Configuration Management",
        "anchor": "configuration-management"
      },
      {
        "level": 3,
        "text": "Environment Variables",
        "anchor": "environment-variables"
      },
      {
        "level": 3,
        "text": "Network RPC Configuration",
        "anchor": "network-rpc-configuration"
      },
      {
        "level": 3,
        "text": "Configuration Files",
        "anchor": "configuration-files"
      },
      {
        "level": 2,
        "text": "Security Considerations",
        "anchor": "security-considerations"
      },
      {
        "level": 3,
        "text": "Private Key Management",
        "anchor": "private-key-management"
      },
      {
        "level": 3,
        "text": "API Security",
        "anchor": "api-security"
      },
      {
        "level": 3,
        "text": "Smart Contract Security",
        "anchor": "smart-contract-security"
      },
      {
        "level": 2,
        "text": "Development Workflow",
        "anchor": "development-workflow"
      },
      {
        "level": 3,
        "text": "Setup Commands",
        "anchor": "setup-commands"
      },
      {
        "level": 3,
        "text": "Build & Quality Scripts",
        "anchor": "build-quality-scripts"
      },
      {
        "level": 3,
        "text": "Testing Framework",
        "anchor": "testing-framework"
      },
      {
        "level": 2,
        "text": "Deployment Architecture",
        "anchor": "deployment-architecture"
      },
      {
        "level": 3,
        "text": "Production Services",
        "anchor": "production-services"
      },
      {
        "level": 3,
        "text": "Scaling Considerations",
        "anchor": "scaling-considerations"
      },
      {
        "level": 2,
        "text": "Integration Points",
        "anchor": "integration-points"
      },
      {
        "level": 3,
        "text": "1inch Ecosystem",
        "anchor": "1inch-ecosystem"
      },
      {
        "level": 3,
        "text": "Exchange APIs",
        "anchor": "exchange-apis"
      },
      {
        "level": 3,
        "text": "Blockchains",
        "anchor": "blockchains"
      }
    ],
    "excerpt": "1edge Architecture Technical overview of the 1edge trading platform architecture, services, and integrations. Project Overview 1edge is a trading platform built on 1inch's Limit Order Protocol (LOP) t..."
  },
  {
    "id": "1edge/architecture#1edge-architecture",
    "title": "architecture - 1edge Architecture",
    "content": "1edge Architecture",
    "url": "/docs/1edge/architecture#1edge-architecture",
    "category": "1edge",
    "headings": [],
    "excerpt": "1edge Architecture (from architecture)"
  },
  {
    "id": "1edge/architecture#project-overview",
    "title": "architecture - Project Overview",
    "content": "Project Overview",
    "url": "/docs/1edge/architecture#project-overview",
    "category": "1edge",
    "headings": [],
    "excerpt": "Project Overview (from architecture)"
  },
  {
    "id": "1edge/architecture#architecture-overview",
    "title": "architecture - Architecture Overview",
    "content": "Architecture Overview",
    "url": "/docs/1edge/architecture#architecture-overview",
    "category": "1edge",
    "headings": [],
    "excerpt": "Architecture Overview (from architecture)"
  },
  {
    "id": "1edge/architecture#technology-stack",
    "title": "architecture - Technology Stack",
    "content": "Technology Stack",
    "url": "/docs/1edge/architecture#technology-stack",
    "category": "1edge",
    "headings": [],
    "excerpt": "Technology Stack (from architecture)"
  },
  {
    "id": "1edge/architecture#monorepo-structure",
    "title": "architecture - Monorepo Structure",
    "content": "Monorepo Structure",
    "url": "/docs/1edge/architecture#monorepo-structure",
    "category": "1edge",
    "headings": [],
    "excerpt": "Monorepo Structure (from architecture)"
  },
  {
    "id": "1edge/architecture#backend-architecture",
    "title": "architecture - Backend Architecture",
    "content": "Backend Architecture",
    "url": "/docs/1edge/architecture#backend-architecture",
    "category": "1edge",
    "headings": [],
    "excerpt": "Backend Architecture (from architecture)"
  },
  {
    "id": "1edge/architecture#core-services",
    "title": "architecture - Core Services",
    "content": "Core Services",
    "url": "/docs/1edge/architecture#core-services",
    "category": "1edge",
    "headings": [],
    "excerpt": "Core Services (from architecture)"
  },
  {
    "id": "1edge/architecture#supporting-infrastructure",
    "title": "architecture - Supporting Infrastructure",
    "content": "Supporting Infrastructure",
    "url": "/docs/1edge/architecture#supporting-infrastructure",
    "category": "1edge",
    "headings": [],
    "excerpt": "Supporting Infrastructure (from architecture)"
  },
  {
    "id": "1edge/architecture#data-flow",
    "title": "architecture - Data Flow",
    "content": "Data Flow",
    "url": "/docs/1edge/architecture#data-flow",
    "category": "1edge",
    "headings": [],
    "excerpt": "Data Flow (from architecture)"
  },
  {
    "id": "1edge/architecture#frontend-architecture",
    "title": "architecture - Frontend Architecture",
    "content": "Frontend Architecture",
    "url": "/docs/1edge/architecture#frontend-architecture",
    "category": "1edge",
    "headings": [],
    "excerpt": "Frontend Architecture (from architecture)"
  },
  {
    "id": "1edge/architecture#key-components",
    "title": "architecture - Key Components",
    "content": "Key Components",
    "url": "/docs/1edge/architecture#key-components",
    "category": "1edge",
    "headings": [],
    "excerpt": "Key Components (from architecture)"
  },
  {
    "id": "1edge/architecture#ui-framework",
    "title": "architecture - UI Framework",
    "content": "UI Framework",
    "url": "/docs/1edge/architecture#ui-framework",
    "category": "1edge",
    "headings": [],
    "excerpt": "UI Framework (from architecture)"
  },
  {
    "id": "1edge/architecture#smart-contracts-integration",
    "title": "architecture - Smart Contracts Integration",
    "content": "Smart Contracts Integration",
    "url": "/docs/1edge/architecture#smart-contracts-integration",
    "category": "1edge",
    "headings": [],
    "excerpt": "Smart Contracts Integration (from architecture)"
  },
  {
    "id": "1edge/architecture#1inch-limit-order-protocol",
    "title": "architecture - 1inch Limit Order Protocol",
    "content": "1inch Limit Order Protocol",
    "url": "/docs/1edge/architecture#1inch-limit-order-protocol",
    "category": "1edge",
    "headings": [],
    "excerpt": "1inch Limit Order Protocol (from architecture)"
  },
  {
    "id": "1edge/architecture#multi-network-support",
    "title": "architecture - Multi-Network Support",
    "content": "Multi-Network Support",
    "url": "/docs/1edge/architecture#multi-network-support",
    "category": "1edge",
    "headings": [],
    "excerpt": "Multi-Network Support (from architecture)"
  },
  {
    "id": "1edge/architecture#order-registry-architecture",
    "title": "architecture - Order Registry Architecture",
    "content": "Order Registry Architecture",
    "url": "/docs/1edge/architecture#order-registry-architecture",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Registry Architecture (from architecture)"
  },
  {
    "id": "1edge/architecture#service-isolation-benefits",
    "title": "architecture - Service Isolation Benefits",
    "content": "Service Isolation Benefits",
    "url": "/docs/1edge/architecture#service-isolation-benefits",
    "category": "1edge",
    "headings": [],
    "excerpt": "Service Isolation Benefits (from architecture)"
  },
  {
    "id": "1edge/architecture#http-api-endpoints",
    "title": "architecture - HTTP API Endpoints",
    "content": "HTTP API Endpoints",
    "url": "/docs/1edge/architecture#http-api-endpoints",
    "category": "1edge",
    "headings": [],
    "excerpt": "HTTP API Endpoints (from architecture)"
  },
  {
    "id": "1edge/architecture#order-lifecycle-management",
    "title": "architecture - Order Lifecycle Management",
    "content": "Order Lifecycle Management",
    "url": "/docs/1edge/architecture#order-lifecycle-management",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Lifecycle Management (from architecture)"
  },
  {
    "id": "1edge/architecture#order-watchers",
    "title": "architecture - Order Watchers",
    "content": "Order Watchers",
    "url": "/docs/1edge/architecture#order-watchers",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Watchers (from architecture)"
  },
  {
    "id": "1edge/architecture#supported-order-types",
    "title": "architecture - Supported Order Types",
    "content": "Supported Order Types",
    "url": "/docs/1edge/architecture#supported-order-types",
    "category": "1edge",
    "headings": [],
    "excerpt": "Supported Order Types (from architecture)"
  },
  {
    "id": "1edge/architecture#advanced-order-types",
    "title": "architecture - Advanced Order Types",
    "content": "Advanced Order Types",
    "url": "/docs/1edge/architecture#advanced-order-types",
    "category": "1edge",
    "headings": [],
    "excerpt": "Advanced Order Types (from architecture)"
  },
  {
    "id": "1edge/architecture#twap-time-weighted-average-price",
    "title": "architecture - TWAP (Time-Weighted Average Price)",
    "content": "TWAP (Time-Weighted Average Price)",
    "url": "/docs/1edge/architecture#twap-time-weighted-average-price",
    "category": "1edge",
    "headings": [],
    "excerpt": "TWAP (Time-Weighted Average Price) (from architecture)"
  },
  {
    "id": "1edge/architecture#range-orders",
    "title": "architecture - Range Orders",
    "content": "Range Orders",
    "url": "/docs/1edge/architecture#range-orders",
    "category": "1edge",
    "headings": [],
    "excerpt": "Range Orders (from architecture)"
  },
  {
    "id": "1edge/architecture#iceberg-orders",
    "title": "architecture - Iceberg Orders",
    "content": "Iceberg Orders",
    "url": "/docs/1edge/architecture#iceberg-orders",
    "category": "1edge",
    "headings": [],
    "excerpt": "Iceberg Orders (from architecture)"
  },
  {
    "id": "1edge/architecture#market-making-strategies",
    "title": "architecture - Market Making Strategies",
    "content": "Market Making Strategies",
    "url": "/docs/1edge/architecture#market-making-strategies",
    "category": "1edge",
    "headings": [],
    "excerpt": "Market Making Strategies (from architecture)"
  },
  {
    "id": "1edge/architecture#technical-indicators-analysis",
    "title": "architecture - Technical Indicators & Analysis",
    "content": "Technical Indicators & Analysis",
    "url": "/docs/1edge/architecture#technical-indicators-analysis",
    "category": "1edge",
    "headings": [],
    "excerpt": "Technical Indicators & Analysis (from architecture)"
  },
  {
    "id": "1edge/architecture#supported-indicators",
    "title": "architecture - Supported Indicators",
    "content": "Supported Indicators",
    "url": "/docs/1edge/architecture#supported-indicators",
    "category": "1edge",
    "headings": [],
    "excerpt": "Supported Indicators (from architecture)"
  },
  {
    "id": "1edge/architecture#real-time-analysis",
    "title": "architecture - Real-Time Analysis",
    "content": "Real-Time Analysis",
    "url": "/docs/1edge/architecture#real-time-analysis",
    "category": "1edge",
    "headings": [],
    "excerpt": "Real-Time Analysis (from architecture)"
  },
  {
    "id": "1edge/architecture#configuration-management",
    "title": "architecture - Configuration Management",
    "content": "Configuration Management",
    "url": "/docs/1edge/architecture#configuration-management",
    "category": "1edge",
    "headings": [],
    "excerpt": "Configuration Management (from architecture)"
  },
  {
    "id": "1edge/architecture#environment-variables",
    "title": "architecture - Environment Variables",
    "content": "Environment Variables",
    "url": "/docs/1edge/architecture#environment-variables",
    "category": "1edge",
    "headings": [],
    "excerpt": "Environment Variables (from architecture)"
  },
  {
    "id": "1edge/architecture#network-rpc-configuration",
    "title": "architecture - Network RPC Configuration",
    "content": "Network RPC Configuration",
    "url": "/docs/1edge/architecture#network-rpc-configuration",
    "category": "1edge",
    "headings": [],
    "excerpt": "Network RPC Configuration (from architecture)"
  },
  {
    "id": "1edge/architecture#configuration-files",
    "title": "architecture - Configuration Files",
    "content": "Configuration Files",
    "url": "/docs/1edge/architecture#configuration-files",
    "category": "1edge",
    "headings": [],
    "excerpt": "Configuration Files (from architecture)"
  },
  {
    "id": "1edge/architecture#security-considerations",
    "title": "architecture - Security Considerations",
    "content": "Security Considerations",
    "url": "/docs/1edge/architecture#security-considerations",
    "category": "1edge",
    "headings": [],
    "excerpt": "Security Considerations (from architecture)"
  },
  {
    "id": "1edge/architecture#private-key-management",
    "title": "architecture - Private Key Management",
    "content": "Private Key Management",
    "url": "/docs/1edge/architecture#private-key-management",
    "category": "1edge",
    "headings": [],
    "excerpt": "Private Key Management (from architecture)"
  },
  {
    "id": "1edge/architecture#api-security",
    "title": "architecture - API Security",
    "content": "API Security",
    "url": "/docs/1edge/architecture#api-security",
    "category": "1edge",
    "headings": [],
    "excerpt": "API Security (from architecture)"
  },
  {
    "id": "1edge/architecture#smart-contract-security",
    "title": "architecture - Smart Contract Security",
    "content": "Smart Contract Security",
    "url": "/docs/1edge/architecture#smart-contract-security",
    "category": "1edge",
    "headings": [],
    "excerpt": "Smart Contract Security (from architecture)"
  },
  {
    "id": "1edge/architecture#development-workflow",
    "title": "architecture - Development Workflow",
    "content": "Development Workflow",
    "url": "/docs/1edge/architecture#development-workflow",
    "category": "1edge",
    "headings": [],
    "excerpt": "Development Workflow (from architecture)"
  },
  {
    "id": "1edge/architecture#setup-commands",
    "title": "architecture - Setup Commands",
    "content": "Setup Commands",
    "url": "/docs/1edge/architecture#setup-commands",
    "category": "1edge",
    "headings": [],
    "excerpt": "Setup Commands (from architecture)"
  },
  {
    "id": "1edge/architecture#build-quality-scripts",
    "title": "architecture - Build & Quality Scripts",
    "content": "Build & Quality Scripts",
    "url": "/docs/1edge/architecture#build-quality-scripts",
    "category": "1edge",
    "headings": [],
    "excerpt": "Build & Quality Scripts (from architecture)"
  },
  {
    "id": "1edge/architecture#testing-framework",
    "title": "architecture - Testing Framework",
    "content": "Testing Framework",
    "url": "/docs/1edge/architecture#testing-framework",
    "category": "1edge",
    "headings": [],
    "excerpt": "Testing Framework (from architecture)"
  },
  {
    "id": "1edge/architecture#deployment-architecture",
    "title": "architecture - Deployment Architecture",
    "content": "Deployment Architecture",
    "url": "/docs/1edge/architecture#deployment-architecture",
    "category": "1edge",
    "headings": [],
    "excerpt": "Deployment Architecture (from architecture)"
  },
  {
    "id": "1edge/architecture#production-services",
    "title": "architecture - Production Services",
    "content": "Production Services",
    "url": "/docs/1edge/architecture#production-services",
    "category": "1edge",
    "headings": [],
    "excerpt": "Production Services (from architecture)"
  },
  {
    "id": "1edge/architecture#scaling-considerations",
    "title": "architecture - Scaling Considerations",
    "content": "Scaling Considerations",
    "url": "/docs/1edge/architecture#scaling-considerations",
    "category": "1edge",
    "headings": [],
    "excerpt": "Scaling Considerations (from architecture)"
  },
  {
    "id": "1edge/architecture#integration-points",
    "title": "architecture - Integration Points",
    "content": "Integration Points",
    "url": "/docs/1edge/architecture#integration-points",
    "category": "1edge",
    "headings": [],
    "excerpt": "Integration Points (from architecture)"
  },
  {
    "id": "1edge/architecture#1inch-ecosystem",
    "title": "architecture - 1inch Ecosystem",
    "content": "1inch Ecosystem",
    "url": "/docs/1edge/architecture#1inch-ecosystem",
    "category": "1edge",
    "headings": [],
    "excerpt": "1inch Ecosystem (from architecture)"
  },
  {
    "id": "1edge/architecture#exchange-apis",
    "title": "architecture - Exchange APIs",
    "content": "Exchange APIs",
    "url": "/docs/1edge/architecture#exchange-apis",
    "category": "1edge",
    "headings": [],
    "excerpt": "Exchange APIs (from architecture)"
  },
  {
    "id": "1edge/architecture#blockchains",
    "title": "architecture - Blockchains",
    "content": "Blockchains",
    "url": "/docs/1edge/architecture#blockchains",
    "category": "1edge",
    "headings": [],
    "excerpt": "Blockchains (from architecture)"
  },
  {
    "id": "1edge/user-guides",
    "title": "user-guides",
    "content": "",
    "url": "/docs/1edge/user-guides",
    "category": "1edge",
    "headings": [],
    "excerpt": ""
  },
  {
    "id": "1edge/front-end",
    "title": "front-end",
    "content": "",
    "url": "/docs/1edge/front-end",
    "category": "1edge",
    "headings": [],
    "excerpt": ""
  },
  {
    "id": "1edge/collector-service",
    "title": "collector-service",
    "content": "Collector Service Documentation Core Data Engine : The Collector Service is the core of 1edge's real-time price data aggregation and historical data management system. Overview The Collector Service is the core data aggregation and processing component of the 1edge system. It handles real-time price data collection, index price computation, OHLC candle generation, and historical data management with failover capabilities. Component Status Description Multi-Exchange Aggregation Active Real-time price feeds from multiple sources Index Price Computation Active Weighted average calculations with metrics OHLC Candle System Active Multiple timeframes with dual storage Historical Data Management Active Automatic gap filling and batch retrieval Pub/Sub Architecture Active TCP based broadcasting Key Features Real-Time Index Price Computation Feature Implementation Status Multi-Exchange Aggregation Simultaneous data collection Weighted Average Calculation Configurable source weights Advanced Metrics Velocity, dispersion, volume Performance Optimization Non-blocking queues OHLC Candle System Timeframe Storage Type Performance Status 5s, 20s Memory Cache Ultra-fast access 1m, 5m, 30m SQLite Database Persistent storage Async Processing Non-blocking Real-time maintained Boundary Detection Automatic Precise timing Historical Data Management Feature Specification Status Automatic Gap Filling CCXT + Binance API Batch Retrieval 1,000-candle chunks Rate Limiting 250ms between requests Data Retention 14 days minimum Startup Validation Sanity checks on boot Timeframe Construction 1m ‚Üí 5m, 30m Error Recovery Graceful retry logic High-Performance Pub/Sub Architecture Component Technology Capability Status Message Bus TCP Dedicated pub/sub server Broadcasting Multi-subscriber Index prices + OHLC data Rate Control Configurable intervals Prevents overflow Architecture %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% flowchart TD A[Exchange A WebSocket] --> D[Collector Service] B[Exchange B WebSocket] --> D C[Exchange C WebSocket] --> D D --> E[Index Calculator<br/>- Weighted Avg<br/>- Dispersion<br/>- Velocity] D --> F[OHLC Processor<br/>- Boundary Check<br/>- Candle Update<br/>- Async Storage] E --> G[Cache Storage<br/>5s, 20s<br/>Memory & Ring Buffer] F --> G F --> H[SQLite DBs<br/>1m, 5m, 30m] F --> I[Pub/Sub Server<br/>TCP] I --> J[API Server<br/>REST API<br/>OHLC Data] I --> K[WebSocket Server<br/>Real-time] I --> L[Order Executor<br/>Strategy Feeds<br/>Price Triggers] Data Flow 1. Price Data Ingestion Exchange WebSocket ‚Üí onTickerUpdate ‚Üí calculateWeightedAverages ‚Üí OHLC Processing ‚Üí Pub/Sub Broadcast 2. OHLC Candle Processing Price Update ‚Üí Timeframe Check ‚Üí Boundary Detection ‚Üí Candle Close/Open ‚Üí Async Storage ‚Üí Cache/DB 3. Historical Data Flow Startup ‚Üí Data Sanity Check ‚Üí Batch CCXT Fetch ‚Üí Timeframe Construction ‚Üí SQLite Storage 4. Batch Historical Data Retrieval The collector implements a sophisticated batch retrieval system for historical data: Batch Loop: 1. Calculate time range (14 days from current timestamp) 2. Fetch 1,000 candles from start time 3. Process and store candles in database 4. Update start time to last candle + 1 timeframe 5. Wait 250ms (rate limiting) 6. Repeat until all data fetched or API limit reached Key Features: Pagination : Handles Binance's 1,000-candle API limit by automatically requesting successive batches Rate Limiting : 250ms delays between requests to avoid API rate limits Error Handling : Continues with partial data if individual batches fail Progress Tracking : Logs batch progress and total candles fetched Timeframe Awareness : Automatically calculates correct timestamp increments for different timeframes Performance Metrics: 14 days of 1-minute data: 20,160 candles in 21 batches ( 5.5 minutes) 14 days of 5-minute data: 4,032 candles in 5 batches ( 1.5 minutes) 14 days of 30-minute data: 672 candles in 1 batch ( 0.5 minutes) Storage Architecture Per-Pair Database Structure Each trading pair (e.g., BTCUSDT) has its own SQLite database with the following tables: -- 1-minute candles CREATE TABLE candles_1m ( timestamp INTEGER PRIMARY KEY, open REAL NOT NULL, high REAL NOT NULL, low REAL NOT NULL, close REAL NOT NULL, volume REAL NOT NULL, created_at INTEGER DEFAULT (strftime('%s', 'now') * 1000) ); -- 5-minute candles CREATE TABLE candles_5m ( timestamp INTEGER PRIMARY KEY, open REAL NOT NULL, high REAL NOT NULL, low REAL NOT NULL, close REAL NOT NULL, volume REAL NOT NULL, created_at INTEGER DEFAULT (strftime('%s', 'now') * 1000) ); -- 30-minute candles CREATE TABLE candles_30m ( timestamp INTEGER PRIMARY KEY, open REAL NOT NULL, high REAL NOT NULL, low REAL NOT NULL, close REAL NOT NULL, volume REAL NOT NULL, created_at INTEGER DEFAULT (strftime('%s', 'now') * 1000) ); Cache Structure Short-timeframe candles are kept in memory: interface CacheEntry { candles: OHLCCandle[]; maxSize: number; // Ring buffer size } // Cache limits { 5: 720, // 1 hour of 5s candles 20: 180, // 1 hour of 20s candles } API Endpoints OHLC Data Retrieval GET /ohlc/{symbol}?timeframe={seconds}&startTime={timestamp}&endTime={timestamp}&limit={number} Parameters: symbol : Trading pair (e.g., binance:spot:BTCUSDT ) timeframe : Timeframe in seconds (5, 20, 60, 300, 1800) startTime : Start timestamp (optional) endTime : End timestamp (optional) limit : Maximum number of candles (optional) Response: { \"success\": true, \"data\": { \"symbol\": \"binance:spot:BTCUSDT\", \"timeframe\": 60, \"candles\": [ { \"timestamp\": 1640995200000, \"open\": 47000.5, \"high\": 47100.0, \"low\": 46900.0, \"close\": 47050.0, \"volume\": 1250.75 } ], \"count\": 1 } } Data Statistics GET /ohlc-stats/{symbol} Response: { \"success\": true, \"data\": { \"symbol\": \"binance:spot:BTCUSDT\", \"statistics\": { \"60\": { \"count\": 20160, \"oldest\": \"2024-01-01T00:00:00.000Z\", \"newest\": \"2024-01-15T00:00:00.000Z\" }, \"300\": { \"count\": 4032, \"oldest\": \"2024-01-01T00:00:00.000Z\", \"newest\": \"2024-01-15T00:00:00.000Z\" }, \"5_cache\": { \"count\": 720, \"maxSize\": 720 } } } } Configuration Collector Configuration interface CollectorConfig { pollIntervalMs: number; tickers: Record<Symbol, AggregatedTickerConfig>; } interface AggregatedTickerConfig { id: Symbol; name: string; tf: TimeFrame; lookback: number; sources: Record<Symbol, { weight: number }>; } Example Configuration { \"collector\": { \"pollIntervalMs\": 1000, \"tickers\": { \"binance:spot:BTCUSDT\": { \"id\": \"binance:spot:BTCUSDT\", \"name\": \"Bitcoin/USDT\", \"tf\": 60, \"lookback\": 3600, \"sources\": { \"binance:spot:BTCUSDT\": { \"weight\": 1.0 }, \"coinbase:spot:BTC-USD\": { \"weight\": 0.8 } } } } } } Performance Characteristics Metrics Tracked Metric Description Target Average Calculation Time Index price computation < 1ms Max Calculation Time Peak calculation latency < 5ms Average Publish Time Broadcast update time < 2ms Max Publish Time Peak publish latency < 10ms Total Processed Price updates handled Unlimited Dropped Updates Backpressure protection < 1% Performance Optimizations Optimization Implementation Benefit Non-blocking Processing setImmediate async ops Real-time responsiveness Queue Management Max 3 pending per symbol Backpressure protection Batch Operations Grouped DB writes I/O efficiency Ring Buffers Cache memory management Optimal memory usage Concurrent Processing Parallel pair processing Horizontal scalability Monitoring & Logging Health Checks Check Type Frequency Status Database Connectivity Continuous Data Completeness Startup + Hourly WebSocket Status Real-time Pub/Sub Availability Continuous Log Levels Level Content Use Case INFO Service lifecycle, sanity results Operations DEBUG Candle saves, cache ops Development ERROR WebSocket, DB, CCXT failures Critical issues WARN Missing data, config issues Attention needed Metrics Export Statistics are logged every 60 seconds: Collector stats: 5 indexes | Clients: 3 | Performance: {\"avgCalc\":\"0.45ms\",\"maxCalc\":\"2.10ms\",\"avgPub\":\"1.20ms\",\"maxPub\":\"5.30ms\",\"processed\":15420,\"dropped\":0} Error Handling & Recovery WebSocket Failures Scenario Recovery Strategy Status Connection Loss Auto-reconnect (5s interval) Source Unavailable Graceful degradation Weight Rebalancing Redistribute across active Database Failures Issue Type Response Status Write Failures Transaction rollback Temporary Outages Queue persistence Transient Errors Automatic retry Historical Data Failures Failure Mode Mitigation Status API Unavailable Alternative sources Partial Data Reconstruction from timeframes Incomplete History Graceful startup Scalability Considerations Horizontal Scaling Aspect Approach Scalability Trading Pairs Independent processing Linear Database Access Per-pair isolation Unlimited Collector Instances Pub/Sub architecture Multi-instance Vertical Scaling Resource Scaling Pattern Notes Memory Linear with cached timeframes Predictable Storage Linear with retention period Configurable CPU Linear with frequency √ó pairs Optimized Resource Requirements Resource Per Trading Pair Notes Memory ~10MB Cache storage Disk ~50MB/year Historical data CPU ~5% @ 1Hz Update processing Network ~1KB/s WebSocket data Development & Testing Local Development # Start collector service bun run start:collector # Test WebSocket connections bun run test:websocket # Check service status curl http://localhost:40005/services/status API Testing # Get OHLC data curl \"http://localhost:40005/ohlc/binance:spot:BTCUSDT?timeframe=60&limit=100\" # Get data statistics curl \"http://localhost:40005/ohlc-stats/binance:spot:BTCUSDT\" Historical Data Testing # Test historical data retrieval and storage bun test tests/historical-data.test.ts # Test WebSocket and market data integration bun test tests/test-websocket.test.ts Historical Data Test Coverage Test Category Scope Status Batch Retrieval 14 days √ó 1m OHLC from Binance Timeframe Construction Auto 5m, 30m from 1m base Schema Validation DB structure + statistics Rate Limiting 250ms compliance Data Integrity OHLC + timestamp checks Error Recovery Partial data handling Database Inspection # Connect to pair database sqlite3 ./data/ohlc/BTCUSDT.db # Check candle counts SELECT COUNT(*) FROM candles_1m; SELECT MIN(timestamp), MAX(timestamp) FROM candles_1m; Future Enhancements Planned Features Feature Priority Timeline Status Data Compression High Q1 2025 Distributed Storage Medium Q2 2025 Advanced Analytics High Q1 2025 Data Export Low Q3 2025 Backup System High Q1 2025 Performance Improvements Improvement Impact Priority Status Batch Processing +50% DB throughput High Connection Pooling +30% query speed Medium Memory Optimization -20% RAM usage Medium Parallel Processing +100% computation High Troubleshooting Common Issues High Memory Usage # Check cache sizes curl \"http://localhost:40005/ohlc-stats/binance:spot:BTCUSDT\" # Reduce cache limits in configuration # Restart collector service Missing Historical Data # Check data gaps sqlite3 ./data/ohlc/BTCUSDT.db \"SELECT MIN(timestamp), MAX(timestamp) FROM candles_1m\" # Check data completeness (should have ~20,160 1m candles for 14 days) sqlite3 ./data/ohlc/BTCUSDT.db \"SELECT COUNT(*) FROM candles_1m\" # Force re-fetch (delete database and restart) rm ./data/ohlc/BTCUSDT.db bun run start:collector Batch Retrieval Issues # Check for rate limiting errors in logs grep \"rate limit\\|429\\|too many requests\" logs/collector.log # Monitor batch progress during historical fetch tail -f logs/collector.log | grep \"batch\\|Completed batch fetch\" # Verify CCXT Binance connection bun -e \"import ccxt from 'ccxt'; const b = new ccxt.binance(); console.log(await b.fetchMarkets());\" WebSocket Connection Issues # Check network connectivity curl -I https://api.binance.com/api/v3/ping # Review collector logs tail -f logs/collector.log Database Lock Errors # Check for concurrent access lsof ./data/ohlc/BTCUSDT.db # Stop all services and restart bun run kill:all bun run start:services This collector service provides a robust foundation for real-time price data processing and historical data management, ensuring high availability and performance for trading strategy execution.",
    "url": "/docs/1edge/collector-service",
    "category": "1edge",
    "headings": [
      {
        "level": 1,
        "text": "Collector Service Documentation",
        "anchor": "collector-service-documentation"
      },
      {
        "level": 2,
        "text": "Overview",
        "anchor": "overview"
      },
      {
        "level": 2,
        "text": "Key Features",
        "anchor": "key-features"
      },
      {
        "level": 3,
        "text": "Real-Time Index Price Computation",
        "anchor": "real-time-index-price-computation"
      },
      {
        "level": 3,
        "text": "OHLC Candle System",
        "anchor": "ohlc-candle-system"
      },
      {
        "level": 3,
        "text": "Historical Data Management",
        "anchor": "historical-data-management"
      },
      {
        "level": 3,
        "text": "High-Performance Pub/Sub Architecture",
        "anchor": "high-performance-pubsub-architecture"
      },
      {
        "level": 2,
        "text": "Architecture",
        "anchor": "architecture"
      },
      {
        "level": 2,
        "text": "Data Flow",
        "anchor": "data-flow"
      },
      {
        "level": 3,
        "text": "1. Price Data Ingestion",
        "anchor": "1-price-data-ingestion"
      },
      {
        "level": 3,
        "text": "2. OHLC Candle Processing",
        "anchor": "2-ohlc-candle-processing"
      },
      {
        "level": 3,
        "text": "3. Historical Data Flow",
        "anchor": "3-historical-data-flow"
      },
      {
        "level": 3,
        "text": "4. Batch Historical Data Retrieval",
        "anchor": "4-batch-historical-data-retrieval"
      },
      {
        "level": 2,
        "text": "Storage Architecture",
        "anchor": "storage-architecture"
      },
      {
        "level": 3,
        "text": "Per-Pair Database Structure",
        "anchor": "per-pair-database-structure"
      },
      {
        "level": 3,
        "text": "Cache Structure",
        "anchor": "cache-structure"
      },
      {
        "level": 2,
        "text": "API Endpoints",
        "anchor": "api-endpoints"
      },
      {
        "level": 3,
        "text": "OHLC Data Retrieval",
        "anchor": "ohlc-data-retrieval"
      },
      {
        "level": 3,
        "text": "Data Statistics",
        "anchor": "data-statistics"
      },
      {
        "level": 2,
        "text": "Configuration",
        "anchor": "configuration"
      },
      {
        "level": 3,
        "text": "Collector Configuration",
        "anchor": "collector-configuration"
      },
      {
        "level": 3,
        "text": "Example Configuration",
        "anchor": "example-configuration"
      },
      {
        "level": 2,
        "text": "Performance Characteristics",
        "anchor": "performance-characteristics"
      },
      {
        "level": 3,
        "text": "Metrics Tracked",
        "anchor": "metrics-tracked"
      },
      {
        "level": 3,
        "text": "Performance Optimizations",
        "anchor": "performance-optimizations"
      },
      {
        "level": 2,
        "text": "Monitoring & Logging",
        "anchor": "monitoring-logging"
      },
      {
        "level": 3,
        "text": "Health Checks",
        "anchor": "health-checks"
      },
      {
        "level": 3,
        "text": "Log Levels",
        "anchor": "log-levels"
      },
      {
        "level": 3,
        "text": "Metrics Export",
        "anchor": "metrics-export"
      },
      {
        "level": 2,
        "text": "Error Handling & Recovery",
        "anchor": "error-handling-recovery"
      },
      {
        "level": 3,
        "text": "WebSocket Failures",
        "anchor": "websocket-failures"
      },
      {
        "level": 3,
        "text": "Database Failures",
        "anchor": "database-failures"
      },
      {
        "level": 3,
        "text": "Historical Data Failures",
        "anchor": "historical-data-failures"
      },
      {
        "level": 2,
        "text": "Scalability Considerations",
        "anchor": "scalability-considerations"
      },
      {
        "level": 3,
        "text": "Horizontal Scaling",
        "anchor": "horizontal-scaling"
      },
      {
        "level": 3,
        "text": "Vertical Scaling",
        "anchor": "vertical-scaling"
      },
      {
        "level": 3,
        "text": "Resource Requirements",
        "anchor": "resource-requirements"
      },
      {
        "level": 2,
        "text": "Development & Testing",
        "anchor": "development-testing"
      },
      {
        "level": 3,
        "text": "Local Development",
        "anchor": "local-development"
      },
      {
        "level": 1,
        "text": "Start collector service",
        "anchor": "start-collector-service"
      },
      {
        "level": 1,
        "text": "Test WebSocket connections",
        "anchor": "test-websocket-connections"
      },
      {
        "level": 1,
        "text": "Check service status",
        "anchor": "check-service-status"
      },
      {
        "level": 3,
        "text": "API Testing",
        "anchor": "api-testing"
      },
      {
        "level": 1,
        "text": "Get OHLC data",
        "anchor": "get-ohlc-data"
      },
      {
        "level": 1,
        "text": "Get data statistics",
        "anchor": "get-data-statistics"
      },
      {
        "level": 3,
        "text": "Historical Data Testing",
        "anchor": "historical-data-testing"
      },
      {
        "level": 1,
        "text": "Test historical data retrieval and storage",
        "anchor": "test-historical-data-retrieval-and-storage"
      },
      {
        "level": 1,
        "text": "Test WebSocket and market data integration",
        "anchor": "test-websocket-and-market-data-integration"
      },
      {
        "level": 3,
        "text": "Historical Data Test Coverage",
        "anchor": "historical-data-test-coverage"
      },
      {
        "level": 3,
        "text": "Database Inspection",
        "anchor": "database-inspection"
      },
      {
        "level": 1,
        "text": "Connect to pair database",
        "anchor": "connect-to-pair-database"
      },
      {
        "level": 1,
        "text": "Check candle counts",
        "anchor": "check-candle-counts"
      },
      {
        "level": 2,
        "text": "Future Enhancements",
        "anchor": "future-enhancements"
      },
      {
        "level": 3,
        "text": "Planned Features",
        "anchor": "planned-features"
      },
      {
        "level": 3,
        "text": "Performance Improvements",
        "anchor": "performance-improvements"
      },
      {
        "level": 2,
        "text": "Troubleshooting",
        "anchor": "troubleshooting"
      },
      {
        "level": 3,
        "text": "Common Issues",
        "anchor": "common-issues"
      },
      {
        "level": 4,
        "text": "High Memory Usage",
        "anchor": "high-memory-usage"
      },
      {
        "level": 1,
        "text": "Check cache sizes",
        "anchor": "check-cache-sizes"
      },
      {
        "level": 1,
        "text": "Reduce cache limits in configuration",
        "anchor": "reduce-cache-limits-in-configuration"
      },
      {
        "level": 1,
        "text": "Restart collector service",
        "anchor": "restart-collector-service"
      },
      {
        "level": 4,
        "text": "Missing Historical Data",
        "anchor": "missing-historical-data"
      },
      {
        "level": 1,
        "text": "Check data gaps",
        "anchor": "check-data-gaps"
      },
      {
        "level": 1,
        "text": "Check data completeness (should have ~20,160 1m candles for 14 days)",
        "anchor": "check-data-completeness-should-have-20160-1m-candles-for-14-days"
      },
      {
        "level": 1,
        "text": "Force re-fetch (delete database and restart)",
        "anchor": "force-re-fetch-delete-database-and-restart"
      },
      {
        "level": 4,
        "text": "Batch Retrieval Issues",
        "anchor": "batch-retrieval-issues"
      },
      {
        "level": 1,
        "text": "Check for rate limiting errors in logs",
        "anchor": "check-for-rate-limiting-errors-in-logs"
      },
      {
        "level": 1,
        "text": "Monitor batch progress during historical fetch",
        "anchor": "monitor-batch-progress-during-historical-fetch"
      },
      {
        "level": 1,
        "text": "Verify CCXT Binance connection",
        "anchor": "verify-ccxt-binance-connection"
      },
      {
        "level": 4,
        "text": "WebSocket Connection Issues",
        "anchor": "websocket-connection-issues"
      },
      {
        "level": 1,
        "text": "Check network connectivity",
        "anchor": "check-network-connectivity"
      },
      {
        "level": 1,
        "text": "Review collector logs",
        "anchor": "review-collector-logs"
      },
      {
        "level": 4,
        "text": "Database Lock Errors",
        "anchor": "database-lock-errors"
      },
      {
        "level": 1,
        "text": "Check for concurrent access",
        "anchor": "check-for-concurrent-access"
      },
      {
        "level": 1,
        "text": "Stop all services and restart",
        "anchor": "stop-all-services-and-restart"
      }
    ],
    "excerpt": "Collector Service Documentation Core Data Engine : The Collector Service is the core of 1edge's real-time price data aggregation and historical data management system. Overview The Collector Service i..."
  },
  {
    "id": "1edge/collector-service#collector-service-documentation",
    "title": "collector-service - Collector Service Documentation",
    "content": "Collector Service Documentation",
    "url": "/docs/1edge/collector-service#collector-service-documentation",
    "category": "1edge",
    "headings": [],
    "excerpt": "Collector Service Documentation (from collector-service)"
  },
  {
    "id": "1edge/collector-service#overview",
    "title": "collector-service - Overview",
    "content": "Overview",
    "url": "/docs/1edge/collector-service#overview",
    "category": "1edge",
    "headings": [],
    "excerpt": "Overview (from collector-service)"
  },
  {
    "id": "1edge/collector-service#key-features",
    "title": "collector-service - Key Features",
    "content": "Key Features",
    "url": "/docs/1edge/collector-service#key-features",
    "category": "1edge",
    "headings": [],
    "excerpt": "Key Features (from collector-service)"
  },
  {
    "id": "1edge/collector-service#real-time-index-price-computation",
    "title": "collector-service - Real-Time Index Price Computation",
    "content": "Real-Time Index Price Computation",
    "url": "/docs/1edge/collector-service#real-time-index-price-computation",
    "category": "1edge",
    "headings": [],
    "excerpt": "Real-Time Index Price Computation (from collector-service)"
  },
  {
    "id": "1edge/collector-service#ohlc-candle-system",
    "title": "collector-service - OHLC Candle System",
    "content": "OHLC Candle System",
    "url": "/docs/1edge/collector-service#ohlc-candle-system",
    "category": "1edge",
    "headings": [],
    "excerpt": "OHLC Candle System (from collector-service)"
  },
  {
    "id": "1edge/collector-service#historical-data-management",
    "title": "collector-service - Historical Data Management",
    "content": "Historical Data Management",
    "url": "/docs/1edge/collector-service#historical-data-management",
    "category": "1edge",
    "headings": [],
    "excerpt": "Historical Data Management (from collector-service)"
  },
  {
    "id": "1edge/collector-service#high-performance-pubsub-architecture",
    "title": "collector-service - High-Performance Pub/Sub Architecture",
    "content": "High-Performance Pub/Sub Architecture",
    "url": "/docs/1edge/collector-service#high-performance-pubsub-architecture",
    "category": "1edge",
    "headings": [],
    "excerpt": "High-Performance Pub/Sub Architecture (from collector-service)"
  },
  {
    "id": "1edge/collector-service#architecture",
    "title": "collector-service - Architecture",
    "content": "Architecture",
    "url": "/docs/1edge/collector-service#architecture",
    "category": "1edge",
    "headings": [],
    "excerpt": "Architecture (from collector-service)"
  },
  {
    "id": "1edge/collector-service#data-flow",
    "title": "collector-service - Data Flow",
    "content": "Data Flow",
    "url": "/docs/1edge/collector-service#data-flow",
    "category": "1edge",
    "headings": [],
    "excerpt": "Data Flow (from collector-service)"
  },
  {
    "id": "1edge/collector-service#1-price-data-ingestion",
    "title": "collector-service - 1. Price Data Ingestion",
    "content": "1. Price Data Ingestion",
    "url": "/docs/1edge/collector-service#1-price-data-ingestion",
    "category": "1edge",
    "headings": [],
    "excerpt": "1. Price Data Ingestion (from collector-service)"
  },
  {
    "id": "1edge/collector-service#2-ohlc-candle-processing",
    "title": "collector-service - 2. OHLC Candle Processing",
    "content": "2. OHLC Candle Processing",
    "url": "/docs/1edge/collector-service#2-ohlc-candle-processing",
    "category": "1edge",
    "headings": [],
    "excerpt": "2. OHLC Candle Processing (from collector-service)"
  },
  {
    "id": "1edge/collector-service#3-historical-data-flow",
    "title": "collector-service - 3. Historical Data Flow",
    "content": "3. Historical Data Flow",
    "url": "/docs/1edge/collector-service#3-historical-data-flow",
    "category": "1edge",
    "headings": [],
    "excerpt": "3. Historical Data Flow (from collector-service)"
  },
  {
    "id": "1edge/collector-service#4-batch-historical-data-retrieval",
    "title": "collector-service - 4. Batch Historical Data Retrieval",
    "content": "4. Batch Historical Data Retrieval",
    "url": "/docs/1edge/collector-service#4-batch-historical-data-retrieval",
    "category": "1edge",
    "headings": [],
    "excerpt": "4. Batch Historical Data Retrieval (from collector-service)"
  },
  {
    "id": "1edge/collector-service#storage-architecture",
    "title": "collector-service - Storage Architecture",
    "content": "Storage Architecture",
    "url": "/docs/1edge/collector-service#storage-architecture",
    "category": "1edge",
    "headings": [],
    "excerpt": "Storage Architecture (from collector-service)"
  },
  {
    "id": "1edge/collector-service#per-pair-database-structure",
    "title": "collector-service - Per-Pair Database Structure",
    "content": "Per-Pair Database Structure",
    "url": "/docs/1edge/collector-service#per-pair-database-structure",
    "category": "1edge",
    "headings": [],
    "excerpt": "Per-Pair Database Structure (from collector-service)"
  },
  {
    "id": "1edge/collector-service#cache-structure",
    "title": "collector-service - Cache Structure",
    "content": "Cache Structure",
    "url": "/docs/1edge/collector-service#cache-structure",
    "category": "1edge",
    "headings": [],
    "excerpt": "Cache Structure (from collector-service)"
  },
  {
    "id": "1edge/collector-service#api-endpoints",
    "title": "collector-service - API Endpoints",
    "content": "API Endpoints",
    "url": "/docs/1edge/collector-service#api-endpoints",
    "category": "1edge",
    "headings": [],
    "excerpt": "API Endpoints (from collector-service)"
  },
  {
    "id": "1edge/collector-service#ohlc-data-retrieval",
    "title": "collector-service - OHLC Data Retrieval",
    "content": "OHLC Data Retrieval",
    "url": "/docs/1edge/collector-service#ohlc-data-retrieval",
    "category": "1edge",
    "headings": [],
    "excerpt": "OHLC Data Retrieval (from collector-service)"
  },
  {
    "id": "1edge/collector-service#data-statistics",
    "title": "collector-service - Data Statistics",
    "content": "Data Statistics",
    "url": "/docs/1edge/collector-service#data-statistics",
    "category": "1edge",
    "headings": [],
    "excerpt": "Data Statistics (from collector-service)"
  },
  {
    "id": "1edge/collector-service#configuration",
    "title": "collector-service - Configuration",
    "content": "Configuration",
    "url": "/docs/1edge/collector-service#configuration",
    "category": "1edge",
    "headings": [],
    "excerpt": "Configuration (from collector-service)"
  },
  {
    "id": "1edge/collector-service#collector-configuration",
    "title": "collector-service - Collector Configuration",
    "content": "Collector Configuration",
    "url": "/docs/1edge/collector-service#collector-configuration",
    "category": "1edge",
    "headings": [],
    "excerpt": "Collector Configuration (from collector-service)"
  },
  {
    "id": "1edge/collector-service#example-configuration",
    "title": "collector-service - Example Configuration",
    "content": "Example Configuration",
    "url": "/docs/1edge/collector-service#example-configuration",
    "category": "1edge",
    "headings": [],
    "excerpt": "Example Configuration (from collector-service)"
  },
  {
    "id": "1edge/collector-service#performance-characteristics",
    "title": "collector-service - Performance Characteristics",
    "content": "Performance Characteristics",
    "url": "/docs/1edge/collector-service#performance-characteristics",
    "category": "1edge",
    "headings": [],
    "excerpt": "Performance Characteristics (from collector-service)"
  },
  {
    "id": "1edge/collector-service#metrics-tracked",
    "title": "collector-service - Metrics Tracked",
    "content": "Metrics Tracked",
    "url": "/docs/1edge/collector-service#metrics-tracked",
    "category": "1edge",
    "headings": [],
    "excerpt": "Metrics Tracked (from collector-service)"
  },
  {
    "id": "1edge/collector-service#performance-optimizations",
    "title": "collector-service - Performance Optimizations",
    "content": "Performance Optimizations",
    "url": "/docs/1edge/collector-service#performance-optimizations",
    "category": "1edge",
    "headings": [],
    "excerpt": "Performance Optimizations (from collector-service)"
  },
  {
    "id": "1edge/collector-service#monitoring-logging",
    "title": "collector-service - Monitoring & Logging",
    "content": "Monitoring & Logging",
    "url": "/docs/1edge/collector-service#monitoring-logging",
    "category": "1edge",
    "headings": [],
    "excerpt": "Monitoring & Logging (from collector-service)"
  },
  {
    "id": "1edge/collector-service#health-checks",
    "title": "collector-service - Health Checks",
    "content": "Health Checks",
    "url": "/docs/1edge/collector-service#health-checks",
    "category": "1edge",
    "headings": [],
    "excerpt": "Health Checks (from collector-service)"
  },
  {
    "id": "1edge/collector-service#log-levels",
    "title": "collector-service - Log Levels",
    "content": "Log Levels",
    "url": "/docs/1edge/collector-service#log-levels",
    "category": "1edge",
    "headings": [],
    "excerpt": "Log Levels (from collector-service)"
  },
  {
    "id": "1edge/collector-service#metrics-export",
    "title": "collector-service - Metrics Export",
    "content": "Metrics Export",
    "url": "/docs/1edge/collector-service#metrics-export",
    "category": "1edge",
    "headings": [],
    "excerpt": "Metrics Export (from collector-service)"
  },
  {
    "id": "1edge/collector-service#error-handling-recovery",
    "title": "collector-service - Error Handling & Recovery",
    "content": "Error Handling & Recovery",
    "url": "/docs/1edge/collector-service#error-handling-recovery",
    "category": "1edge",
    "headings": [],
    "excerpt": "Error Handling & Recovery (from collector-service)"
  },
  {
    "id": "1edge/collector-service#websocket-failures",
    "title": "collector-service - WebSocket Failures",
    "content": "WebSocket Failures",
    "url": "/docs/1edge/collector-service#websocket-failures",
    "category": "1edge",
    "headings": [],
    "excerpt": "WebSocket Failures (from collector-service)"
  },
  {
    "id": "1edge/collector-service#database-failures",
    "title": "collector-service - Database Failures",
    "content": "Database Failures",
    "url": "/docs/1edge/collector-service#database-failures",
    "category": "1edge",
    "headings": [],
    "excerpt": "Database Failures (from collector-service)"
  },
  {
    "id": "1edge/collector-service#historical-data-failures",
    "title": "collector-service - Historical Data Failures",
    "content": "Historical Data Failures",
    "url": "/docs/1edge/collector-service#historical-data-failures",
    "category": "1edge",
    "headings": [],
    "excerpt": "Historical Data Failures (from collector-service)"
  },
  {
    "id": "1edge/collector-service#scalability-considerations",
    "title": "collector-service - Scalability Considerations",
    "content": "Scalability Considerations",
    "url": "/docs/1edge/collector-service#scalability-considerations",
    "category": "1edge",
    "headings": [],
    "excerpt": "Scalability Considerations (from collector-service)"
  },
  {
    "id": "1edge/collector-service#horizontal-scaling",
    "title": "collector-service - Horizontal Scaling",
    "content": "Horizontal Scaling",
    "url": "/docs/1edge/collector-service#horizontal-scaling",
    "category": "1edge",
    "headings": [],
    "excerpt": "Horizontal Scaling (from collector-service)"
  },
  {
    "id": "1edge/collector-service#vertical-scaling",
    "title": "collector-service - Vertical Scaling",
    "content": "Vertical Scaling",
    "url": "/docs/1edge/collector-service#vertical-scaling",
    "category": "1edge",
    "headings": [],
    "excerpt": "Vertical Scaling (from collector-service)"
  },
  {
    "id": "1edge/collector-service#resource-requirements",
    "title": "collector-service - Resource Requirements",
    "content": "Resource Requirements",
    "url": "/docs/1edge/collector-service#resource-requirements",
    "category": "1edge",
    "headings": [],
    "excerpt": "Resource Requirements (from collector-service)"
  },
  {
    "id": "1edge/collector-service#development-testing",
    "title": "collector-service - Development & Testing",
    "content": "Development & Testing",
    "url": "/docs/1edge/collector-service#development-testing",
    "category": "1edge",
    "headings": [],
    "excerpt": "Development & Testing (from collector-service)"
  },
  {
    "id": "1edge/collector-service#local-development",
    "title": "collector-service - Local Development",
    "content": "Local Development",
    "url": "/docs/1edge/collector-service#local-development",
    "category": "1edge",
    "headings": [],
    "excerpt": "Local Development (from collector-service)"
  },
  {
    "id": "1edge/collector-service#start-collector-service",
    "title": "collector-service - Start collector service",
    "content": "Start collector service",
    "url": "/docs/1edge/collector-service#start-collector-service",
    "category": "1edge",
    "headings": [],
    "excerpt": "Start collector service (from collector-service)"
  },
  {
    "id": "1edge/collector-service#test-websocket-connections",
    "title": "collector-service - Test WebSocket connections",
    "content": "Test WebSocket connections",
    "url": "/docs/1edge/collector-service#test-websocket-connections",
    "category": "1edge",
    "headings": [],
    "excerpt": "Test WebSocket connections (from collector-service)"
  },
  {
    "id": "1edge/collector-service#check-service-status",
    "title": "collector-service - Check service status",
    "content": "Check service status",
    "url": "/docs/1edge/collector-service#check-service-status",
    "category": "1edge",
    "headings": [],
    "excerpt": "Check service status (from collector-service)"
  },
  {
    "id": "1edge/collector-service#api-testing",
    "title": "collector-service - API Testing",
    "content": "API Testing",
    "url": "/docs/1edge/collector-service#api-testing",
    "category": "1edge",
    "headings": [],
    "excerpt": "API Testing (from collector-service)"
  },
  {
    "id": "1edge/collector-service#get-ohlc-data",
    "title": "collector-service - Get OHLC data",
    "content": "Get OHLC data",
    "url": "/docs/1edge/collector-service#get-ohlc-data",
    "category": "1edge",
    "headings": [],
    "excerpt": "Get OHLC data (from collector-service)"
  },
  {
    "id": "1edge/collector-service#get-data-statistics",
    "title": "collector-service - Get data statistics",
    "content": "Get data statistics",
    "url": "/docs/1edge/collector-service#get-data-statistics",
    "category": "1edge",
    "headings": [],
    "excerpt": "Get data statistics (from collector-service)"
  },
  {
    "id": "1edge/collector-service#historical-data-testing",
    "title": "collector-service - Historical Data Testing",
    "content": "Historical Data Testing",
    "url": "/docs/1edge/collector-service#historical-data-testing",
    "category": "1edge",
    "headings": [],
    "excerpt": "Historical Data Testing (from collector-service)"
  },
  {
    "id": "1edge/collector-service#test-historical-data-retrieval-and-storage",
    "title": "collector-service - Test historical data retrieval and storage",
    "content": "Test historical data retrieval and storage",
    "url": "/docs/1edge/collector-service#test-historical-data-retrieval-and-storage",
    "category": "1edge",
    "headings": [],
    "excerpt": "Test historical data retrieval and storage (from collector-service)"
  },
  {
    "id": "1edge/collector-service#test-websocket-and-market-data-integration",
    "title": "collector-service - Test WebSocket and market data integration",
    "content": "Test WebSocket and market data integration",
    "url": "/docs/1edge/collector-service#test-websocket-and-market-data-integration",
    "category": "1edge",
    "headings": [],
    "excerpt": "Test WebSocket and market data integration (from collector-service)"
  },
  {
    "id": "1edge/collector-service#historical-data-test-coverage",
    "title": "collector-service - Historical Data Test Coverage",
    "content": "Historical Data Test Coverage",
    "url": "/docs/1edge/collector-service#historical-data-test-coverage",
    "category": "1edge",
    "headings": [],
    "excerpt": "Historical Data Test Coverage (from collector-service)"
  },
  {
    "id": "1edge/collector-service#database-inspection",
    "title": "collector-service - Database Inspection",
    "content": "Database Inspection",
    "url": "/docs/1edge/collector-service#database-inspection",
    "category": "1edge",
    "headings": [],
    "excerpt": "Database Inspection (from collector-service)"
  },
  {
    "id": "1edge/collector-service#connect-to-pair-database",
    "title": "collector-service - Connect to pair database",
    "content": "Connect to pair database",
    "url": "/docs/1edge/collector-service#connect-to-pair-database",
    "category": "1edge",
    "headings": [],
    "excerpt": "Connect to pair database (from collector-service)"
  },
  {
    "id": "1edge/collector-service#check-candle-counts",
    "title": "collector-service - Check candle counts",
    "content": "Check candle counts",
    "url": "/docs/1edge/collector-service#check-candle-counts",
    "category": "1edge",
    "headings": [],
    "excerpt": "Check candle counts (from collector-service)"
  },
  {
    "id": "1edge/collector-service#future-enhancements",
    "title": "collector-service - Future Enhancements",
    "content": "Future Enhancements",
    "url": "/docs/1edge/collector-service#future-enhancements",
    "category": "1edge",
    "headings": [],
    "excerpt": "Future Enhancements (from collector-service)"
  },
  {
    "id": "1edge/collector-service#planned-features",
    "title": "collector-service - Planned Features",
    "content": "Planned Features",
    "url": "/docs/1edge/collector-service#planned-features",
    "category": "1edge",
    "headings": [],
    "excerpt": "Planned Features (from collector-service)"
  },
  {
    "id": "1edge/collector-service#performance-improvements",
    "title": "collector-service - Performance Improvements",
    "content": "Performance Improvements",
    "url": "/docs/1edge/collector-service#performance-improvements",
    "category": "1edge",
    "headings": [],
    "excerpt": "Performance Improvements (from collector-service)"
  },
  {
    "id": "1edge/collector-service#troubleshooting",
    "title": "collector-service - Troubleshooting",
    "content": "Troubleshooting",
    "url": "/docs/1edge/collector-service#troubleshooting",
    "category": "1edge",
    "headings": [],
    "excerpt": "Troubleshooting (from collector-service)"
  },
  {
    "id": "1edge/collector-service#common-issues",
    "title": "collector-service - Common Issues",
    "content": "Common Issues",
    "url": "/docs/1edge/collector-service#common-issues",
    "category": "1edge",
    "headings": [],
    "excerpt": "Common Issues (from collector-service)"
  },
  {
    "id": "1edge/collector-service#check-cache-sizes",
    "title": "collector-service - Check cache sizes",
    "content": "Check cache sizes",
    "url": "/docs/1edge/collector-service#check-cache-sizes",
    "category": "1edge",
    "headings": [],
    "excerpt": "Check cache sizes (from collector-service)"
  },
  {
    "id": "1edge/collector-service#reduce-cache-limits-in-configuration",
    "title": "collector-service - Reduce cache limits in configuration",
    "content": "Reduce cache limits in configuration",
    "url": "/docs/1edge/collector-service#reduce-cache-limits-in-configuration",
    "category": "1edge",
    "headings": [],
    "excerpt": "Reduce cache limits in configuration (from collector-service)"
  },
  {
    "id": "1edge/collector-service#restart-collector-service",
    "title": "collector-service - Restart collector service",
    "content": "Restart collector service",
    "url": "/docs/1edge/collector-service#restart-collector-service",
    "category": "1edge",
    "headings": [],
    "excerpt": "Restart collector service (from collector-service)"
  },
  {
    "id": "1edge/collector-service#check-data-gaps",
    "title": "collector-service - Check data gaps",
    "content": "Check data gaps",
    "url": "/docs/1edge/collector-service#check-data-gaps",
    "category": "1edge",
    "headings": [],
    "excerpt": "Check data gaps (from collector-service)"
  },
  {
    "id": "1edge/collector-service#check-data-completeness-should-have-20160-1m-candles-for-14-days",
    "title": "collector-service - Check data completeness (should have ~20,160 1m candles for 14 days)",
    "content": "Check data completeness (should have ~20,160 1m candles for 14 days)",
    "url": "/docs/1edge/collector-service#check-data-completeness-should-have-20160-1m-candles-for-14-days",
    "category": "1edge",
    "headings": [],
    "excerpt": "Check data completeness (should have ~20,160 1m candles for 14 days) (from collector-service)"
  },
  {
    "id": "1edge/collector-service#force-re-fetch-delete-database-and-restart",
    "title": "collector-service - Force re-fetch (delete database and restart)",
    "content": "Force re-fetch (delete database and restart)",
    "url": "/docs/1edge/collector-service#force-re-fetch-delete-database-and-restart",
    "category": "1edge",
    "headings": [],
    "excerpt": "Force re-fetch (delete database and restart) (from collector-service)"
  },
  {
    "id": "1edge/collector-service#check-for-rate-limiting-errors-in-logs",
    "title": "collector-service - Check for rate limiting errors in logs",
    "content": "Check for rate limiting errors in logs",
    "url": "/docs/1edge/collector-service#check-for-rate-limiting-errors-in-logs",
    "category": "1edge",
    "headings": [],
    "excerpt": "Check for rate limiting errors in logs (from collector-service)"
  },
  {
    "id": "1edge/collector-service#monitor-batch-progress-during-historical-fetch",
    "title": "collector-service - Monitor batch progress during historical fetch",
    "content": "Monitor batch progress during historical fetch",
    "url": "/docs/1edge/collector-service#monitor-batch-progress-during-historical-fetch",
    "category": "1edge",
    "headings": [],
    "excerpt": "Monitor batch progress during historical fetch (from collector-service)"
  },
  {
    "id": "1edge/collector-service#verify-ccxt-binance-connection",
    "title": "collector-service - Verify CCXT Binance connection",
    "content": "Verify CCXT Binance connection",
    "url": "/docs/1edge/collector-service#verify-ccxt-binance-connection",
    "category": "1edge",
    "headings": [],
    "excerpt": "Verify CCXT Binance connection (from collector-service)"
  },
  {
    "id": "1edge/collector-service#check-network-connectivity",
    "title": "collector-service - Check network connectivity",
    "content": "Check network connectivity",
    "url": "/docs/1edge/collector-service#check-network-connectivity",
    "category": "1edge",
    "headings": [],
    "excerpt": "Check network connectivity (from collector-service)"
  },
  {
    "id": "1edge/collector-service#review-collector-logs",
    "title": "collector-service - Review collector logs",
    "content": "Review collector logs",
    "url": "/docs/1edge/collector-service#review-collector-logs",
    "category": "1edge",
    "headings": [],
    "excerpt": "Review collector logs (from collector-service)"
  },
  {
    "id": "1edge/collector-service#check-for-concurrent-access",
    "title": "collector-service - Check for concurrent access",
    "content": "Check for concurrent access",
    "url": "/docs/1edge/collector-service#check-for-concurrent-access",
    "category": "1edge",
    "headings": [],
    "excerpt": "Check for concurrent access (from collector-service)"
  },
  {
    "id": "1edge/collector-service#stop-all-services-and-restart",
    "title": "collector-service - Stop all services and restart",
    "content": "Stop all services and restart",
    "url": "/docs/1edge/collector-service#stop-all-services-and-restart",
    "category": "1edge",
    "headings": [],
    "excerpt": "Stop all services and restart (from collector-service)"
  },
  {
    "id": "1edge/orderbook-reconstructor",
    "title": "orderbook-reconstructor",
    "content": "Orderbook Reconstruction API Traditional Orderbook Views : Transform 1inch Limit Order Protocol data into familiar bid/ask orderbook displays for any trading pair. The 1edge platform provides a powerful orderbook reconstruction service that aggregates limit orders from the 1inch Limit Order Protocol to create traditional orderbook views for any trading pair. Feature Status Description Multi-Chain Support Ethereum, Polygon, BSC, Arbitrum Dual-Sort Approach Enhanced depth via 4K order fetch Spot Price Filtering Clean bid/ask separation Symbol Resolution Automatic token mapping Real-time Data Live orderbook snapshots Overview The orderbook reconstruction service fetches active limit orders from the 1inch API and transforms them into bid/ask levels suitable for display in trading interfaces. It uses a dual-sort approach to efficiently fetch the most relevant orders for both sides of the orderbook. Component Technology Purpose Data Source 1inch Limit Order Protocol Active order aggregation Processing Dual-sort algorithm Efficient order fetching Output Format Traditional orderbook Familiar trading interface Real-time Updates Snapshot-based Live market data %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% graph TD subgraph \"Data Flow\" CLIENT[Client Request] --> API[1edge API] API --> RECON[Orderbook Reconstructor] RECON --> FETCH1[Fetch Orders by makerRate] RECON --> FETCH2[Fetch Orders by takerRate] FETCH1 --> ONEINCH1[1inch API] FETCH2 --> ONEINCH2[1inch API] ONEINCH1 --> PROCESS1[Process Bids] ONEINCH2 --> PROCESS2[Process Asks] PROCESS1 --> AGGREGATE[Aggregate Levels] PROCESS2 --> AGGREGATE AGGREGATE --> RESPONSE[Orderbook Response] RESPONSE --> CLIENT end API Endpoints Market Overview Fetches orders across all trading pairs on a specific blockchain. GET /orderbook/{chain}?limit={limit} Parameters: Parameter Type Default Description Status chain number required Chain ID (1=Ethereum, 137=Polygon, 56=BSC) limit number 1000 Max orders per side (max: 1000) Example: curl \"http://localhost:40005/orderbook/1?limit=500\" Specific Trading Pair by Contract Address Reconstructs the orderbook for a specific asset pair using contract addresses. GET /orderbook/{chain}/{makerAsset}/{takerAsset}?limit={limit} Parameters: Parameter Type Default Description Status chain number required Chain ID makerAsset string required Maker asset contract address takerAsset string required Taker asset contract address limit number 1000 Max orders per side (max: 1000) Example: # USDT/WETH orderbook on Ethereum curl \"http://localhost:40005/orderbook/1/0xdAC17F958D2ee523a2206206994597C13D831ec7/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2?limit=1000\" üè∑ Trading Pair by Symbol Reconstructs the orderbook for a trading pair using symbolic names (e.g., \"BTCUSDT\"). This endpoint automatically resolves token symbols to their contract addresses based on the configured token mapping. GET /orderbook-symbol/{chain}/{symbol}?limit={limit} Parameters: Parameter Type Default Description Status chain number required Chain ID (1=Ethereum, 56=BSC, 42161=Arbitrum) symbol string required Trading pair (BTCUSDT, ETHUSDC, AAVEUSDT) limit number 500 Max orders per side (max: 1000) Examples: # BTC/USDT orderbook on Ethereum curl \"http://localhost:40005/orderbook-symbol/1/BTCUSDT?limit=500\" # ETH/USDC orderbook on Arbitrum curl \"http://localhost:40005/orderbook-symbol/42161/ETHUSDC?limit=300\" # AAVE/USDT orderbook on BSC curl \"http://localhost:40005/orderbook-symbol/56/AAVEUSDT\" Supported Symbols: Category Tokens Status Base Tokens WBTC, WETH, 1INCH, AAVE Alias Tokens BTC ‚Üí WBTC, ETH ‚Üí WETH Quote Tokens USDT, USDC Response Structure { \"success\": true, \"data\": { \"chain\": number, // Chain ID \"makerAsset\": string, // Maker asset address or \"ALL\" \"takerAsset\": string, // Taker asset address or \"ALL\" \"bids\": OrderbookLevel[], // Buy orders (sorted by price descending) \"asks\": OrderbookLevel[], // Sell orders (sorted by price ascending) \"timestamp\": number, // Orderbook snapshot timestamp \"summary\": { \"totalBidOrders\": number, // Total number of bid orders \"totalAskOrders\": number, // Total number of ask orders \"bestBid\": string | null, // Highest bid price \"bestAsk\": string | null, // Lowest ask price \"spread\": string | null // Bid-ask spread with percentage } } } OrderbookLevel Structure Each price level contains aggregated information about orders at that price: { \"price\": string, // Price level (rate) \"amount\": string, // Total amount at this level \"total\": string, // Cumulative total from best price \"count\": number, // Number of orders at this level \"orders\": OneInchOrder[] // Individual orders (see below) } OneInchOrder Structure Individual order details from the 1inch API: { \"orderHash\": string, \"createDateTime\": string, \"remainingMakerAmount\": string, \"makerBalance\": string, \"makerAllowance\": string, \"data\": { \"makerAsset\": string, \"takerAsset\": string, \"salt\": string, \"receiver\": string | undefined, \"makingAmount\": string, \"takingAmount\": string, \"maker\": string, \"extension\": string | undefined, \"makerTraits\": string | undefined }, \"makerRate\": string, // Price from maker's perspective \"takerRate\": string, // Price from taker's perspective \"isMakerContract\": boolean, \"orderInvalidReason\": string | null, \"signature\": string } Implementation Details Enhanced Dual-Sort Approach The service uses four separate API calls to efficiently reconstruct the orderbook with maximum depth: Step Method Purpose Orders 1 Sort by makerRate (descending) Best potential bids 2000 2 Sort by takerRate (ascending) Best potential asks 2000 3 Spot Price Center Theoretical book center Reference 4 Smart Filtering Remove wrong territories Clean data Benefits Benefit Improvement Status Order Depth 4000 vs 1000 orders Bid/Ask Separation Market-based reference Noise Reduction Clean orderbook display Order Filtering The service automatically filters out: Filter Type Condition Status Invalid Orders orderInvalidReason !== null Filled Orders remainingMakerAmount === \"0\" Invalid Rates makerRate <= 0 or takerRate <= 0 Invalid Status Only status 1 (Valid) included Order Status Meanings: Status Description Action 1 Valid orders - Active and executable Include 2 Temporarily invalid - May become valid Exclude 3 Invalid orders - Permanently invalid Exclude Spot Price Filtering To ensure clean bid and ask separation, the service: Step Process Benefit 1 Fetch current spot price Market reference 2 Establish book center Theoretical midpoint 3 Filter wrong territories Clean separation 4 Reduce noise Better display Note : Uses 1inch Spot Price API for reference pricing. Price Level Aggregation Orders with the same price are aggregated into levels: Step Process Purpose 1 Group by rate (price) Price level creation 2 Sum remaining amounts Level depth calculation 3 Calculate cumulative totals Market depth analysis 4 Sort levels Bids descending, asks ascending Configuration Environment Variables Variable Required Purpose Status ONE_INCH_API_KEY Optional Higher rate limits # 1inch API Key (optional but recommended for higher rate limits) ONE_INCH_API_KEY=your_1inch_api_key_here Service Configuration Component Integration Port Status API Server Built-in service 40005 Configuration No separate config needed Default Error Handling The API returns appropriate HTTP status codes and error messages: Status Error Description Resolution 400 Chain ID required Missing chain parameter Add chain ID 400 Invalid chain ID Non-numeric chain parameter Use valid chain ID 400 Invalid orderbook request format Malformed request path Check URL format 401 1inch API authentication failed Invalid or missing API key Verify API key 429 Rate limit exceeded Too many requests to 1inch API Implement backoff 500 Failed to reconstruct orderbook General server error Check logs Usage Examples 1. Get Ethereum Market Overview const response = await fetch(\"http://localhost:40005/orderbook/1?limit=100\"); const orderbook = await response.json(); console.log(`Total bid orders: ${orderbook.data.summary.totalBidOrders}`); console.log(`Total ask orders: ${orderbook.data.summary.totalAskOrders}`); console.log(`Best bid: ${orderbook.data.summary.bestBid}`); console.log(`Best ask: ${orderbook.data.summary.bestAsk}`); 2. Get USDT/WETH Orderbook const USDT = \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"; const WETH = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"; const response = await fetch( `http://localhost:40005/orderbook/1/${USDT}/${WETH}?limit=500`, ); const orderbook = await response.json(); // Display top 5 bid levels orderbook.data.bids.slice(0, 5).forEach((level) => { console.log( `Price: ${level.price}, Amount: ${level.amount}, Orders: ${level.count}`, ); }); 3. Calculate Market Depth function calculateDepth(orderbook, percentage = 0.01) { const midPrice = (parseFloat(orderbook.summary.bestBid) + parseFloat(orderbook.summary.bestAsk)) / 2; const threshold = midPrice * percentage; let bidDepth = 0n; let askDepth = 0n; // Calculate bid depth within percentage for (const level of orderbook.bids) { if (parseFloat(level.price) < midPrice - threshold) break; bidDepth += BigInt(level.amount); } // Calculate ask depth within percentage for (const level of orderbook.asks) { if (parseFloat(level.price) > midPrice + threshold) break; askDepth += BigInt(level.amount); } return { bidDepth: bidDepth.toString(), askDepth: askDepth.toString() }; } Performance Considerations Consideration Recommendation Priority Rate Limits Use API key for higher limits High Caching Implement client-side caching Medium Pagination 1000 orders usually sufficient Low Real-time Updates 5-10 second polling intervals High WebSocket Support Consider for push updates Medium 1inch WebSocket Use for order events Medium Integration with Trading Interface The orderbook data can be directly used in trading interfaces: // Transform for TradingView or similar charting libraries function transformForTradingView(orderbook) { return { bids: orderbook.bids.map((level) => ({ price: parseFloat(level.price), volume: parseFloat(level.amount) / 1e18, // Adjust decimals as needed })), asks: orderbook.asks.map((level) => ({ price: parseFloat(level.price), volume: parseFloat(level.amount) / 1e18, })), }; } Troubleshooting Common Issues Issue Causes Solutions Status Empty Orderbook Wrong addresses, no orders, wrong chain Verify parameters Authentication Errors Missing/invalid API key Check environment Rate Limiting Too many requests Implement backoff, use API key Debug Mode Debug Level Command Output Debug LOG_LEVEL=debug bun run start:api Detailed logging # Set log level in your environment LOG_LEVEL=debug bun run start:api Future Enhancements Potential improvements to the orderbook service: Enhancement Description Priority Timeline WebSocket Support Real-time orderbook updates High Q1 2025 Historical Data Orderbook snapshots storage Medium Q2 2025 Advanced Analytics VWAP, market depth charts Medium Q2 2025 Multi-chain Aggregation Cross-chain orderbook combining Low Q3 2025 Order Matching Arbitrage opportunity detection Low Q3 2025 Related Documentation Document Description Status 1inch Orderbook API Reference External API documentation 1edge Architecture System architecture overview API Server Configuration Server configuration guide",
    "url": "/docs/1edge/orderbook-reconstructor",
    "category": "1edge",
    "headings": [
      {
        "level": 1,
        "text": "Orderbook Reconstruction API",
        "anchor": "orderbook-reconstruction-api"
      },
      {
        "level": 2,
        "text": "Overview",
        "anchor": "overview"
      },
      {
        "level": 2,
        "text": "API Endpoints",
        "anchor": "api-endpoints"
      },
      {
        "level": 3,
        "text": "Market Overview",
        "anchor": "market-overview"
      },
      {
        "level": 3,
        "text": "Specific Trading Pair by Contract Address",
        "anchor": "specific-trading-pair-by-contract-address"
      },
      {
        "level": 1,
        "text": "USDT/WETH orderbook on Ethereum",
        "anchor": "usdtweth-orderbook-on-ethereum"
      },
      {
        "level": 3,
        "text": "üè∑ Trading Pair by Symbol",
        "anchor": "trading-pair-by-symbol"
      },
      {
        "level": 1,
        "text": "BTC/USDT orderbook on Ethereum",
        "anchor": "btcusdt-orderbook-on-ethereum"
      },
      {
        "level": 1,
        "text": "ETH/USDC orderbook on Arbitrum",
        "anchor": "ethusdc-orderbook-on-arbitrum"
      },
      {
        "level": 1,
        "text": "AAVE/USDT orderbook on BSC",
        "anchor": "aaveusdt-orderbook-on-bsc"
      },
      {
        "level": 2,
        "text": "Response Structure",
        "anchor": "response-structure"
      },
      {
        "level": 3,
        "text": "OrderbookLevel Structure",
        "anchor": "orderbooklevel-structure"
      },
      {
        "level": 3,
        "text": "OneInchOrder Structure",
        "anchor": "oneinchorder-structure"
      },
      {
        "level": 2,
        "text": "Implementation Details",
        "anchor": "implementation-details"
      },
      {
        "level": 3,
        "text": "Enhanced Dual-Sort Approach",
        "anchor": "enhanced-dual-sort-approach"
      },
      {
        "level": 3,
        "text": "Benefits",
        "anchor": "benefits"
      },
      {
        "level": 3,
        "text": "Order Filtering",
        "anchor": "order-filtering"
      },
      {
        "level": 3,
        "text": "Spot Price Filtering",
        "anchor": "spot-price-filtering"
      },
      {
        "level": 3,
        "text": "Price Level Aggregation",
        "anchor": "price-level-aggregation"
      },
      {
        "level": 2,
        "text": "Configuration",
        "anchor": "configuration"
      },
      {
        "level": 3,
        "text": "Environment Variables",
        "anchor": "environment-variables"
      },
      {
        "level": 1,
        "text": "1inch API Key (optional but recommended for higher rate limits)",
        "anchor": "1inch-api-key-optional-but-recommended-for-higher-rate-limits"
      },
      {
        "level": 3,
        "text": "Service Configuration",
        "anchor": "service-configuration"
      },
      {
        "level": 2,
        "text": "Error Handling",
        "anchor": "error-handling"
      },
      {
        "level": 2,
        "text": "Usage Examples",
        "anchor": "usage-examples"
      },
      {
        "level": 3,
        "text": "1. Get Ethereum Market Overview",
        "anchor": "1-get-ethereum-market-overview"
      },
      {
        "level": 3,
        "text": "2. Get USDT/WETH Orderbook",
        "anchor": "2-get-usdtweth-orderbook"
      },
      {
        "level": 3,
        "text": "3. Calculate Market Depth",
        "anchor": "3-calculate-market-depth"
      },
      {
        "level": 2,
        "text": "Performance Considerations",
        "anchor": "performance-considerations"
      },
      {
        "level": 2,
        "text": "Integration with Trading Interface",
        "anchor": "integration-with-trading-interface"
      },
      {
        "level": 2,
        "text": "Troubleshooting",
        "anchor": "troubleshooting"
      },
      {
        "level": 3,
        "text": "Common Issues",
        "anchor": "common-issues"
      },
      {
        "level": 3,
        "text": "Debug Mode",
        "anchor": "debug-mode"
      },
      {
        "level": 1,
        "text": "Set log level in your environment",
        "anchor": "set-log-level-in-your-environment"
      },
      {
        "level": 2,
        "text": "Future Enhancements",
        "anchor": "future-enhancements"
      },
      {
        "level": 2,
        "text": "Related Documentation",
        "anchor": "related-documentation"
      }
    ],
    "excerpt": "Orderbook Reconstruction API Traditional Orderbook Views : Transform 1inch Limit Order Protocol data into familiar bid/ask orderbook displays for any trading pair. The 1edge platform provides a powerf..."
  },
  {
    "id": "1edge/orderbook-reconstructor#orderbook-reconstruction-api",
    "title": "orderbook-reconstructor - Orderbook Reconstruction API",
    "content": "Orderbook Reconstruction API",
    "url": "/docs/1edge/orderbook-reconstructor#orderbook-reconstruction-api",
    "category": "1edge",
    "headings": [],
    "excerpt": "Orderbook Reconstruction API (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#overview",
    "title": "orderbook-reconstructor - Overview",
    "content": "Overview",
    "url": "/docs/1edge/orderbook-reconstructor#overview",
    "category": "1edge",
    "headings": [],
    "excerpt": "Overview (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#api-endpoints",
    "title": "orderbook-reconstructor - API Endpoints",
    "content": "API Endpoints",
    "url": "/docs/1edge/orderbook-reconstructor#api-endpoints",
    "category": "1edge",
    "headings": [],
    "excerpt": "API Endpoints (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#market-overview",
    "title": "orderbook-reconstructor - Market Overview",
    "content": "Market Overview",
    "url": "/docs/1edge/orderbook-reconstructor#market-overview",
    "category": "1edge",
    "headings": [],
    "excerpt": "Market Overview (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#specific-trading-pair-by-contract-address",
    "title": "orderbook-reconstructor - Specific Trading Pair by Contract Address",
    "content": "Specific Trading Pair by Contract Address",
    "url": "/docs/1edge/orderbook-reconstructor#specific-trading-pair-by-contract-address",
    "category": "1edge",
    "headings": [],
    "excerpt": "Specific Trading Pair by Contract Address (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#usdtweth-orderbook-on-ethereum",
    "title": "orderbook-reconstructor - USDT/WETH orderbook on Ethereum",
    "content": "USDT/WETH orderbook on Ethereum",
    "url": "/docs/1edge/orderbook-reconstructor#usdtweth-orderbook-on-ethereum",
    "category": "1edge",
    "headings": [],
    "excerpt": "USDT/WETH orderbook on Ethereum (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#trading-pair-by-symbol",
    "title": "orderbook-reconstructor - üè∑ Trading Pair by Symbol",
    "content": "üè∑ Trading Pair by Symbol",
    "url": "/docs/1edge/orderbook-reconstructor#trading-pair-by-symbol",
    "category": "1edge",
    "headings": [],
    "excerpt": "üè∑ Trading Pair by Symbol (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#btcusdt-orderbook-on-ethereum",
    "title": "orderbook-reconstructor - BTC/USDT orderbook on Ethereum",
    "content": "BTC/USDT orderbook on Ethereum",
    "url": "/docs/1edge/orderbook-reconstructor#btcusdt-orderbook-on-ethereum",
    "category": "1edge",
    "headings": [],
    "excerpt": "BTC/USDT orderbook on Ethereum (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#ethusdc-orderbook-on-arbitrum",
    "title": "orderbook-reconstructor - ETH/USDC orderbook on Arbitrum",
    "content": "ETH/USDC orderbook on Arbitrum",
    "url": "/docs/1edge/orderbook-reconstructor#ethusdc-orderbook-on-arbitrum",
    "category": "1edge",
    "headings": [],
    "excerpt": "ETH/USDC orderbook on Arbitrum (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#aaveusdt-orderbook-on-bsc",
    "title": "orderbook-reconstructor - AAVE/USDT orderbook on BSC",
    "content": "AAVE/USDT orderbook on BSC",
    "url": "/docs/1edge/orderbook-reconstructor#aaveusdt-orderbook-on-bsc",
    "category": "1edge",
    "headings": [],
    "excerpt": "AAVE/USDT orderbook on BSC (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#response-structure",
    "title": "orderbook-reconstructor - Response Structure",
    "content": "Response Structure",
    "url": "/docs/1edge/orderbook-reconstructor#response-structure",
    "category": "1edge",
    "headings": [],
    "excerpt": "Response Structure (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#orderbooklevel-structure",
    "title": "orderbook-reconstructor - OrderbookLevel Structure",
    "content": "OrderbookLevel Structure",
    "url": "/docs/1edge/orderbook-reconstructor#orderbooklevel-structure",
    "category": "1edge",
    "headings": [],
    "excerpt": "OrderbookLevel Structure (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#oneinchorder-structure",
    "title": "orderbook-reconstructor - OneInchOrder Structure",
    "content": "OneInchOrder Structure",
    "url": "/docs/1edge/orderbook-reconstructor#oneinchorder-structure",
    "category": "1edge",
    "headings": [],
    "excerpt": "OneInchOrder Structure (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#implementation-details",
    "title": "orderbook-reconstructor - Implementation Details",
    "content": "Implementation Details",
    "url": "/docs/1edge/orderbook-reconstructor#implementation-details",
    "category": "1edge",
    "headings": [],
    "excerpt": "Implementation Details (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#enhanced-dual-sort-approach",
    "title": "orderbook-reconstructor - Enhanced Dual-Sort Approach",
    "content": "Enhanced Dual-Sort Approach",
    "url": "/docs/1edge/orderbook-reconstructor#enhanced-dual-sort-approach",
    "category": "1edge",
    "headings": [],
    "excerpt": "Enhanced Dual-Sort Approach (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#benefits",
    "title": "orderbook-reconstructor - Benefits",
    "content": "Benefits",
    "url": "/docs/1edge/orderbook-reconstructor#benefits",
    "category": "1edge",
    "headings": [],
    "excerpt": "Benefits (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#order-filtering",
    "title": "orderbook-reconstructor - Order Filtering",
    "content": "Order Filtering",
    "url": "/docs/1edge/orderbook-reconstructor#order-filtering",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Filtering (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#spot-price-filtering",
    "title": "orderbook-reconstructor - Spot Price Filtering",
    "content": "Spot Price Filtering",
    "url": "/docs/1edge/orderbook-reconstructor#spot-price-filtering",
    "category": "1edge",
    "headings": [],
    "excerpt": "Spot Price Filtering (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#price-level-aggregation",
    "title": "orderbook-reconstructor - Price Level Aggregation",
    "content": "Price Level Aggregation",
    "url": "/docs/1edge/orderbook-reconstructor#price-level-aggregation",
    "category": "1edge",
    "headings": [],
    "excerpt": "Price Level Aggregation (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#configuration",
    "title": "orderbook-reconstructor - Configuration",
    "content": "Configuration",
    "url": "/docs/1edge/orderbook-reconstructor#configuration",
    "category": "1edge",
    "headings": [],
    "excerpt": "Configuration (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#environment-variables",
    "title": "orderbook-reconstructor - Environment Variables",
    "content": "Environment Variables",
    "url": "/docs/1edge/orderbook-reconstructor#environment-variables",
    "category": "1edge",
    "headings": [],
    "excerpt": "Environment Variables (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#1inch-api-key-optional-but-recommended-for-higher-rate-limits",
    "title": "orderbook-reconstructor - 1inch API Key (optional but recommended for higher rate limits)",
    "content": "1inch API Key (optional but recommended for higher rate limits)",
    "url": "/docs/1edge/orderbook-reconstructor#1inch-api-key-optional-but-recommended-for-higher-rate-limits",
    "category": "1edge",
    "headings": [],
    "excerpt": "1inch API Key (optional but recommended for higher rate limits) (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#service-configuration",
    "title": "orderbook-reconstructor - Service Configuration",
    "content": "Service Configuration",
    "url": "/docs/1edge/orderbook-reconstructor#service-configuration",
    "category": "1edge",
    "headings": [],
    "excerpt": "Service Configuration (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#error-handling",
    "title": "orderbook-reconstructor - Error Handling",
    "content": "Error Handling",
    "url": "/docs/1edge/orderbook-reconstructor#error-handling",
    "category": "1edge",
    "headings": [],
    "excerpt": "Error Handling (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#usage-examples",
    "title": "orderbook-reconstructor - Usage Examples",
    "content": "Usage Examples",
    "url": "/docs/1edge/orderbook-reconstructor#usage-examples",
    "category": "1edge",
    "headings": [],
    "excerpt": "Usage Examples (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#1-get-ethereum-market-overview",
    "title": "orderbook-reconstructor - 1. Get Ethereum Market Overview",
    "content": "1. Get Ethereum Market Overview",
    "url": "/docs/1edge/orderbook-reconstructor#1-get-ethereum-market-overview",
    "category": "1edge",
    "headings": [],
    "excerpt": "1. Get Ethereum Market Overview (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#2-get-usdtweth-orderbook",
    "title": "orderbook-reconstructor - 2. Get USDT/WETH Orderbook",
    "content": "2. Get USDT/WETH Orderbook",
    "url": "/docs/1edge/orderbook-reconstructor#2-get-usdtweth-orderbook",
    "category": "1edge",
    "headings": [],
    "excerpt": "2. Get USDT/WETH Orderbook (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#3-calculate-market-depth",
    "title": "orderbook-reconstructor - 3. Calculate Market Depth",
    "content": "3. Calculate Market Depth",
    "url": "/docs/1edge/orderbook-reconstructor#3-calculate-market-depth",
    "category": "1edge",
    "headings": [],
    "excerpt": "3. Calculate Market Depth (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#performance-considerations",
    "title": "orderbook-reconstructor - Performance Considerations",
    "content": "Performance Considerations",
    "url": "/docs/1edge/orderbook-reconstructor#performance-considerations",
    "category": "1edge",
    "headings": [],
    "excerpt": "Performance Considerations (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#integration-with-trading-interface",
    "title": "orderbook-reconstructor - Integration with Trading Interface",
    "content": "Integration with Trading Interface",
    "url": "/docs/1edge/orderbook-reconstructor#integration-with-trading-interface",
    "category": "1edge",
    "headings": [],
    "excerpt": "Integration with Trading Interface (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#troubleshooting",
    "title": "orderbook-reconstructor - Troubleshooting",
    "content": "Troubleshooting",
    "url": "/docs/1edge/orderbook-reconstructor#troubleshooting",
    "category": "1edge",
    "headings": [],
    "excerpt": "Troubleshooting (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#common-issues",
    "title": "orderbook-reconstructor - Common Issues",
    "content": "Common Issues",
    "url": "/docs/1edge/orderbook-reconstructor#common-issues",
    "category": "1edge",
    "headings": [],
    "excerpt": "Common Issues (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#debug-mode",
    "title": "orderbook-reconstructor - Debug Mode",
    "content": "Debug Mode",
    "url": "/docs/1edge/orderbook-reconstructor#debug-mode",
    "category": "1edge",
    "headings": [],
    "excerpt": "Debug Mode (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#set-log-level-in-your-environment",
    "title": "orderbook-reconstructor - Set log level in your environment",
    "content": "Set log level in your environment",
    "url": "/docs/1edge/orderbook-reconstructor#set-log-level-in-your-environment",
    "category": "1edge",
    "headings": [],
    "excerpt": "Set log level in your environment (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#future-enhancements",
    "title": "orderbook-reconstructor - Future Enhancements",
    "content": "Future Enhancements",
    "url": "/docs/1edge/orderbook-reconstructor#future-enhancements",
    "category": "1edge",
    "headings": [],
    "excerpt": "Future Enhancements (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/orderbook-reconstructor#related-documentation",
    "title": "orderbook-reconstructor - Related Documentation",
    "content": "Related Documentation",
    "url": "/docs/1edge/orderbook-reconstructor#related-documentation",
    "category": "1edge",
    "headings": [],
    "excerpt": "Related Documentation (from orderbook-reconstructor)"
  },
  {
    "id": "1edge/keeper-delegation",
    "title": "keeper-delegation",
    "content": "",
    "url": "/docs/1edge/keeper-delegation",
    "category": "1edge",
    "headings": [],
    "excerpt": ""
  },
  {
    "id": "1edge/order-types",
    "title": "order-types",
    "content": "Supported Order Types Trading Strategy Arsenal : Comprehensive order types supporting both one-off executions and recurring strategies for advanced trading automation. Note : All time periods are specified in milliseconds for precise control. 1inch Order Placement Strategy Fast Fill Optimization : To ensure rapid order fills when triggering orders to 1inch, limit orders should be placed close to the spot price, inside the bid-ask spread. Recommended Pricing Strategy: Limit Buy Orders : Set price at spot - 0.05% (slightly below market, within book spread) Limit Sell Orders : Set price at spot + 0.05% (slightly above market, within book spread) Maximum Deviation : Stay within ¬±0.2% of spot price for optimal execution Rationale : Orders priced inside the spread get filled immediately by market makers and arbitrageurs Implementation Notes: All order watchers should apply this pricing when creating 1inch limit orders Price adjustments should be calculated dynamically based on current spot price Consider slippage tolerance based on order size and market conditions One-off Orders Single Execution Orders : Execute once when conditions are met, then complete. Stop-Limit Order Property Value Status Trigger Price level reached Execution Single order at a time Description Limit order at stop level Parameters: Parameter Default Description amount 0 Order size stopPrice spot - 0.5% Trigger price limitPrice spot - 0.5% Execution price expiry 10 Expiration time Chase-Limit Order Property Value Status Trigger Price drift cancellation/recreation Execution Single order at a time Description Trailing limit order Parameters: Parameter Default Description amount 0 Order size distancePct spot - 0.5% Trail distance expiry 10 Expiration time maxPrice spot - 0.5% Maximum price Time Weighted Average Price (TWAP) Property Value Status Trigger Time interval based Execution Sequential until complete Description Stealth execution via chase-limit Parameters: Parameter Default Description amount 0 Total target size startDate now Execution start endDate +1 month Execution end interval 1 day Time between orders maxPrice market Maximum execution price Strategy : 30 orders recurring over time period Range Order Property Value Status Trigger Price step execution Execution Single order at a time Description Fixed price interval buying Parameters: Parameter Default Description amount 0 Total target size startPrice spot - 0.5% Starting price endPrice spot - 2% Ending price stepPct 0.3% Price step size expiry - Order expiration Strategy : 5 orders across price range Iceberg Order Property Value Status Trigger Order execution based Execution Sequential until complete Description Large order stealth execution Parameters: Parameter Default Description amount 0 Total target size startPrice spot - 0.5% Starting price endPrice spot - 0.5% Ending price steps 10 Number of sub-orders expiry - Order expiration Recurring Orders Perpetual Strategies : Continuously executing orders that repeat based on time or market conditions. Dollar-Cost Averaging (DCA) Property Value Status Trigger Time interval recurring Execution Perpetual until stopped Description Regular chase-limit purchases Parameters: Parameter Default Description amount 0 Per-order size startDate now Strategy start interval 1 day Time between orders maxPrice market Maximum execution price Strategy : 30 orders recurring indefinitely Grid Trading Property Value Status Trigger Price step execution Execution Recurring market making Description Automated grid strategy Parameters: Parameter Default Description amount 0 Per-order size startPrice spot - 0.5% Grid start price endPrice spot - 2% Grid end price stepPct 0.3% Grid step size stepMultiplier - Step scaling factor singleSide false One-directional grid tpPct - Take profit percentage Strategy : 5 orders in grid formation Momentum Reversal Trading Property Value Status Trigger RSI momentum reversal Execution Mean reversion timing Description RSI-based chase-limit orders Parameters: Parameter Default Description amount 0 Order size rsiPeriod 12 hours RSI calculation period rsimaPeriod 12 hours RSI moving average tpPct 2% Take profit percentage slPct 1% Stop loss percentage Signal : RSI crosses RSI MA (up = long, down = short) Breakout Trading Property Value Status Trigger ADX trend breakout Execution Breakout timing Description ADX-based chase-limit orders Parameters: Parameter Default Description amount 0 Order size adxPeriod 12 hours ADX calculation period adxmaPeriod 12 hours ADX moving average emaPeriod 12 hours EMA trend filter tpPct 2% Take profit percentage slPct 1% Stop loss percentage Signal : ADX crosses ADX MA + EMA direction (bullish EMA = long, bearish EMA = short)",
    "url": "/docs/1edge/order-types",
    "category": "1edge",
    "headings": [
      {
        "level": 1,
        "text": "Supported Order Types",
        "anchor": "supported-order-types"
      },
      {
        "level": 2,
        "text": "1inch Order Placement Strategy",
        "anchor": "1inch-order-placement-strategy"
      },
      {
        "level": 2,
        "text": "One-off Orders",
        "anchor": "one-off-orders"
      },
      {
        "level": 3,
        "text": "Stop-Limit Order",
        "anchor": "stop-limit-order"
      },
      {
        "level": 3,
        "text": "Chase-Limit Order",
        "anchor": "chase-limit-order"
      },
      {
        "level": 3,
        "text": "Time Weighted Average Price (TWAP)",
        "anchor": "time-weighted-average-price-twap"
      },
      {
        "level": 3,
        "text": "Range Order",
        "anchor": "range-order"
      },
      {
        "level": 3,
        "text": "Iceberg Order",
        "anchor": "iceberg-order"
      },
      {
        "level": 2,
        "text": "Recurring Orders",
        "anchor": "recurring-orders"
      },
      {
        "level": 3,
        "text": "Dollar-Cost Averaging (DCA)",
        "anchor": "dollar-cost-averaging-dca"
      },
      {
        "level": 3,
        "text": "Grid Trading",
        "anchor": "grid-trading"
      },
      {
        "level": 3,
        "text": "Momentum Reversal Trading",
        "anchor": "momentum-reversal-trading"
      },
      {
        "level": 3,
        "text": "Breakout Trading",
        "anchor": "breakout-trading"
      }
    ],
    "excerpt": "Supported Order Types Trading Strategy Arsenal : Comprehensive order types supporting both one-off executions and recurring strategies for advanced trading automation. Note : All time periods are spec..."
  },
  {
    "id": "1edge/order-types#supported-order-types",
    "title": "order-types - Supported Order Types",
    "content": "Supported Order Types",
    "url": "/docs/1edge/order-types#supported-order-types",
    "category": "1edge",
    "headings": [],
    "excerpt": "Supported Order Types (from order-types)"
  },
  {
    "id": "1edge/order-types#1inch-order-placement-strategy",
    "title": "order-types - 1inch Order Placement Strategy",
    "content": "1inch Order Placement Strategy",
    "url": "/docs/1edge/order-types#1inch-order-placement-strategy",
    "category": "1edge",
    "headings": [],
    "excerpt": "1inch Order Placement Strategy (from order-types)"
  },
  {
    "id": "1edge/order-types#one-off-orders",
    "title": "order-types - One-off Orders",
    "content": "One-off Orders",
    "url": "/docs/1edge/order-types#one-off-orders",
    "category": "1edge",
    "headings": [],
    "excerpt": "One-off Orders (from order-types)"
  },
  {
    "id": "1edge/order-types#stop-limit-order",
    "title": "order-types - Stop-Limit Order",
    "content": "Stop-Limit Order",
    "url": "/docs/1edge/order-types#stop-limit-order",
    "category": "1edge",
    "headings": [],
    "excerpt": "Stop-Limit Order (from order-types)"
  },
  {
    "id": "1edge/order-types#chase-limit-order",
    "title": "order-types - Chase-Limit Order",
    "content": "Chase-Limit Order",
    "url": "/docs/1edge/order-types#chase-limit-order",
    "category": "1edge",
    "headings": [],
    "excerpt": "Chase-Limit Order (from order-types)"
  },
  {
    "id": "1edge/order-types#time-weighted-average-price-twap",
    "title": "order-types - Time Weighted Average Price (TWAP)",
    "content": "Time Weighted Average Price (TWAP)",
    "url": "/docs/1edge/order-types#time-weighted-average-price-twap",
    "category": "1edge",
    "headings": [],
    "excerpt": "Time Weighted Average Price (TWAP) (from order-types)"
  },
  {
    "id": "1edge/order-types#range-order",
    "title": "order-types - Range Order",
    "content": "Range Order",
    "url": "/docs/1edge/order-types#range-order",
    "category": "1edge",
    "headings": [],
    "excerpt": "Range Order (from order-types)"
  },
  {
    "id": "1edge/order-types#iceberg-order",
    "title": "order-types - Iceberg Order",
    "content": "Iceberg Order",
    "url": "/docs/1edge/order-types#iceberg-order",
    "category": "1edge",
    "headings": [],
    "excerpt": "Iceberg Order (from order-types)"
  },
  {
    "id": "1edge/order-types#recurring-orders",
    "title": "order-types - Recurring Orders",
    "content": "Recurring Orders",
    "url": "/docs/1edge/order-types#recurring-orders",
    "category": "1edge",
    "headings": [],
    "excerpt": "Recurring Orders (from order-types)"
  },
  {
    "id": "1edge/order-types#dollar-cost-averaging-dca",
    "title": "order-types - Dollar-Cost Averaging (DCA)",
    "content": "Dollar-Cost Averaging (DCA)",
    "url": "/docs/1edge/order-types#dollar-cost-averaging-dca",
    "category": "1edge",
    "headings": [],
    "excerpt": "Dollar-Cost Averaging (DCA) (from order-types)"
  },
  {
    "id": "1edge/order-types#grid-trading",
    "title": "order-types - Grid Trading",
    "content": "Grid Trading",
    "url": "/docs/1edge/order-types#grid-trading",
    "category": "1edge",
    "headings": [],
    "excerpt": "Grid Trading (from order-types)"
  },
  {
    "id": "1edge/order-types#momentum-reversal-trading",
    "title": "order-types - Momentum Reversal Trading",
    "content": "Momentum Reversal Trading",
    "url": "/docs/1edge/order-types#momentum-reversal-trading",
    "category": "1edge",
    "headings": [],
    "excerpt": "Momentum Reversal Trading (from order-types)"
  },
  {
    "id": "1edge/order-types#breakout-trading",
    "title": "order-types - Breakout Trading",
    "content": "Breakout Trading",
    "url": "/docs/1edge/order-types#breakout-trading",
    "category": "1edge",
    "headings": [],
    "excerpt": "Breakout Trading (from order-types)"
  },
  {
    "id": "1edge/order-lifecycle",
    "title": "order-lifecycle",
    "content": "Order Lifecycle Complete Order Journey : From user creation to on-chain execution through the 1inch network, this document tracks every step of an order's lifecycle in the 1edge system. This document describes the complete lifecycle of an order in the 1edge system, from creation by the user to execution on the 1inch network. Phase Component Status Creation Frontend UI Active Validation API Server Active Registration OrderRegistry Active Monitoring Watcher System Active Execution Order Handlers Active Integration 1inch Protocol Active Overview The order lifecycle is managed by the OrderRegistry service, which receives, stores, monitors, and executes all orders. Each order is processed by a dedicated \"watcher\" that monitors trigger conditions and executes when conditions are met. All order types (including strategies, which are recurring orders) follow the same unified flow. Architecture Diagram %%{init: {'theme':'dark', 'themeVariables': {'primaryColor':'#22c55e','background':'transparent','primaryBorderColor':'#22c55e','lineColor':'#6b7280','sectionBkgColor':'transparent','altSectionBkgColor':'transparent','clusterBkg':'transparent','clusterBorder':'#6b7280'}}}%% graph TD A[User creates order in UI] --> B[Sign order payload with wallet]; B --> C[POST /orders with signed payload]; C --> D[API Server validates signature]; D --> E[OrderRegistry.createOrder]; E --> F[Save order to database]; F --> G[Spawn order watcher]; G --> H[Check triggers every 5s]; H --> I{Trigger conditions met?}; I --No--> H; I --Yes--> J[Execute order via handler]; J --> K[Create 1inch limit order]; K --> L[Submit to DelegateSafe]; L --> M[Post to 1inch API]; M --> N[Update order status to ACTIVE]; N --> O[Monitor 1inch order status]; O --> P[Order filled/cancelled/expired]; P --> Q[Update final status]; Complete Flow Order Creation (Frontend) User configures order parameters in the UI Frontend validates inputs and estimates gas/fees User signs order payload with their wallet (EVM signature) Signed order is submitted to POST /orders endpoint Order Validation (API Server) apiServer.ts receives the order request at /orders endpoint Validates the EVM signature using ethers.utils.recoverAddress Ensures the recovered address matches the order maker Forwards valid order to OrderRegistry.createOrder() Order Registration (OrderRegistry) Validates order signature using validateOrderSignature() Initializes order fields: status=PENDING , triggerCount=0 , remainingSize=size Saves order to database via saveOrder() Creates order event with PENDING status Spawns a new watcher for the order via startWatcher() Order Monitoring (Watcher) Each order has a dedicated watcher running in watchOrder() loop Watcher checks trigger conditions every 5 seconds using modular handlers Handlers implement OrderWatcher interface with shouldTrigger() method Supports all order types: stop-limit, chase-limit, TWAP, DCA, etc. Trigger Evaluation (Order Handlers) Order Type Trigger Mechanism Status Stop-Limit Price breach monitoring Chase-Limit Dynamic price tracking TWAP Time intervals + volume DCA Scheduled recurring Handler Response Boolean condition check Order Execution (Handler Execute) Watcher calls handler.execute(order) when triggered Handler creates appropriate 1inch limit order parameters Increments triggerCount and updates nextTriggerValue for recurring orders Calls DelegateSafe contract to transfer user funds and sign order Submits signed order to 1inch Orderbook API 1inch Integration Order posted to 1inch API with signed payload 1inch returns order hash for tracking Order hash stored in order.oneInchOrderHashes[] array Order status updated to ACTIVE Creates SUBMITTED order event Order Tracking System monitors 1inch order status via API polling Tracks fills, cancellations, and expirations Updates order status accordingly: FILLED , CANCELLED , EXPIRED For recurring orders, watcher continues monitoring for next trigger API Endpoints POST /orders Creates a new order with EVM signature verification. Request Body: { \"id\": \"generated-uuid\", \"type\": \"STOP_LIMIT\", \"pair\": \"WETH/USDC\", \"size\": 1.0, \"maker\": \"0x742d35cc6734C0532925a3b8D0d5D0a8d1238a60\", \"makerAsset\": \"0xA0b86a33E6409c26C5E1d7D35644C7a9A6BdF4fE\", \"takerAsset\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", \"params\": { \"triggerPrice\": 2500.00, \"limitPrice\": 2490.00 }, \"signature\": \"0x...\", \"userSignedPayload\": \"...\" } GET /orders Returns all active orders for monitoring. GET /orders?maker=0x123... Returns all orders for a specific user address (transparent, no authentication required). GET /orders/{orderId} Returns specific order details and status. PUT /orders/{orderId} Modifies an order (cancels original, creates new). DELETE /orders/{orderId} Cancels an order and stops its watcher. Database Schema Column Type Description id TEXT Unique order identifier order_hash TEXT 1inch-computed order hash (unique) strategy_id TEXT Associated strategy identifier type TEXT Order type (e.g., STOP_LIMIT, LIMIT) status TEXT Current order status maker_asset TEXT Maker asset address taker_asset TEXT Taker asset address making_amount TEXT Amount of maker asset to sell taking_amount TEXT Amount of taker asset to buy maker TEXT Maker address (order creator) receiver TEXT Receiver address (optional) salt TEXT Unique salt for order hash signature TEXT EVM signature for order size TEXT Original order size remaining_size TEXT Remaining unfilled size trigger_count INTEGER Number of times triggered next_trigger_value TEXT Next trigger value for recurring orders trigger_price REAL Trigger price (if applicable) filled_amount TEXT Total filled amount created_at INTEGER Order creation timestamp executed_at INTEGER Execution timestamp (if filled) cancelled_at INTEGER Cancellation timestamp (if cancelled) tx_hash TEXT Transaction hash (if on-chain) network INTEGER Chain/network ID expiry INTEGER Expiry timestamp (if set) user_signed_payload TEXT User-signed payload (JSON or string) one_inch_order_hashes TEXT JSON array of 1inch order hashes raw_data TEXT Complete JSON-serialized Order object Order Statuses Status Description PENDING Order created, watcher monitoring ACTIVE Submitted to 1inch, awaiting fill PARTIALLY_FILLED Partially executed FILLED Completely executed CANCELLED Cancelled by user/system EXPIRED Expired without execution FAILED Execution failed Involved Components Component Path Responsibility Status Frontend front/ Order creation UI API Server back/services/apiServer.ts REST endpoints Order Registry back/services/orderRegistry.ts Lifecycle management Order Watchers back/orders/ Modular implementations Storage Layer back/services/storage.ts Database persistence Type Definitions common/types.ts Shared interfaces Smart Contract contracts/DelegateSafe.sol Fund management",
    "url": "/docs/1edge/order-lifecycle",
    "category": "1edge",
    "headings": [
      {
        "level": 1,
        "text": "Order Lifecycle",
        "anchor": "order-lifecycle"
      },
      {
        "level": 2,
        "text": "Overview",
        "anchor": "overview"
      },
      {
        "level": 2,
        "text": "Architecture Diagram",
        "anchor": "architecture-diagram"
      },
      {
        "level": 2,
        "text": "Complete Flow",
        "anchor": "complete-flow"
      },
      {
        "level": 3,
        "text": "Order Creation (Frontend)",
        "anchor": "order-creation-frontend"
      },
      {
        "level": 3,
        "text": "Order Validation (API Server)",
        "anchor": "order-validation-api-server"
      },
      {
        "level": 3,
        "text": "Order Registration (OrderRegistry)",
        "anchor": "order-registration-orderregistry"
      },
      {
        "level": 3,
        "text": "Order Monitoring (Watcher)",
        "anchor": "order-monitoring-watcher"
      },
      {
        "level": 3,
        "text": "Trigger Evaluation (Order Handlers)",
        "anchor": "trigger-evaluation-order-handlers"
      },
      {
        "level": 3,
        "text": "Order Execution (Handler Execute)",
        "anchor": "order-execution-handler-execute"
      },
      {
        "level": 3,
        "text": "1inch Integration",
        "anchor": "1inch-integration"
      },
      {
        "level": 3,
        "text": "Order Tracking",
        "anchor": "order-tracking"
      },
      {
        "level": 2,
        "text": "API Endpoints",
        "anchor": "api-endpoints"
      },
      {
        "level": 3,
        "text": "`POST /orders`",
        "anchor": "post-orders"
      },
      {
        "level": 3,
        "text": "`GET /orders`",
        "anchor": "get-orders"
      },
      {
        "level": 3,
        "text": "`GET /orders?maker=0x123...`",
        "anchor": "get-ordersmaker0x123"
      },
      {
        "level": 3,
        "text": "`GET /orders/{orderId}`",
        "anchor": "get-ordersorderid"
      },
      {
        "level": 3,
        "text": "`PUT /orders/{orderId}`",
        "anchor": "put-ordersorderid"
      },
      {
        "level": 3,
        "text": "`DELETE /orders/{orderId}`",
        "anchor": "delete-ordersorderid"
      },
      {
        "level": 2,
        "text": "Database Schema",
        "anchor": "database-schema"
      },
      {
        "level": 2,
        "text": "Order Statuses",
        "anchor": "order-statuses"
      },
      {
        "level": 2,
        "text": "Involved Components",
        "anchor": "involved-components"
      }
    ],
    "excerpt": "Order Lifecycle Complete Order Journey : From user creation to on-chain execution through the 1inch network, this document tracks every step of an order's lifecycle in the 1edge system. This document ..."
  },
  {
    "id": "1edge/order-lifecycle#order-lifecycle",
    "title": "order-lifecycle - Order Lifecycle",
    "content": "Order Lifecycle",
    "url": "/docs/1edge/order-lifecycle#order-lifecycle",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Lifecycle (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#overview",
    "title": "order-lifecycle - Overview",
    "content": "Overview",
    "url": "/docs/1edge/order-lifecycle#overview",
    "category": "1edge",
    "headings": [],
    "excerpt": "Overview (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#architecture-diagram",
    "title": "order-lifecycle - Architecture Diagram",
    "content": "Architecture Diagram",
    "url": "/docs/1edge/order-lifecycle#architecture-diagram",
    "category": "1edge",
    "headings": [],
    "excerpt": "Architecture Diagram (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#complete-flow",
    "title": "order-lifecycle - Complete Flow",
    "content": "Complete Flow",
    "url": "/docs/1edge/order-lifecycle#complete-flow",
    "category": "1edge",
    "headings": [],
    "excerpt": "Complete Flow (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#order-creation-frontend",
    "title": "order-lifecycle - Order Creation (Frontend)",
    "content": "Order Creation (Frontend)",
    "url": "/docs/1edge/order-lifecycle#order-creation-frontend",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Creation (Frontend) (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#order-validation-api-server",
    "title": "order-lifecycle - Order Validation (API Server)",
    "content": "Order Validation (API Server)",
    "url": "/docs/1edge/order-lifecycle#order-validation-api-server",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Validation (API Server) (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#order-registration-orderregistry",
    "title": "order-lifecycle - Order Registration (OrderRegistry)",
    "content": "Order Registration (OrderRegistry)",
    "url": "/docs/1edge/order-lifecycle#order-registration-orderregistry",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Registration (OrderRegistry) (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#order-monitoring-watcher",
    "title": "order-lifecycle - Order Monitoring (Watcher)",
    "content": "Order Monitoring (Watcher)",
    "url": "/docs/1edge/order-lifecycle#order-monitoring-watcher",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Monitoring (Watcher) (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#trigger-evaluation-order-handlers",
    "title": "order-lifecycle - Trigger Evaluation (Order Handlers)",
    "content": "Trigger Evaluation (Order Handlers)",
    "url": "/docs/1edge/order-lifecycle#trigger-evaluation-order-handlers",
    "category": "1edge",
    "headings": [],
    "excerpt": "Trigger Evaluation (Order Handlers) (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#order-execution-handler-execute",
    "title": "order-lifecycle - Order Execution (Handler Execute)",
    "content": "Order Execution (Handler Execute)",
    "url": "/docs/1edge/order-lifecycle#order-execution-handler-execute",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Execution (Handler Execute) (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#1inch-integration",
    "title": "order-lifecycle - 1inch Integration",
    "content": "1inch Integration",
    "url": "/docs/1edge/order-lifecycle#1inch-integration",
    "category": "1edge",
    "headings": [],
    "excerpt": "1inch Integration (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#order-tracking",
    "title": "order-lifecycle - Order Tracking",
    "content": "Order Tracking",
    "url": "/docs/1edge/order-lifecycle#order-tracking",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Tracking (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#api-endpoints",
    "title": "order-lifecycle - API Endpoints",
    "content": "API Endpoints",
    "url": "/docs/1edge/order-lifecycle#api-endpoints",
    "category": "1edge",
    "headings": [],
    "excerpt": "API Endpoints (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#post-orders",
    "title": "order-lifecycle - `POST /orders`",
    "content": "`POST /orders`",
    "url": "/docs/1edge/order-lifecycle#post-orders",
    "category": "1edge",
    "headings": [],
    "excerpt": "`POST /orders` (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#get-orders",
    "title": "order-lifecycle - `GET /orders`",
    "content": "`GET /orders`",
    "url": "/docs/1edge/order-lifecycle#get-orders",
    "category": "1edge",
    "headings": [],
    "excerpt": "`GET /orders` (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#get-ordersmaker0x123",
    "title": "order-lifecycle - `GET /orders?maker=0x123...`",
    "content": "`GET /orders?maker=0x123...`",
    "url": "/docs/1edge/order-lifecycle#get-ordersmaker0x123",
    "category": "1edge",
    "headings": [],
    "excerpt": "`GET /orders?maker=0x123...` (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#get-ordersorderid",
    "title": "order-lifecycle - `GET /orders/{orderId}`",
    "content": "`GET /orders/{orderId}`",
    "url": "/docs/1edge/order-lifecycle#get-ordersorderid",
    "category": "1edge",
    "headings": [],
    "excerpt": "`GET /orders/{orderId}` (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#put-ordersorderid",
    "title": "order-lifecycle - `PUT /orders/{orderId}`",
    "content": "`PUT /orders/{orderId}`",
    "url": "/docs/1edge/order-lifecycle#put-ordersorderid",
    "category": "1edge",
    "headings": [],
    "excerpt": "`PUT /orders/{orderId}` (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#delete-ordersorderid",
    "title": "order-lifecycle - `DELETE /orders/{orderId}`",
    "content": "`DELETE /orders/{orderId}`",
    "url": "/docs/1edge/order-lifecycle#delete-ordersorderid",
    "category": "1edge",
    "headings": [],
    "excerpt": "`DELETE /orders/{orderId}` (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#database-schema",
    "title": "order-lifecycle - Database Schema",
    "content": "Database Schema",
    "url": "/docs/1edge/order-lifecycle#database-schema",
    "category": "1edge",
    "headings": [],
    "excerpt": "Database Schema (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#order-statuses",
    "title": "order-lifecycle - Order Statuses",
    "content": "Order Statuses",
    "url": "/docs/1edge/order-lifecycle#order-statuses",
    "category": "1edge",
    "headings": [],
    "excerpt": "Order Statuses (from order-lifecycle)"
  },
  {
    "id": "1edge/order-lifecycle#involved-components",
    "title": "order-lifecycle - Involved Components",
    "content": "Involved Components",
    "url": "/docs/1edge/order-lifecycle#involved-components",
    "category": "1edge",
    "headings": [],
    "excerpt": "Involved Components (from order-lifecycle)"
  }
]